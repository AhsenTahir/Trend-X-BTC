/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-mailjet@6.0.5";
exports.ids = ["vendor-chunks/node-mailjet@6.0.5"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/node-mailjet@6.0.5/node_modules/node-mailjet/mailjet.node.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/node-mailjet@6.0.5/node_modules/node-mailjet/mailjet.node.js ***!
  \*****************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*! For license information please see mailjet.node.js.LICENSE.txt */\n!function(e,a){ true?module.exports=a():0}(this,(()=>{return e={9118:(e,a,n)=>{e.exports={parallel:n(9162),serial:n(1357),serialOrdered:n(9087)}},7651:e=>{function a(e){\"function\"==typeof this.jobs[e]&&this.jobs[e]()}e.exports=function(e){Object.keys(e.jobs).forEach(a.bind(e)),e.jobs={}}},5912:(e,a,n)=>{var i=n(9265);e.exports=function(e){var a=!1;return i((function(){a=!0})),function(n,o){a?e(n,o):i((function(){e(n,o)}))}}},9265:e=>{e.exports=function(e){var a=\"function\"==typeof setImmediate?setImmediate:\"object\"==typeof process&&\"function\"==typeof process.nextTick?process.nextTick:null;a?a(e):setTimeout(e,0)}},7594:(e,a,n)=>{var i=n(5912),o=n(7651);e.exports=function(e,a,n,t){var s=n.keyedList?n.keyedList[n.index]:n.index;n.jobs[s]=function(e,a,n,o){return 2==e.length?e(n,i(o)):e(n,a,i(o))}(a,s,e[s],(function(e,a){s in n.jobs&&(delete n.jobs[s],e?o(n):n.results[s]=a,t(e,n.results))}))}},4528:e=>{e.exports=function(e,a){var n=!Array.isArray(e),i={index:0,keyedList:n||a?Object.keys(e):null,jobs:{},results:n?{}:[],size:n?Object.keys(e).length:e.length};return a&&i.keyedList.sort(n?a:function(n,i){return a(e[n],e[i])}),i}},5353:(e,a,n)=>{var i=n(7651),o=n(5912);e.exports=function(e){Object.keys(this.jobs).length&&(this.index=this.size,i(this),o(e)(null,this.results))}},9162:(e,a,n)=>{var i=n(7594),o=n(4528),t=n(5353);e.exports=function(e,a,n){for(var s=o(e);s.index<(s.keyedList||e).length;)i(e,a,s,(function(e,a){e?n(e,a):0!==Object.keys(s.jobs).length||n(null,s.results)})),s.index++;return t.bind(s,n)}},1357:(e,a,n)=>{var i=n(9087);e.exports=function(e,a,n){return i(e,a,null,n)}},9087:(e,a,n)=>{var i=n(7594),o=n(4528),t=n(5353);function s(e,a){return e<a?-1:e>a?1:0}e.exports=function(e,a,n,s){var r=o(e,n);return i(e,a,r,(function n(o,t){o?s(o,t):(r.index++,r.index<(r.keyedList||e).length?i(e,a,r,n):s(null,r.results))})),t.bind(r,s)},e.exports.ascending=s,e.exports.descending=function(e,a){return-1*s(e,a)}},1076:function(e,a,n){\"use strict\";function i(e){return i=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},i(e)}var o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var a,n=1,i=arguments.length;n<i;n++)for(var o in a=arguments[n])Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o]);return e},o.apply(this,arguments)},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,\"__esModule\",{value:!0});var s=n(9006),r=t(n(9874)),c=t(n(4771)),p=t(n(4147)),l=function(){function e(e){if(!(0,s.isPureObject)(e))throw new Error('Argument \"params\" must be object');this.init(this.cloneParams(e))}return e.prototype.getPackageVersion=function(){return this.version},e.prototype.getAPIKey=function(){return this.apiKey},e.prototype.getAPISecret=function(){return this.apiSecret},e.prototype.getAPIToken=function(){return this.apiToken},e.prototype.getConfig=function(){return o({},this.config)},e.prototype.getOptions=function(){return o({},this.options)},e.prototype.get=function(e,a){return new c.default(this,r.default.Get,e,a)},e.prototype.post=function(e,a){return new c.default(this,r.default.Post,e,a)},e.prototype.put=function(e,a){return new c.default(this,r.default.Put,e,a)},e.prototype.delete=function(e,a){return new c.default(this,r.default.Delete,e,a)},e.prototype.init=function(a){if(!(0,s.isPureObject)(a))throw new Error('Argument \"params\" must be object');var n=a.apiToken,i=a.apiKey,o=a.apiSecret,t=a.options,r=a.config;return this.version=e.packageJSON.version,this.setConfig(null!=r?r:null),this.setOptions(null!=t?t:null),\"apiToken\"in a?this.tokenConnectStrategy(n):this.basicConnectStrategy(i,o)},e.prototype.cloneParams=function(e){if(!(0,s.isPureObject)(e))throw new Error('Argument \"params\" must be object');var a=o({},e);return e.config&&(a.config=o({},e.config)),e.options&&(a.options=o({},e.options),a.options.proxy&&(a.options.proxy=o({},a.options.proxy)),a.options.headers&&(a.options.headers=o({},a.options.headers))),a},e.prototype.setConfig=function(a){if(\"object\"!==i(a))throw new Error('Argument \"customConfig\" must be object or null');var n=o({},e.config);return null!==a&&((0,s.setValueIfNotNil)(n,\"host\",a.host),(0,s.setValueIfNotNil)(n,\"output\",a.output),(0,s.setValueIfNotNil)(n,\"version\",a.version)),this.config=n,this},e.prototype.setOptions=function(e){if(\"object\"!==i(e))throw new Error('Argument \"options\" must be object or null');return this.options=null!=e?e:{},this},e.prototype.tokenConnectStrategy=function(e){if(!e)throw new Error(\"Mailjet API_TOKEN is required\");return this.apiToken=e,this},e.prototype.basicConnectStrategy=function(e,a){if(!e)throw new Error(\"Mailjet API_KEY is required\");if(!a)throw new Error(\"Mailjet API_SECRET is required\");return this.apiKey=e,this.apiSecret=a,this},e.apiConnect=function(a,n,i){return new e(o({apiKey:a,apiSecret:n},i))},e.smsConnect=function(a,n){return new e(o({apiToken:a},n))},e.config=Object.freeze({host:\"api.mailjet.com\",version:\"v3\",output:\"json\"}),e.packageJSON=Object.freeze(o({},p.default)),e}();a.default=l},8321:function(e,a,n){\"use strict\";var i,o=this&&this.__extends||(i=function(e,a){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,a){e.__proto__=a}||function(e,a){for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])},i(e,a)},function(e,a){if(\"function\"!=typeof a&&null!==a)throw new TypeError(\"Class extends value \"+String(a)+\" is not a constructor or null\");function n(){this.constructor=e}i(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}),t=this&&this.__createBinding||(Object.create?function(e,a,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(a,n);o&&!(\"get\"in o?!a.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return a[n]}}),Object.defineProperty(e,i,o)}:function(e,a,n,i){void 0===i&&(i=n),e[i]=a[n]}),s=this&&this.__exportStar||function(e,a){for(var n in e)\"default\"===n||Object.prototype.hasOwnProperty.call(a,n)||t(a,e,n)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,\"__esModule\",{value:!0}),a.HttpMethods=a.Request=a.Client=void 0;var c=r(n(9874));a.HttpMethods=c.default;var p=r(n(4771));a.Request=p.default;var l=r(n(1076));a.Client=l.default;var u=function(e){function a(){return null!==e&&e.apply(this,arguments)||this}return o(a,e),a.Request=p.default,a.HttpMethods=c.default,a.Client=l.default,a}(l.default);s(n(4310),a),a.default=u},9874:(e,a)=>{\"use strict\";var n;Object.defineProperty(a,\"__esModule\",{value:!0}),function(e){e.Get=\"get\",e.Post=\"post\",e.Put=\"put\",e.Delete=\"delete\"}(n||(n={})),a.default=n},4771:function(e,a,n){\"use strict\";function i(e){return i=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},i(e)}var o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var a,n=1,i=arguments.length;n<i;n++)for(var o in a=arguments[n])Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o]);return e},o.apply(this,arguments)},t=this&&this.__createBinding||(Object.create?function(e,a,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(a,n);o&&!(\"get\"in o?!a.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return a[n]}}),Object.defineProperty(e,i,o)}:function(e,a,n,i){void 0===i&&(i=n),e[i]=a[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,a){Object.defineProperty(e,\"default\",{enumerable:!0,value:a})}:function(e,a){e.default=a}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var a={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&t(a,e,n);return s(a,e),a},c=this&&this.__awaiter||function(e,a,n,i){return new(n||(n=Promise))((function(o,t){function s(e){try{c(i.next(e))}catch(e){t(e)}}function r(e){try{c(i.throw(e))}catch(e){t(e)}}function c(e){var a;e.done?o(e.value):(a=e.value,a instanceof n?a:new n((function(e){e(a)}))).then(s,r)}c((i=i.apply(e,a||[])).next())}))},p=this&&this.__generator||function(e,a){var n,i,o,t,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return t={next:r(0),throw:r(1),return:r(2)},\"function\"==typeof Symbol&&(t[Symbol.iterator]=function(){return this}),t;function r(t){return function(r){return function(t){if(n)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(n=1,i&&(o=2&t[0]?i.return:t[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,t[1])).done)return o;switch(i=0,o&&(t=[2&t[0],o.value]),t[0]){case 0:case 1:o=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==t[0]&&2!==t[0])){s=0;continue}if(3===t[0]&&(!o||t[1]>o[0]&&t[1]<o[3])){s.label=t[1];break}if(6===t[0]&&s.label<o[1]){s.label=o[1],o=t;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(t);break}o[2]&&s.ops.pop(),s.trys.pop();continue}t=a.call(e,s)}catch(e){t=[6,e],i=0}finally{n=o=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,r])}}},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,\"__esModule\",{value:!0});var u=l(n(4078)),d=l(n(4400)),m=r(n(3306)),f=n(9006),x=l(n(9874)),v=l(n(1076)),h=(0,d.default)({storeAsString:!0}),b=function(){function e(e,a,n,i){if(!(e instanceof v.default))throw new Error('Argument \"client\" must be instance of Client');if(!Object.values(x.default).includes(a))throw new Error('Argument \"method\" must be one of supported methods: get, post, put, delete');if(\"string\"!=typeof n)throw new Error('Argument \"resource\" must be string');this.client=e,this.method=a,this.url=n.toLowerCase(),this.resource=n.toLowerCase(),this.subPath=this.buildSubPath(),this.actionPath=null,this.config=o({},i)}return e.prototype.getUserAgent=function(){return\"mailjet-api-v3-nodejs/\".concat(this.client.getPackageVersion())},e.prototype.getCredentials=function(){return{apiToken:this.client.getAPIToken(),apiKey:this.client.getAPIKey(),apiSecret:this.client.getAPISecret()}},e.prototype.getContentType=function(e){if(\"string\"!=typeof e)throw new Error('Argument \"url\" must be string');return e.indexOf(\"text:plain\")>-1?\"text/plain\":\"application/json\"},e.prototype.getRequestBody=function(e){return[x.default.Put,x.default.Post,x.default.Delete].includes(this.method)?e:void 0},e.prototype.buildFullUrl=function(){var a,n,i=this.client.getConfig(),o=null!==(a=this.config.host)&&void 0!==a?a:i.host,t=null!==(n=this.config.version)&&void 0!==n?n:i.version;return(0,u.default)(e.protocol,o,t,this.subPath,this.url)},e.prototype.buildSubPath=function(){if(this.actionPath){var e=\"contactslist\"===this.resource&&\"csvdata/text:plain\"===this.actionPath,a=\"batchjob\"===this.resource&&\"csverror/text:csv\"===this.actionPath;return e||a?\"DATA\":this.subPath}var n=\"send\"===this.resource,i=this.resource.indexOf(\"sms\")>-1;return n||i?\"\":\"REST\"},e.prototype.makeRequest=function(a,n,i){var t,s={url:a,params:i,data:this.getRequestBody(n),method:this.method,responseType:\"json\",headers:{\"User-Agent\":this.getUserAgent(),\"Content-Type\":this.getContentType(a)},transformResponse:function(a){var n=\"string\"==typeof a,i=\"json\"===this.responseType;return a&&n&&i?e.parseToJSONb(a):a}};e.isBrowser()&&(s.headers[\"X-User-Agent\"]=s.headers[\"User-Agent\"]);var r=this.getCredentials();r.apiToken?s.headers.Authorization=\"Bearer \".concat(r.apiToken):s.auth={username:r.apiKey,password:r.apiSecret};var c=this.client.getConfig(),p=this.client.getOptions();p.timeout&&(s.timeout=p.timeout),p.proxy&&(s.proxy=p.proxy),p.headers&&Object.keys(p.headers).length>0&&(s.headers=o(o({},s.headers),p.headers));var l=null!==(t=this.config.output)&&void 0!==t?t:c.output;return l&&(s.responseType=l),p.maxBodyLength&&(s.maxBodyLength=p.maxBodyLength),p.maxContentLength&&(s.maxContentLength=p.maxContentLength),(0,m.default)(s)},e.prototype.setBaseURL=function(e){return this.url=e.toLowerCase(),this},e.prototype.id=function(e){if(![\"string\",\"number\"].includes(i(e)))throw new Error('Argument \"value\" must be string or number');return this.url=(0,u.default)(this.url,e.toString()),this},e.prototype.action=function(e){if(\"string\"!=typeof e)throw new Error('Argument \"name\" must be string');switch(this.actionPath=e.toLowerCase(),this.actionPath){case\"csvdata\":this.actionPath=\"csvdata/text:plain\";break;case\"csverror\":this.actionPath=\"csverror/text:csv\"}return this.url=(0,u.default)(this.url,this.actionPath),this.subPath=this.buildSubPath(),this},e.prototype.request=function(e,a,n){var i,o,t,s,r;return void 0===e&&(e={}),void 0===a&&(a={}),void 0===n&&(n=!0),c(this,void 0,void 0,(function(){var c,l,u,d,x,v,h,b,g,y;return p(this,(function(p){switch(p.label){case 0:if(c=this.buildFullUrl(),this.setBaseURL(this.resource),!n)return[2,{body:b=this.getRequestBody(e),params:a,url:c}];p.label=1;case 1:return p.trys.push([1,3,,4]),[4,this.makeRequest(c,e,a)];case 2:return[2,{response:l=p.sent(),body:l.data}];case 3:if((u=p.sent())instanceof m.AxiosError)throw(d=new Error).code=u.code,d.config=u.config,u.response?(x=u.response,v=x.status,h=x.statusText,b=x.data,d.response=u.response,d.statusCode=v,d.statusText=h,g=null!==(i=null==b?void 0:b.ErrorMessage)&&void 0!==i?i:u.message,d.originalMessage=g,d.message='Unsuccessful: Status Code: \"'.concat(d.statusCode,'\" Message: \"').concat(g,'\"'),b&&(\"string\"==typeof(y=null===(r=null===(s=null===(t=null===(o=b.Messages)||void 0===o?void 0:o[0])||void 0===t?void 0:t.Errors)||void 0===s?void 0:s[0])||void 0===r?void 0:r.ErrorMessage)&&(d.message+=\";\\n\".concat(y)),(0,f.setValueIfNotNil)(d,\"ErrorMessage\",b.ErrorMessage),(0,f.setValueIfNotNil)(d,\"ErrorCode\",b.ErrorCode),(0,f.setValueIfNotNil)(d,\"ErrorIdentifier\",b.ErrorIdentifier),(0,f.setValueIfNotNil)(d,\"ErrorRelatedTo\",b.ErrorRelatedTo))):(d.response=null,d.statusCode=null,d.statusText=null,d.originalMessage=u.message,d.message='Unsuccessful: Error Code: \"'.concat(d.code,'\" Message: \"').concat(u.message,'\"')),d;throw u;case 4:return[2]}}))}))},e.parseToJSONb=function(e){if(\"string\"!=typeof e)throw new Error('Argument \"text\" must be string');var a;try{a=h.parse(e)}catch(e){a={}}return a},e.isBrowser=function(){return\"object\"===(\"undefined\"==typeof window?\"undefined\":i(window))},e.protocol=\"https://\",e}();a.default=b},5917:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.SentCampaign=a.DraftCampaign=void 0,function(e){!function(e){e.Tool2=\"tool2\",e.HTML2=\"html2\",e.MJML=\"mjml\"}(e.EditMode||(e.EditMode={})),function(e){e[e.AXCanceled=-3]=\"AXCanceled\",e[e.Deleted=-2]=\"Deleted\",e[e.Archived=-1]=\"Archived\",e[e.Draft=0]=\"Draft\",e[e.Programmed=1]=\"Programmed\",e[e.Sent=2]=\"Sent\",e[e.AXTested=3]=\"AXTested\",e[e.AXSelected=4]=\"AXSelected\"}(e.CampaignDraftStatus||(e.CampaignDraftStatus={})),function(e){e.AXCancelled=\"AXCancelled\",e.Deleted=\"Deleted\",e.Archived=\"Archived\",e.Draft=\"Draft\",e.Programmed=\"Programmed\",e.Sent=\"Sent\",e.AXTested=\"AXTested\",e.AXSelected=\"AXSelected\"}(e.CampaignDraftSendingStatus||(e.CampaignDraftSendingStatus={}))}(a.DraftCampaign||(a.DraftCampaign={})),function(e){!function(e){e[e.Transactional=1]=\"Transactional\",e[e.Marketing=2]=\"Marketing\",e[e.Unknown=3]=\"Unknown\"}(e.CampaignType||(e.CampaignType={}))}(a.SentCampaign||(a.SentCampaign={}))},7566:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.Common=void 0,function(e){!function(e){e.Day=\"Day\",e.Week=\"Week\",e.Month=\"Month\",e.Year=\"Year\"}(e.Period||(e.Period={}))}(a.Common||(a.Common={}))},235:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.ContactProperties=a.BulkContactManagement=void 0,function(e){!function(e){e.AddForce=\"addforce\",e.AddNoForce=\"addnoforce\",e.Remove=\"remove\",e.UnSub=\"unsub\"}(e.ManageContactsAction||(e.ManageContactsAction={})),function(e){e.AddForce=\"addforce\",e.AddNoForce=\"addnoforce\",e.UnSub=\"unsub\",e.DuplicateOverride=\"duplicate-override\",e.DuplicateNoOverride=\"duplicate-no-override\"}(e.ImportListAction||(e.ImportListAction={})),function(e){e.AddForce=\"addforce\",e.AddNoForce=\"addnoforce\",e.Remove=\"remove\",e.UnSub=\"unsub\",e.ExcludeMarketing=\"excludemarketing\",e.IncludeMarketing=\"includemarketing\"}(e.ImportCSVMethod||(e.ImportCSVMethod={})),function(e){e.Upload=\"Upload\",e.Completed=\"Completed\",e.Abort=\"Abort\"}(e.CSVImportStatus||(e.CSVImportStatus={})),function(e){e.Completed=\"Completed\",e.InProgress=\"In Progress\",e.Error=\"Error\"}(e.JobStatus||(e.JobStatus={}))}(a.BulkContactManagement||(a.BulkContactManagement={})),function(e){!function(e){e.Str=\"str\",e.Int=\"int\",e.Float=\"float\",e.Bool=\"bool\",e.DateTime=\"datetime\"}(e.DataType||(e.DataType={})),function(e){e.Static=\"static\",e.Historic=\"historic\"}(e.NameSpace||(e.NameSpace={}))}(a.ContactProperties||(a.ContactProperties={}))},8354:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.Message=void 0,function(e){!function(e){e[e.UserUnknown=1]=\"UserUnknown\",e[e.MailboxInactive=2]=\"MailboxInactive\",e[e.QuotaExceeded=3]=\"QuotaExceeded\",e[e.InvalidDomain=4]=\"InvalidDomain\",e[e.NoMailHost=5]=\"NoMailHost\",e[e.RelayOrAccessDenied=6]=\"RelayOrAccessDenied\",e[e.SenderBlocked=7]=\"SenderBlocked\",e[e.ContentBlocked=8]=\"ContentBlocked\",e[e.PolicyIssue=9]=\"PolicyIssue\",e[e.SystemIssue=10]=\"SystemIssue\",e[e.ProtocolIssue=11]=\"ProtocolIssue\",e[e.ConnectionIssue=12]=\"ConnectionIssue\",e[e.GreyListed=13]=\"GreyListed\",e[e.PreBlocked=14]=\"PreBlocked\",e[e.DuplicateInCampaign=15]=\"DuplicateInCampaign\",e[e.SpamPreBlocked=16]=\"SpamPreBlocked\",e[e.BadOrEmptyTemplate=17]=\"BadOrEmptyTemplate\",e[e.ErrorInTemplateLanguage=18]=\"ErrorInTemplateLanguage\",e[e.TypoFix=19]=\"TypoFix\",e[e.BlackListed=20]=\"BlackListed\",e[e.SpamReporter=21]=\"SpamReporter\"}(e.MessageState||(e.MessageState={})),function(e){e[e.Transactional=1]=\"Transactional\",e[e.Marketing=2]=\"Marketing\",e[e.Unknown=3]=\"Unknown\"}(e.FromType||(e.FromType={})),function(e){e[e.Processed=0]=\"Processed\",e[e.Queued=1]=\"Queued\",e[e.Sent=2]=\"Sent\",e[e.Opened=3]=\"Opened\",e[e.Clicked=4]=\"Clicked\",e[e.Bounce=5]=\"Bounce\",e[e.Spam=6]=\"Spam\",e[e.Unsub=7]=\"Unsub\",e[e.Blocked=8]=\"Blocked\",e[e.SoftBounce=9]=\"SoftBounce\",e[e.HardBounce=10]=\"HardBounce\",e[e.Deferred=11]=\"Deferred\"}(e.MessageStatus||(e.MessageStatus={})),function(e){e.Unknown=\"unknown\",e.Queued=\"queued\",e.Sent=\"sent\",e.Opened=\"opened\",e.Clicked=\"clicked\",e.Bounce=\"bounce\",e.Spam=\"spam\",e.Unsub=\"unsub\",e.Blocked=\"blocked\",e.HardBounced=\"hardbounced\",e.SoftBounced=\"softbounced\",e.Deferred=\"deferred\"}(e.CurrentMessageStatus||(e.CurrentMessageStatus={})),function(e){e.Sent=\"sent\",e.Opened=\"opened\",e.Clicked=\"clicked\",e.Bounced=\"bounced\",e.Blocked=\"blocked\",e.Unsub=\"unsub\",e.Spam=\"spam\"}(e.EventType||(e.EventType={}))}(a.Message||(a.Message={}))},3635:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.Segmentation=void 0,function(e){!function(e){e.Used=\"used\",e.UnUsed=\"unused\",e.Deleted=\"deleted\"}(e.SegmentStatus||(e.SegmentStatus={}))}(a.Segmentation||(a.Segmentation={}))},7410:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.SendEmailV3_1=void 0,function(e){!function(e){e.AccountDefault=\"account_default\",e.Disabled=\"disabled\",e.Enabled=\"enabled\"}(e.TrackOpens||(e.TrackOpens={})),function(e){e.AccountDefault=\"account_default\",e.Disabled=\"disabled\",e.Enabled=\"enabled\"}(e.TrackClicks||(e.TrackClicks={})),function(e){e.Success=\"success\",e.Error=\"error\"}(e.ResponseStatus||(e.ResponseStatus={}))}(a.SendEmailV3_1||(a.SendEmailV3_1={}))},2256:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.DNS=a.Sender=void 0,function(e){!function(e){e.Transactional=\"transactional\",e.Bulk=\"bulk\",e.Unknown=\"unknown\"}(e.EmailType||(e.EmailType={})),function(e){e.Inactive=\"Inactive\",e.Active=\"Active\",e.Deleted=\"Deleted\"}(e.SenderStatus||(e.SenderStatus={}))}(a.Sender||(a.Sender={})),function(e){!function(e){e.OK=\"OK\",e.Error=\"Error\",e.NotChecked=\"Not checked\"}(e.DKIMConfigurationCheckStatus||(e.DKIMConfigurationCheckStatus={})),function(e){e.OK=\"OK\",e.Error=\"Error\"}(e.DKIMConfigurationStatus||(e.DKIMConfigurationStatus={})),function(e){e.OK=\"OK\",e.Error=\"Error\",e.NotChecked=\"Not checked\",e.NotFound=\"Not found\"}(e.SPFConfigurationCheckStatus||(e.SPFConfigurationCheckStatus={})),function(e){e.OK=\"OK\",e.Error=\"Error\"}(e.SPFConfigurationStatus||(e.SPFConfigurationStatus={}))}(a.DNS||(a.DNS={}))},5295:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.APIKeyConfiguration=void 0,function(e){!function(e){e.Normal=\"Normal\",e.SoftLock=\"Softlock\",e.HardLock=\"Hardlock\"}(e.RunLevel||(e.RunLevel={}))}(a.APIKeyConfiguration||(a.APIKeyConfiguration={}))},6083:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.Statistic=void 0,function(e){!function(e){e.SentCampaign=\"Campaign\",e.ABTesting=\"AX\",e.Draft=\"NL\"}(e.CampaignOverviewIDType||(e.CampaignOverviewIDType={})),function(e){e.Tool=\"tool\",e.HTML=\"html\",e.Tool2=\"tool2\",e.HTML2=\"html2\",e.MJML=\"mjml\"}(e.CampaignOverviewEditMode||(e.CampaignOverviewEditMode={})),function(e){e.Full=\"full\",e.Unknown=\"unknown\"}(e.CampaignOverviewEditType||(e.CampaignOverviewEditType={})),function(e){e.Campaign=\"Campaign\",e.APIKey=\"APIKey\",e.List=\"List\",e.Sender=\"Sender\"}(e.CounterSource||(e.CounterSource={})),function(e){e.Highest=\"Highest\",e.Hour=\"Hour\",e.Day=\"Day\",e.Lifetime=\"Lifetime\"}(e.CounterResolution||(e.CounterResolution={})),function(e){e.Message=\"Message\",e.Event=\"Event\"}(e.CounterTiming||(e.CounterTiming={})),function(e){e.Open=\"open\",e.Click=\"click\"}(e.EmailEvent||(e.EmailEvent={}))}(a.Statistic||(a.Statistic={}))},4098:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.Template=void 0,function(e){!function(e){e.Full=\"full\",e.Basic=\"basic\",e.NewsLetter=\"newsletter\",e.ECommerce=\"e-commerce\",e.Events=\"events\",e.Travel=\"travel\",e.Sports=\"sports\",e.Welcome=\"welcome\",e.ContactPropertyUpdate=\"contact-property-update\",e.Support=\"support\",e.Invoice=\"invoice\",e.Anniversary=\"anniversary\",e.Account=\"account\",e.Activation=\"activation\"}(e.Categories||(e.Categories={})),function(e){e.ContainsAny=\"containsany\",e.ContainsAll=\"containsall\",e.IsSubSet=\"issubset\"}(e.CategoriesSelectionMethod||(e.CategoriesSelectionMethod={})),function(e){e[e.DragAndDropBuilder=1]=\"DragAndDropBuilder\",e[e.HTMLBuilder=2]=\"HTMLBuilder\",e[e.SavedSectionBuilder=3]=\"SavedSectionBuilder\",e[e.MJMLBuilder=4]=\"MJMLBuilder\"}(e.EditMode||(e.EditMode={})),function(e){e.ApiKey=\"apikey\",e.User=\"user\",e.Global=\"global\"}(e.OwnerType||(e.OwnerType={})),function(e){e.Marketing=\"marketing\",e.Transactional=\"transactional\",e.Automation=\"automation\"}(e.Purposes||(e.Purposes={})),function(e){e.ContainsAny=\"containsany\",e.ContainsAll=\"containsall\",e.IsSubSet=\"issubset\"}(e.PurposesSelectionMethod||(e.PurposesSelectionMethod={}))}(a.Template||(a.Template={}))},1174:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.Webhook=void 0,function(e){!function(e){e.Open=\"open\",e.Click=\"click\",e.Bounce=\"bounce\",e.Spam=\"spam\",e.Blocked=\"blocked\",e.UnSub=\"unsub\",e.Sent=\"sent\"}(e.EventType||(e.EventType={})),function(e){e[e.Click=1]=\"Click\",e[e.Bounce=2]=\"Bounce\",e[e.Spam=3]=\"Spam\",e[e.Blocked=4]=\"Blocked\",e[e.Unsubscribe=5]=\"Unsubscribe\",e[e.Open=6]=\"Open\",e[e.Sent=7]=\"Sent\"}(e.EventTypeValue||(e.EventTypeValue={})),function(e){e.Dead=\"dead\",e.Alive=\"alive\"}(e.Status||(e.Status={}))}(a.Webhook||(a.Webhook={}))},4310:(e,a,n)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.APIKeyConfiguration=a.DNS=a.Sender=a.Webhook=a.Statistic=a.Template=a.Segmentation=a.SentCampaign=a.DraftCampaign=a.ContactProperties=a.BulkContactManagement=a.Message=a.SendEmailV3_1=a.Common=void 0;var i=n(7566);Object.defineProperty(a,\"Common\",{enumerable:!0,get:function(){return i.Common}});var o=n(7410);Object.defineProperty(a,\"SendEmailV3_1\",{enumerable:!0,get:function(){return o.SendEmailV3_1}});var t=n(8354);Object.defineProperty(a,\"Message\",{enumerable:!0,get:function(){return t.Message}});var s=n(235);Object.defineProperty(a,\"BulkContactManagement\",{enumerable:!0,get:function(){return s.BulkContactManagement}}),Object.defineProperty(a,\"ContactProperties\",{enumerable:!0,get:function(){return s.ContactProperties}});var r=n(5917);Object.defineProperty(a,\"DraftCampaign\",{enumerable:!0,get:function(){return r.DraftCampaign}}),Object.defineProperty(a,\"SentCampaign\",{enumerable:!0,get:function(){return r.SentCampaign}});var c=n(3635);Object.defineProperty(a,\"Segmentation\",{enumerable:!0,get:function(){return c.Segmentation}});var p=n(4098);Object.defineProperty(a,\"Template\",{enumerable:!0,get:function(){return p.Template}});var l=n(6083);Object.defineProperty(a,\"Statistic\",{enumerable:!0,get:function(){return l.Statistic}});var u=n(1174);Object.defineProperty(a,\"Webhook\",{enumerable:!0,get:function(){return u.Webhook}});var d=n(2256);Object.defineProperty(a,\"Sender\",{enumerable:!0,get:function(){return d.Sender}}),Object.defineProperty(a,\"DNS\",{enumerable:!0,get:function(){return d.DNS}});var m=n(5295);Object.defineProperty(a,\"APIKeyConfiguration\",{enumerable:!0,get:function(){return m.APIKeyConfiguration}})},9006:function(e,a,n){\"use strict\";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,\"__esModule\",{value:!0}),a.setValueIfNotNil=a.isPureObject=a.isUndefined=a.isNull=a.isNil=void 0;var o=i(n(1808));a.isNil=o.default;var t=i(n(7376));a.isNull=t.default;var s=i(n(5034));a.isUndefined=s.default;var r=i(n(1818));a.isPureObject=r.default;var c=i(n(1190));a.setValueIfNotNil=c.default},1808:function(e,a,n){\"use strict\";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,\"__esModule\",{value:!0});var o=i(n(7376)),t=i(n(5034));a.default=function(e){return(0,t.default)(e)||(0,o.default)(e)}},7376:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.default=function(e){return null===e}},1818:(e,a)=>{\"use strict\";function n(e){return n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n(e)}Object.defineProperty(a,\"__esModule\",{value:!0}),a.default=function(e){return\"object\"===n(e)&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}},5034:(e,a)=>{\"use strict\";Object.defineProperty(a,\"__esModule\",{value:!0}),a.default=function(e){return void 0===e}},1190:function(e,a,n){\"use strict\";function i(e){return i=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},i(e)}var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(a,\"__esModule\",{value:!0});var t=o(n(1808)),s=o(n(7376));a.default=function(e,a,n){if(\"object\"!==i(e)||(0,s.default)(e))throw Error('Argument \"targetObject\" is not object');if(!a)throw Error('Argument \"path\" is required');(0,t.default)(n)||(e[a]=n)}},4431:function(e,a,n){var i;!function(o){\"use strict\";var t,s=/^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,r=Math.ceil,c=Math.floor,p=\"[BigNumber Error] \",l=p+\"Number primitive has more than 15 significant digits: \",u=1e14,d=14,m=9007199254740991,f=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],x=1e7,v=1e9;function h(e){var a=0|e;return e>0||e===a?a:a-1}function b(e){for(var a,n,i=1,o=e.length,t=e[0]+\"\";i<o;){for(a=e[i++]+\"\",n=d-a.length;n--;a=\"0\"+a);t+=a}for(o=t.length;48===t.charCodeAt(--o););return t.slice(0,o+1||1)}function g(e,a){var n,i,o=e.c,t=a.c,s=e.s,r=a.s,c=e.e,p=a.e;if(!s||!r)return null;if(n=o&&!o[0],i=t&&!t[0],n||i)return n?i?0:-r:s;if(s!=r)return s;if(n=s<0,i=c==p,!o||!t)return i?0:!o^n?1:-1;if(!i)return c>p^n?1:-1;for(r=(c=o.length)<(p=t.length)?c:p,s=0;s<r;s++)if(o[s]!=t[s])return o[s]>t[s]^n?1:-1;return c==p?0:c>p^n?1:-1}function y(e,a,n,i){if(e<a||e>n||e!==c(e))throw Error(p+(i||\"Argument\")+(\"number\"==typeof e?e<a||e>n?\" out of range: \":\" not an integer: \":\" not a primitive number: \")+String(e))}function w(e){var a=e.c.length-1;return h(e.e/d)==a&&e.c[a]%2!=0}function k(e,a){return(e.length>1?e.charAt(0)+\".\"+e.slice(1):e)+(a<0?\"e\":\"e+\")+a}function j(e,a,n){var i,o;if(a<0){for(o=n+\".\";++a;o+=n);e=o+e}else if(++a>(i=e.length)){for(o=n,a-=i;--a;o+=n);e+=o}else a<i&&(e=e.slice(0,a)+\".\"+e.slice(a));return e}t=function e(a){var n,i,o,t,_,S,C,E,O,A,T=H.prototype={constructor:H,toString:null,valueOf:null},R=new H(1),P=20,B=4,N=-7,F=21,L=-1e7,z=1e7,D=!1,U=1,M=0,q={prefix:\"\",groupSize:3,secondaryGroupSize:0,groupSeparator:\",\",decimalSeparator:\".\",fractionGroupSize:0,fractionGroupSeparator:\" \",suffix:\"\"},I=\"0123456789abcdefghijklmnopqrstuvwxyz\";function H(e,a){var n,t,r,p,u,f,x,v,h=this;if(!(h instanceof H))return new H(e,a);if(null==a){if(e&&!0===e._isBigNumber)return h.s=e.s,void(!e.c||e.e>z?h.c=h.e=null:e.e<L?h.c=[h.e=0]:(h.e=e.e,h.c=e.c.slice()));if((f=\"number\"==typeof e)&&0*e==0){if(h.s=1/e<0?(e=-e,-1):1,e===~~e){for(p=0,u=e;u>=10;u/=10,p++);return void(p>z?h.c=h.e=null:(h.e=p,h.c=[e]))}v=String(e)}else{if(!s.test(v=String(e)))return o(h,v,f);h.s=45==v.charCodeAt(0)?(v=v.slice(1),-1):1}(p=v.indexOf(\".\"))>-1&&(v=v.replace(\".\",\"\")),(u=v.search(/e/i))>0?(p<0&&(p=u),p+=+v.slice(u+1),v=v.substring(0,u)):p<0&&(p=v.length)}else{if(y(a,2,I.length,\"Base\"),10==a)return G(h=new H(e),P+h.e+1,B);if(v=String(e),f=\"number\"==typeof e){if(0*e!=0)return o(h,v,f,a);if(h.s=1/e<0?(v=v.slice(1),-1):1,H.DEBUG&&v.replace(/^0\\.0*|\\./,\"\").length>15)throw Error(l+e)}else h.s=45===v.charCodeAt(0)?(v=v.slice(1),-1):1;for(n=I.slice(0,a),p=u=0,x=v.length;u<x;u++)if(n.indexOf(t=v.charAt(u))<0){if(\".\"==t){if(u>p){p=x;continue}}else if(!r&&(v==v.toUpperCase()&&(v=v.toLowerCase())||v==v.toLowerCase()&&(v=v.toUpperCase()))){r=!0,u=-1,p=0;continue}return o(h,String(e),f,a)}f=!1,(p=(v=i(v,a,10,h.s)).indexOf(\".\"))>-1?v=v.replace(\".\",\"\"):p=v.length}for(u=0;48===v.charCodeAt(u);u++);for(x=v.length;48===v.charCodeAt(--x););if(v=v.slice(u,++x)){if(x-=u,f&&H.DEBUG&&x>15&&(e>m||e!==c(e)))throw Error(l+h.s*e);if((p=p-u-1)>z)h.c=h.e=null;else if(p<L)h.c=[h.e=0];else{if(h.e=p,h.c=[],u=(p+1)%d,p<0&&(u+=d),u<x){for(u&&h.c.push(+v.slice(0,u)),x-=d;u<x;)h.c.push(+v.slice(u,u+=d));u=d-(v=v.slice(u)).length}else u-=x;for(;u--;v+=\"0\");h.c.push(+v)}}else h.c=[h.e=0]}function K(e,a,n,i){var o,t,s,r,c;if(null==n?n=B:y(n,0,8),!e.c)return e.toString();if(o=e.c[0],s=e.e,null==a)c=b(e.c),c=1==i||2==i&&(s<=N||s>=F)?k(c,s):j(c,s,\"0\");else if(t=(e=G(new H(e),a,n)).e,r=(c=b(e.c)).length,1==i||2==i&&(a<=t||t<=N)){for(;r<a;c+=\"0\",r++);c=k(c,t)}else if(a-=s,c=j(c,t,\"0\"),t+1>r){if(--a>0)for(c+=\".\";a--;c+=\"0\");}else if((a+=t-r)>0)for(t+1==r&&(c+=\".\");a--;c+=\"0\");return e.s<0&&o?\"-\"+c:c}function V(e,a){for(var n,i=1,o=new H(e[0]);i<e.length;i++){if(!(n=new H(e[i])).s){o=n;break}a.call(o,n)&&(o=n)}return o}function $(e,a,n){for(var i=1,o=a.length;!a[--o];a.pop());for(o=a[0];o>=10;o/=10,i++);return(n=i+n*d-1)>z?e.c=e.e=null:n<L?e.c=[e.e=0]:(e.e=n,e.c=a),e}function G(e,a,n,i){var o,t,s,p,l,m,x,v=e.c,h=f;if(v){e:{for(o=1,p=v[0];p>=10;p/=10,o++);if((t=a-o)<0)t+=d,s=a,x=(l=v[m=0])/h[o-s-1]%10|0;else if((m=r((t+1)/d))>=v.length){if(!i)break e;for(;v.length<=m;v.push(0));l=x=0,o=1,s=(t%=d)-d+1}else{for(l=p=v[m],o=1;p>=10;p/=10,o++);x=(s=(t%=d)-d+o)<0?0:l/h[o-s-1]%10|0}if(i=i||a<0||null!=v[m+1]||(s<0?l:l%h[o-s-1]),i=n<4?(x||i)&&(0==n||n==(e.s<0?3:2)):x>5||5==x&&(4==n||i||6==n&&(t>0?s>0?l/h[o-s]:0:v[m-1])%10&1||n==(e.s<0?8:7)),a<1||!v[0])return v.length=0,i?(a-=e.e+1,v[0]=h[(d-a%d)%d],e.e=-a||0):v[0]=e.e=0,e;if(0==t?(v.length=m,p=1,m--):(v.length=m+1,p=h[d-t],v[m]=s>0?c(l/h[o-s]%h[s])*p:0),i)for(;;){if(0==m){for(t=1,s=v[0];s>=10;s/=10,t++);for(s=v[0]+=p,p=1;s>=10;s/=10,p++);t!=p&&(e.e++,v[0]==u&&(v[0]=1));break}if(v[m]+=p,v[m]!=u)break;v[m--]=0,p=1}for(t=v.length;0===v[--t];v.pop());}e.e>z?e.c=e.e=null:e.e<L&&(e.c=[e.e=0])}return e}function W(e){var a,n=e.e;return null===n?e.toString():(a=b(e.c),a=n<=N||n>=F?k(a,n):j(a,n,\"0\"),e.s<0?\"-\"+a:a)}return H.clone=e,H.ROUND_UP=0,H.ROUND_DOWN=1,H.ROUND_CEIL=2,H.ROUND_FLOOR=3,H.ROUND_HALF_UP=4,H.ROUND_HALF_DOWN=5,H.ROUND_HALF_EVEN=6,H.ROUND_HALF_CEIL=7,H.ROUND_HALF_FLOOR=8,H.EUCLID=9,H.config=H.set=function(e){var a,n;if(null!=e){if(\"object\"!=typeof e)throw Error(p+\"Object expected: \"+e);if(e.hasOwnProperty(a=\"DECIMAL_PLACES\")&&(y(n=e[a],0,v,a),P=n),e.hasOwnProperty(a=\"ROUNDING_MODE\")&&(y(n=e[a],0,8,a),B=n),e.hasOwnProperty(a=\"EXPONENTIAL_AT\")&&((n=e[a])&&n.pop?(y(n[0],-v,0,a),y(n[1],0,v,a),N=n[0],F=n[1]):(y(n,-v,v,a),N=-(F=n<0?-n:n))),e.hasOwnProperty(a=\"RANGE\"))if((n=e[a])&&n.pop)y(n[0],-v,-1,a),y(n[1],1,v,a),L=n[0],z=n[1];else{if(y(n,-v,v,a),!n)throw Error(p+a+\" cannot be zero: \"+n);L=-(z=n<0?-n:n)}if(e.hasOwnProperty(a=\"CRYPTO\")){if((n=e[a])!==!!n)throw Error(p+a+\" not true or false: \"+n);if(n){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw D=!n,Error(p+\"crypto unavailable\");D=n}else D=n}if(e.hasOwnProperty(a=\"MODULO_MODE\")&&(y(n=e[a],0,9,a),U=n),e.hasOwnProperty(a=\"POW_PRECISION\")&&(y(n=e[a],0,v,a),M=n),e.hasOwnProperty(a=\"FORMAT\")){if(\"object\"!=typeof(n=e[a]))throw Error(p+a+\" not an object: \"+n);q=n}if(e.hasOwnProperty(a=\"ALPHABET\")){if(\"string\"!=typeof(n=e[a])||/^.?$|[+\\-.\\s]|(.).*\\1/.test(n))throw Error(p+a+\" invalid: \"+n);I=n}}return{DECIMAL_PLACES:P,ROUNDING_MODE:B,EXPONENTIAL_AT:[N,F],RANGE:[L,z],CRYPTO:D,MODULO_MODE:U,POW_PRECISION:M,FORMAT:q,ALPHABET:I}},H.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!H.DEBUG)return!0;var a,n,i=e.c,o=e.e,t=e.s;e:if(\"[object Array]\"=={}.toString.call(i)){if((1===t||-1===t)&&o>=-v&&o<=v&&o===c(o)){if(0===i[0]){if(0===o&&1===i.length)return!0;break e}if((a=(o+1)%d)<1&&(a+=d),String(i[0]).length==a){for(a=0;a<i.length;a++)if((n=i[a])<0||n>=u||n!==c(n))break e;if(0!==n)return!0}}}else if(null===i&&null===o&&(null===t||1===t||-1===t))return!0;throw Error(p+\"Invalid BigNumber: \"+e)},H.maximum=H.max=function(){return V(arguments,T.lt)},H.minimum=H.min=function(){return V(arguments,T.gt)},H.random=(t=9007199254740992,_=Math.random()*t&2097151?function(){return c(Math.random()*t)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var a,n,i,o,t,s=0,l=[],u=new H(R);if(null==e?e=P:y(e,0,v),o=r(e/d),D)if(crypto.getRandomValues){for(a=crypto.getRandomValues(new Uint32Array(o*=2));s<o;)(t=131072*a[s]+(a[s+1]>>>11))>=9e15?(n=crypto.getRandomValues(new Uint32Array(2)),a[s]=n[0],a[s+1]=n[1]):(l.push(t%1e14),s+=2);s=o/2}else{if(!crypto.randomBytes)throw D=!1,Error(p+\"crypto unavailable\");for(a=crypto.randomBytes(o*=7);s<o;)(t=281474976710656*(31&a[s])+1099511627776*a[s+1]+4294967296*a[s+2]+16777216*a[s+3]+(a[s+4]<<16)+(a[s+5]<<8)+a[s+6])>=9e15?crypto.randomBytes(7).copy(a,s):(l.push(t%1e14),s+=7);s=o/7}if(!D)for(;s<o;)(t=_())<9e15&&(l[s++]=t%1e14);for(o=l[--s],e%=d,o&&e&&(t=f[d-e],l[s]=c(o/t)*t);0===l[s];l.pop(),s--);if(s<0)l=[i=0];else{for(i=-1;0===l[0];l.splice(0,1),i-=d);for(s=1,t=l[0];t>=10;t/=10,s++);s<d&&(i-=d-s)}return u.e=i,u.c=l,u}),H.sum=function(){for(var e=1,a=arguments,n=new H(a[0]);e<a.length;)n=n.plus(a[e++]);return n},i=function(){var e=\"0123456789\";function a(e,a,n,i){for(var o,t,s=[0],r=0,c=e.length;r<c;){for(t=s.length;t--;s[t]*=a);for(s[0]+=i.indexOf(e.charAt(r++)),o=0;o<s.length;o++)s[o]>n-1&&(null==s[o+1]&&(s[o+1]=0),s[o+1]+=s[o]/n|0,s[o]%=n)}return s.reverse()}return function(i,o,t,s,r){var c,p,l,u,d,m,f,x,v=i.indexOf(\".\"),h=P,g=B;for(v>=0&&(u=M,M=0,i=i.replace(\".\",\"\"),m=(x=new H(o)).pow(i.length-v),M=u,x.c=a(j(b(m.c),m.e,\"0\"),10,t,e),x.e=x.c.length),l=u=(f=a(i,o,t,r?(c=I,e):(c=e,I))).length;0==f[--u];f.pop());if(!f[0])return c.charAt(0);if(v<0?--l:(m.c=f,m.e=l,m.s=s,f=(m=n(m,x,h,g,t)).c,d=m.r,l=m.e),v=f[p=l+h+1],u=t/2,d=d||p<0||null!=f[p+1],d=g<4?(null!=v||d)&&(0==g||g==(m.s<0?3:2)):v>u||v==u&&(4==g||d||6==g&&1&f[p-1]||g==(m.s<0?8:7)),p<1||!f[0])i=d?j(c.charAt(1),-h,c.charAt(0)):c.charAt(0);else{if(f.length=p,d)for(--t;++f[--p]>t;)f[p]=0,p||(++l,f=[1].concat(f));for(u=f.length;!f[--u];);for(v=0,i=\"\";v<=u;i+=c.charAt(f[v++]));i=j(i,l,c.charAt(0))}return i}}(),n=function(){function e(e,a,n){var i,o,t,s,r=0,c=e.length,p=a%x,l=a/x|0;for(e=e.slice();c--;)r=((o=p*(t=e[c]%x)+(i=l*t+(s=e[c]/x|0)*p)%x*x+r)/n|0)+(i/x|0)+l*s,e[c]=o%n;return r&&(e=[r].concat(e)),e}function a(e,a,n,i){var o,t;if(n!=i)t=n>i?1:-1;else for(o=t=0;o<n;o++)if(e[o]!=a[o]){t=e[o]>a[o]?1:-1;break}return t}function n(e,a,n,i){for(var o=0;n--;)e[n]-=o,o=e[n]<a[n]?1:0,e[n]=o*i+e[n]-a[n];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(i,o,t,s,r){var p,l,m,f,x,v,b,g,y,w,k,j,_,S,C,E,O,A=i.s==o.s?1:-1,T=i.c,R=o.c;if(!(T&&T[0]&&R&&R[0]))return new H(i.s&&o.s&&(T?!R||T[0]!=R[0]:R)?T&&0==T[0]||!R?0*A:A/0:NaN);for(y=(g=new H(A)).c=[],A=t+(l=i.e-o.e)+1,r||(r=u,l=h(i.e/d)-h(o.e/d),A=A/d|0),m=0;R[m]==(T[m]||0);m++);if(R[m]>(T[m]||0)&&l--,A<0)y.push(1),f=!0;else{for(S=T.length,E=R.length,m=0,A+=2,(x=c(r/(R[0]+1)))>1&&(R=e(R,x,r),T=e(T,x,r),E=R.length,S=T.length),_=E,k=(w=T.slice(0,E)).length;k<E;w[k++]=0);O=R.slice(),O=[0].concat(O),C=R[0],R[1]>=r/2&&C++;do{if(x=0,(p=a(R,w,E,k))<0){if(j=w[0],E!=k&&(j=j*r+(w[1]||0)),(x=c(j/C))>1)for(x>=r&&(x=r-1),b=(v=e(R,x,r)).length,k=w.length;1==a(v,w,b,k);)x--,n(v,E<b?O:R,b,r),b=v.length,p=1;else 0==x&&(p=x=1),b=(v=R.slice()).length;if(b<k&&(v=[0].concat(v)),n(w,v,k,r),k=w.length,-1==p)for(;a(R,w,E,k)<1;)x++,n(w,E<k?O:R,k,r),k=w.length}else 0===p&&(x++,w=[0]);y[m++]=x,w[0]?w[k++]=T[_]||0:(w=[T[_]],k=1)}while((_++<S||null!=w[0])&&A--);f=null!=w[0],y[0]||y.splice(0,1)}if(r==u){for(m=1,A=y[0];A>=10;A/=10,m++);G(g,t+(g.e=m+l*d-1)+1,s,f)}else g.e=l,g.r=+f;return g}}(),S=/^(-?)0([xbo])(?=\\w[\\w.]*$)/i,C=/^([^.]+)\\.$/,E=/^\\.([^.]+)$/,O=/^-?(Infinity|NaN)$/,A=/^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g,o=function(e,a,n,i){var o,t=n?a:a.replace(A,\"\");if(O.test(t))e.s=isNaN(t)?null:t<0?-1:1;else{if(!n&&(t=t.replace(S,(function(e,a,n){return o=\"x\"==(n=n.toLowerCase())?16:\"b\"==n?2:8,i&&i!=o?e:a})),i&&(o=i,t=t.replace(C,\"$1\").replace(E,\"0.$1\")),a!=t))return new H(t,o);if(H.DEBUG)throw Error(p+\"Not a\"+(i?\" base \"+i:\"\")+\" number: \"+a);e.s=null}e.c=e.e=null},T.absoluteValue=T.abs=function(){var e=new H(this);return e.s<0&&(e.s=1),e},T.comparedTo=function(e,a){return g(this,new H(e,a))},T.decimalPlaces=T.dp=function(e,a){var n,i,o,t=this;if(null!=e)return y(e,0,v),null==a?a=B:y(a,0,8),G(new H(t),e+t.e+1,a);if(!(n=t.c))return null;if(i=((o=n.length-1)-h(this.e/d))*d,o=n[o])for(;o%10==0;o/=10,i--);return i<0&&(i=0),i},T.dividedBy=T.div=function(e,a){return n(this,new H(e,a),P,B)},T.dividedToIntegerBy=T.idiv=function(e,a){return n(this,new H(e,a),0,1)},T.exponentiatedBy=T.pow=function(e,a){var n,i,o,t,s,l,u,m,f=this;if((e=new H(e)).c&&!e.isInteger())throw Error(p+\"Exponent not an integer: \"+W(e));if(null!=a&&(a=new H(a)),s=e.e>14,!f.c||!f.c[0]||1==f.c[0]&&!f.e&&1==f.c.length||!e.c||!e.c[0])return m=new H(Math.pow(+W(f),s?2-w(e):+W(e))),a?m.mod(a):m;if(l=e.s<0,a){if(a.c?!a.c[0]:!a.s)return new H(NaN);(i=!l&&f.isInteger()&&a.isInteger())&&(f=f.mod(a))}else{if(e.e>9&&(f.e>0||f.e<-1||(0==f.e?f.c[0]>1||s&&f.c[1]>=24e7:f.c[0]<8e13||s&&f.c[0]<=9999975e7)))return t=f.s<0&&w(e)?-0:0,f.e>-1&&(t=1/t),new H(l?1/t:t);M&&(t=r(M/d+2))}for(s?(n=new H(.5),l&&(e.s=1),u=w(e)):u=(o=Math.abs(+W(e)))%2,m=new H(R);;){if(u){if(!(m=m.times(f)).c)break;t?m.c.length>t&&(m.c.length=t):i&&(m=m.mod(a))}if(o){if(0===(o=c(o/2)))break;u=o%2}else if(G(e=e.times(n),e.e+1,1),e.e>14)u=w(e);else{if(0==(o=+W(e)))break;u=o%2}f=f.times(f),t?f.c&&f.c.length>t&&(f.c.length=t):i&&(f=f.mod(a))}return i?m:(l&&(m=R.div(m)),a?m.mod(a):t?G(m,M,B,void 0):m)},T.integerValue=function(e){var a=new H(this);return null==e?e=B:y(e,0,8),G(a,a.e+1,e)},T.isEqualTo=T.eq=function(e,a){return 0===g(this,new H(e,a))},T.isFinite=function(){return!!this.c},T.isGreaterThan=T.gt=function(e,a){return g(this,new H(e,a))>0},T.isGreaterThanOrEqualTo=T.gte=function(e,a){return 1===(a=g(this,new H(e,a)))||0===a},T.isInteger=function(){return!!this.c&&h(this.e/d)>this.c.length-2},T.isLessThan=T.lt=function(e,a){return g(this,new H(e,a))<0},T.isLessThanOrEqualTo=T.lte=function(e,a){return-1===(a=g(this,new H(e,a)))||0===a},T.isNaN=function(){return!this.s},T.isNegative=function(){return this.s<0},T.isPositive=function(){return this.s>0},T.isZero=function(){return!!this.c&&0==this.c[0]},T.minus=function(e,a){var n,i,o,t,s=this,r=s.s;if(a=(e=new H(e,a)).s,!r||!a)return new H(NaN);if(r!=a)return e.s=-a,s.plus(e);var c=s.e/d,p=e.e/d,l=s.c,m=e.c;if(!c||!p){if(!l||!m)return l?(e.s=-a,e):new H(m?s:NaN);if(!l[0]||!m[0])return m[0]?(e.s=-a,e):new H(l[0]?s:3==B?-0:0)}if(c=h(c),p=h(p),l=l.slice(),r=c-p){for((t=r<0)?(r=-r,o=l):(p=c,o=m),o.reverse(),a=r;a--;o.push(0));o.reverse()}else for(i=(t=(r=l.length)<(a=m.length))?r:a,r=a=0;a<i;a++)if(l[a]!=m[a]){t=l[a]<m[a];break}if(t&&(o=l,l=m,m=o,e.s=-e.s),(a=(i=m.length)-(n=l.length))>0)for(;a--;l[n++]=0);for(a=u-1;i>r;){if(l[--i]<m[i]){for(n=i;n&&!l[--n];l[n]=a);--l[n],l[i]+=u}l[i]-=m[i]}for(;0==l[0];l.splice(0,1),--p);return l[0]?$(e,l,p):(e.s=3==B?-1:1,e.c=[e.e=0],e)},T.modulo=T.mod=function(e,a){var i,o,t=this;return e=new H(e,a),!t.c||!e.s||e.c&&!e.c[0]?new H(NaN):!e.c||t.c&&!t.c[0]?new H(t):(9==U?(o=e.s,e.s=1,i=n(t,e,0,3),e.s=o,i.s*=o):i=n(t,e,0,U),(e=t.minus(i.times(e))).c[0]||1!=U||(e.s=t.s),e)},T.multipliedBy=T.times=function(e,a){var n,i,o,t,s,r,c,p,l,m,f,v,b,g,y,w=this,k=w.c,j=(e=new H(e,a)).c;if(!(k&&j&&k[0]&&j[0]))return!w.s||!e.s||k&&!k[0]&&!j||j&&!j[0]&&!k?e.c=e.e=e.s=null:(e.s*=w.s,k&&j?(e.c=[0],e.e=0):e.c=e.e=null),e;for(i=h(w.e/d)+h(e.e/d),e.s*=w.s,(c=k.length)<(m=j.length)&&(b=k,k=j,j=b,o=c,c=m,m=o),o=c+m,b=[];o--;b.push(0));for(g=u,y=x,o=m;--o>=0;){for(n=0,f=j[o]%y,v=j[o]/y|0,t=o+(s=c);t>o;)n=((p=f*(p=k[--s]%y)+(r=v*p+(l=k[s]/y|0)*f)%y*y+b[t]+n)/g|0)+(r/y|0)+v*l,b[t--]=p%g;b[t]=n}return n?++i:b.splice(0,1),$(e,b,i)},T.negated=function(){var e=new H(this);return e.s=-e.s||null,e},T.plus=function(e,a){var n,i=this,o=i.s;if(a=(e=new H(e,a)).s,!o||!a)return new H(NaN);if(o!=a)return e.s=-a,i.minus(e);var t=i.e/d,s=e.e/d,r=i.c,c=e.c;if(!t||!s){if(!r||!c)return new H(o/0);if(!r[0]||!c[0])return c[0]?e:new H(r[0]?i:0*o)}if(t=h(t),s=h(s),r=r.slice(),o=t-s){for(o>0?(s=t,n=c):(o=-o,n=r),n.reverse();o--;n.push(0));n.reverse()}for((o=r.length)-(a=c.length)<0&&(n=c,c=r,r=n,a=o),o=0;a;)o=(r[--a]=r[a]+c[a]+o)/u|0,r[a]=u===r[a]?0:r[a]%u;return o&&(r=[o].concat(r),++s),$(e,r,s)},T.precision=T.sd=function(e,a){var n,i,o,t=this;if(null!=e&&e!==!!e)return y(e,1,v),null==a?a=B:y(a,0,8),G(new H(t),e,a);if(!(n=t.c))return null;if(i=(o=n.length-1)*d+1,o=n[o]){for(;o%10==0;o/=10,i--);for(o=n[0];o>=10;o/=10,i++);}return e&&t.e+1>i&&(i=t.e+1),i},T.shiftedBy=function(e){return y(e,-9007199254740991,m),this.times(\"1e\"+e)},T.squareRoot=T.sqrt=function(){var e,a,i,o,t,s=this,r=s.c,c=s.s,p=s.e,l=P+4,u=new H(\"0.5\");if(1!==c||!r||!r[0])return new H(!c||c<0&&(!r||r[0])?NaN:r?s:1/0);if(0==(c=Math.sqrt(+W(s)))||c==1/0?(((a=b(r)).length+p)%2==0&&(a+=\"0\"),c=Math.sqrt(+a),p=h((p+1)/2)-(p<0||p%2),i=new H(a=c==1/0?\"5e\"+p:(a=c.toExponential()).slice(0,a.indexOf(\"e\")+1)+p)):i=new H(c+\"\"),i.c[0])for((c=(p=i.e)+l)<3&&(c=0);;)if(t=i,i=u.times(t.plus(n(s,t,l,1))),b(t.c).slice(0,c)===(a=b(i.c)).slice(0,c)){if(i.e<p&&--c,\"9999\"!=(a=a.slice(c-3,c+1))&&(o||\"4999\"!=a)){+a&&(+a.slice(1)||\"5\"!=a.charAt(0))||(G(i,i.e+P+2,1),e=!i.times(i).eq(s));break}if(!o&&(G(t,t.e+P+2,0),t.times(t).eq(s))){i=t;break}l+=4,c+=4,o=1}return G(i,i.e+P+1,B,e)},T.toExponential=function(e,a){return null!=e&&(y(e,0,v),e++),K(this,e,a,1)},T.toFixed=function(e,a){return null!=e&&(y(e,0,v),e=e+this.e+1),K(this,e,a)},T.toFormat=function(e,a,n){var i,o=this;if(null==n)null!=e&&a&&\"object\"==typeof a?(n=a,a=null):e&&\"object\"==typeof e?(n=e,e=a=null):n=q;else if(\"object\"!=typeof n)throw Error(p+\"Argument not an object: \"+n);if(i=o.toFixed(e,a),o.c){var t,s=i.split(\".\"),r=+n.groupSize,c=+n.secondaryGroupSize,l=n.groupSeparator||\"\",u=s[0],d=s[1],m=o.s<0,f=m?u.slice(1):u,x=f.length;if(c&&(t=r,r=c,c=t,x-=t),r>0&&x>0){for(t=x%r||r,u=f.substr(0,t);t<x;t+=r)u+=l+f.substr(t,r);c>0&&(u+=l+f.slice(t)),m&&(u=\"-\"+u)}i=d?u+(n.decimalSeparator||\"\")+((c=+n.fractionGroupSize)?d.replace(new RegExp(\"\\\\d{\"+c+\"}\\\\B\",\"g\"),\"$&\"+(n.fractionGroupSeparator||\"\")):d):u}return(n.prefix||\"\")+i+(n.suffix||\"\")},T.toFraction=function(e){var a,i,o,t,s,r,c,l,u,m,x,v,h=this,g=h.c;if(null!=e&&(!(c=new H(e)).isInteger()&&(c.c||1!==c.s)||c.lt(R)))throw Error(p+\"Argument \"+(c.isInteger()?\"out of range: \":\"not an integer: \")+W(c));if(!g)return new H(h);for(a=new H(R),u=i=new H(R),o=l=new H(R),v=b(g),s=a.e=v.length-h.e-1,a.c[0]=f[(r=s%d)<0?d+r:r],e=!e||c.comparedTo(a)>0?s>0?a:u:c,r=z,z=1/0,c=new H(v),l.c[0]=0;m=n(c,a,0,1),1!=(t=i.plus(m.times(o))).comparedTo(e);)i=o,o=t,u=l.plus(m.times(t=u)),l=t,a=c.minus(m.times(t=a)),c=t;return t=n(e.minus(i),o,0,1),l=l.plus(t.times(u)),i=i.plus(t.times(o)),l.s=u.s=h.s,x=n(u,o,s*=2,B).minus(h).abs().comparedTo(n(l,i,s,B).minus(h).abs())<1?[u,o]:[l,i],z=r,x},T.toNumber=function(){return+W(this)},T.toPrecision=function(e,a){return null!=e&&y(e,1,v),K(this,e,a,2)},T.toString=function(e){var a,n=this,o=n.s,t=n.e;return null===t?o?(a=\"Infinity\",o<0&&(a=\"-\"+a)):a=\"NaN\":(null==e?a=t<=N||t>=F?k(b(n.c),t):j(b(n.c),t,\"0\"):10===e?a=j(b((n=G(new H(n),P+t+1,B)).c),n.e,\"0\"):(y(e,2,I.length,\"Base\"),a=i(j(b(n.c),t,\"0\"),10,e,o,!0)),o<0&&n.c[0]&&(a=\"-\"+a)),a},T.valueOf=T.toJSON=function(){return W(this)},T._isBigNumber=!0,null!=a&&H.set(a),H}(),t.default=t.BigNumber=t,void 0===(i=function(){return t}.call(a,n,a,e))||(e.exports=i)}()},9779:(e,a,n)=>{var i=n(3837),o=n(2781).Stream,t=n(3463);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}e.exports=s,i.inherits(s,o),s.create=function(e){var a=new this;for(var n in e=e||{})a[n]=e[n];return a},s.isStreamLike=function(e){return\"function\"!=typeof e&&\"string\"!=typeof e&&\"boolean\"!=typeof e&&\"number\"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof t)){var a=t.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on(\"data\",this._checkDataSize.bind(this)),e=a}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,a){return o.prototype.pipe.call(this,e,a),this.resume(),e},s.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},s.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?\"function\"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on(\"data\",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on(\"end\",this._getNext.bind(this)),void e.pipe(this,{end:!1});var a=e;this.write(a),this._getNext()},s.prototype._handleErrors=function(e){var a=this;e.on(\"error\",(function(e){a._emitError(e)}))},s.prototype.write=function(e){this.emit(\"data\",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&\"function\"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit(\"pause\"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&\"function\"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit(\"resume\")},s.prototype.end=function(){this._reset(),this.emit(\"end\")},s.prototype.destroy=function(){this._reset(),this.emit(\"close\")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e=\"DelayedStream#maxDataSize of \"+this.maxDataSize+\" bytes exceeded.\";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(a){a.dataSize&&(e.dataSize+=a.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit(\"error\",e)}},9435:e=>{var a=1e3,n=60*a,i=60*n,o=24*i,t=7*o,s=365.25*o;function r(e,a,n,i){var o=a>=1.5*n;return Math.round(e/n)+\" \"+i+(o?\"s\":\"\")}e.exports=function(e,c){c=c||{};var p,l,u=typeof e;if(\"string\"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var r=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(r){var c=parseFloat(r[1]);switch((r[2]||\"ms\").toLowerCase()){case\"years\":case\"year\":case\"yrs\":case\"yr\":case\"y\":return c*s;case\"weeks\":case\"week\":case\"w\":return c*t;case\"days\":case\"day\":case\"d\":return c*o;case\"hours\":case\"hour\":case\"hrs\":case\"hr\":case\"h\":return c*i;case\"minutes\":case\"minute\":case\"mins\":case\"min\":case\"m\":return c*n;case\"seconds\":case\"second\":case\"secs\":case\"sec\":case\"s\":return c*a;case\"milliseconds\":case\"millisecond\":case\"msecs\":case\"msec\":case\"ms\":return c;default:return}}}}(e);if(\"number\"===u&&isFinite(e))return c.long?(p=e,(l=Math.abs(p))>=o?r(p,l,o,\"day\"):l>=i?r(p,l,i,\"hour\"):l>=n?r(p,l,n,\"minute\"):l>=a?r(p,l,a,\"second\"):p+\" ms\"):function(e){var t=Math.abs(e);return t>=o?Math.round(e/o)+\"d\":t>=i?Math.round(e/i)+\"h\":t>=n?Math.round(e/n)+\"m\":t>=a?Math.round(e/a)+\"s\":e+\"ms\"}(e);throw new Error(\"val is not a non-empty string or a valid number. val=\"+JSON.stringify(e))}},1227:(e,a,n)=>{a.formatArgs=function(a){if(a[0]=(this.useColors?\"%c\":\"\")+this.namespace+(this.useColors?\" %c\":\" \")+a[0]+(this.useColors?\"%c \":\" \")+\"+\"+e.exports.humanize(this.diff),!this.useColors)return;const n=\"color: \"+this.color;a.splice(1,0,n,\"color: inherit\");let i=0,o=0;a[0].replace(/%[a-zA-Z%]/g,(e=>{\"%%\"!==e&&(i++,\"%c\"===e&&(o=i))})),a.splice(o,0,n)},a.save=function(e){try{e?a.storage.setItem(\"debug\",e):a.storage.removeItem(\"debug\")}catch(e){}},a.load=function(){let e;try{e=a.storage.getItem(\"debug\")}catch(e){}return!e&&\"undefined\"!=typeof process&&\"env\"in process&&(e=process.env.DEBUG),e},a.useColors=function(){return!(\"undefined\"==typeof window||!window.process||\"renderer\"!==window.process.type&&!window.process.__nwjs)||(\"undefined\"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&(\"undefined\"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||\"undefined\"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||\"undefined\"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||\"undefined\"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},a.storage=function(){try{return localStorage}catch(e){}}(),a.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\"))}})(),a.colors=[\"#0000CC\",\"#0000FF\",\"#0033CC\",\"#0033FF\",\"#0066CC\",\"#0066FF\",\"#0099CC\",\"#0099FF\",\"#00CC00\",\"#00CC33\",\"#00CC66\",\"#00CC99\",\"#00CCCC\",\"#00CCFF\",\"#3300CC\",\"#3300FF\",\"#3333CC\",\"#3333FF\",\"#3366CC\",\"#3366FF\",\"#3399CC\",\"#3399FF\",\"#33CC00\",\"#33CC33\",\"#33CC66\",\"#33CC99\",\"#33CCCC\",\"#33CCFF\",\"#6600CC\",\"#6600FF\",\"#6633CC\",\"#6633FF\",\"#66CC00\",\"#66CC33\",\"#9900CC\",\"#9900FF\",\"#9933CC\",\"#9933FF\",\"#99CC00\",\"#99CC33\",\"#CC0000\",\"#CC0033\",\"#CC0066\",\"#CC0099\",\"#CC00CC\",\"#CC00FF\",\"#CC3300\",\"#CC3333\",\"#CC3366\",\"#CC3399\",\"#CC33CC\",\"#CC33FF\",\"#CC6600\",\"#CC6633\",\"#CC9900\",\"#CC9933\",\"#CCCC00\",\"#CCCC33\",\"#FF0000\",\"#FF0033\",\"#FF0066\",\"#FF0099\",\"#FF00CC\",\"#FF00FF\",\"#FF3300\",\"#FF3333\",\"#FF3366\",\"#FF3399\",\"#FF33CC\",\"#FF33FF\",\"#FF6600\",\"#FF6633\",\"#FF9900\",\"#FF9933\",\"#FFCC00\",\"#FFCC33\"],a.log=console.debug||console.log||(()=>{}),e.exports=n(2447)(a);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return\"[UnexpectedJSONParseError]: \"+e.message}}},2447:(e,a,n)=>{e.exports=function(e){function a(e){let n,o,t,s=null;function r(...e){if(!r.enabled)return;const i=r,o=Number(new Date),t=o-(n||o);i.diff=t,i.prev=n,i.curr=o,n=o,e[0]=a.coerce(e[0]),\"string\"!=typeof e[0]&&e.unshift(\"%O\");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if(\"%%\"===n)return\"%\";s++;const t=a.formatters[o];if(\"function\"==typeof t){const a=e[s];n=t.call(i,a),e.splice(s,1),s--}return n})),a.formatArgs.call(i,e),(i.log||a.log).apply(i,e)}return r.namespace=e,r.useColors=a.useColors(),r.color=a.selectColor(e),r.extend=i,r.destroy=a.destroy,Object.defineProperty(r,\"enabled\",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(o!==a.namespaces&&(o=a.namespaces,t=a.enabled(e)),t),set:e=>{s=e}}),\"function\"==typeof a.init&&a.init(r),r}function i(e,n){const i=a(this.namespace+(void 0===n?\":\":n)+e);return i.log=this.log,i}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,\"*\")}return a.debug=a,a.default=a,a.coerce=function(e){return e instanceof Error?e.stack||e.message:e},a.disable=function(){const e=[...a.names.map(o),...a.skips.map(o).map((e=>\"-\"+e))].join(\",\");return a.enable(\"\"),e},a.enable=function(e){let n;a.save(e),a.namespaces=e,a.names=[],a.skips=[];const i=(\"string\"==typeof e?e:\"\").split(/[\\s,]+/),o=i.length;for(n=0;n<o;n++)i[n]&&(\"-\"===(e=i[n].replace(/\\*/g,\".*?\"))[0]?a.skips.push(new RegExp(\"^\"+e.slice(1)+\"$\")):a.names.push(new RegExp(\"^\"+e+\"$\")))},a.enabled=function(e){if(\"*\"===e[e.length-1])return!0;let n,i;for(n=0,i=a.skips.length;n<i;n++)if(a.skips[n].test(e))return!1;for(n=0,i=a.names.length;n<i;n++)if(a.names[n].test(e))return!0;return!1},a.humanize=n(9435),a.destroy=function(){console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\")},Object.keys(e).forEach((n=>{a[n]=e[n]})),a.names=[],a.skips=[],a.formatters={},a.selectColor=function(e){let n=0;for(let a=0;a<e.length;a++)n=(n<<5)-n+e.charCodeAt(a),n|=0;return a.colors[Math.abs(n)%a.colors.length]},a.enable(a.load()),a}},5158:(e,a,n)=>{\"undefined\"==typeof process||\"renderer\"===process.type||!0===false||process.__nwjs?e.exports=n(1227):e.exports=n(39)},39:(e,a,n)=>{const i=n(6224),o=n(3837);a.init=function(e){e.inspectOpts={};const n=Object.keys(a.inspectOpts);for(let i=0;i<n.length;i++)e.inspectOpts[n[i]]=a.inspectOpts[n[i]]},a.log=function(...e){return process.stderr.write(o.format(...e)+\"\\n\")},a.formatArgs=function(n){const{namespace:i,useColors:o}=this;if(o){const a=this.color,o=\"\u001b[3\"+(a<8?a:\"8;5;\"+a),t=`  ${o};1m${i} \u001b[0m`;n[0]=t+n[0].split(\"\\n\").join(\"\\n\"+t),n.push(o+\"m+\"+e.exports.humanize(this.diff)+\"\u001b[0m\")}else n[0]=(a.inspectOpts.hideDate?\"\":(new Date).toISOString()+\" \")+i+\" \"+n[0]},a.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},a.load=function(){return process.env.DEBUG},a.useColors=function(){return\"colors\"in a.inspectOpts?Boolean(a.inspectOpts.colors):i.isatty(process.stderr.fd)},a.destroy=o.deprecate((()=>{}),\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\"),a.colors=[6,2,3,4,5,1];try{const e=n(2130);e&&(e.stderr||e).level>=2&&(a.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}a.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,a)=>{const n=a.substring(6).toLowerCase().replace(/_([a-z])/g,((e,a)=>a.toUpperCase()));let i=process.env[a];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&(\"null\"===i?null:Number(i)),e[n]=i,e}),{}),e.exports=n(2447)(a);const{formatters:t}=e.exports;t.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).split(\"\\n\").map((e=>e.trim())).join(\" \")},t.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)}},3463:(e,a,n)=>{var i=n(2781).Stream,o=n(3837);function t(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=t,o.inherits(t,i),t.create=function(e,a){var n=new this;for(var i in a=a||{})n[i]=a[i];n.source=e;var o=e.emit;return e.emit=function(){return n._handleEmit(arguments),o.apply(e,arguments)},e.on(\"error\",(function(){})),n.pauseStream&&e.pause(),n},Object.defineProperty(t.prototype,\"readable\",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),t.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},t.prototype.resume=function(){this._released||this.release(),this.source.resume()},t.prototype.pause=function(){this.source.pause()},t.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},t.prototype.pipe=function(){var e=i.prototype.pipe.apply(this,arguments);return this.resume(),e},t.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):(\"data\"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},t.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e=\"DelayedStream#maxDataSize of \"+this.maxDataSize+\" bytes exceeded.\";this.emit(\"error\",new Error(e))}}},2261:(e,a,n)=>{var i;e.exports=function(){if(!i){try{i=n(5158)(\"follow-redirects\")}catch(e){}\"function\"!=typeof i&&(i=function(){})}i.apply(null,arguments)}},938:(e,a,n)=>{var i=n(7310),o=i.URL,t=n(3685),s=n(5687),r=n(2781).Writable,c=n(9491),p=n(2261),l=[\"abort\",\"aborted\",\"connect\",\"error\",\"socket\",\"timeout\"],u=Object.create(null);l.forEach((function(e){u[e]=function(a,n,i){this._redirectable.emit(e,a,n,i)}}));var d=w(\"ERR_FR_REDIRECTION_FAILURE\",\"Redirected request failed\"),m=w(\"ERR_FR_TOO_MANY_REDIRECTS\",\"Maximum number of redirects exceeded\"),f=w(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\"Request body larger than maxBodyLength limit\"),x=w(\"ERR_STREAM_WRITE_AFTER_END\",\"write after end\");function v(e,a){r.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],a&&this.on(\"response\",a);var n=this;this._onNativeResponse=function(e){n._processResponse(e)},this._performRequest()}function h(e){var a={maxRedirects:21,maxBodyLength:10485760},n={};return Object.keys(e).forEach((function(t){var s=t+\":\",r=n[s]=e[t],l=a[t]=Object.create(r);Object.defineProperties(l,{request:{value:function(e,t,r){if(\"string\"==typeof e){var l=e;try{e=g(new o(l))}catch(a){e=i.parse(l)}}else o&&e instanceof o?e=g(e):(r=t,t=e,e={protocol:s});return\"function\"==typeof t&&(r=t,t=null),(t=Object.assign({maxRedirects:a.maxRedirects,maxBodyLength:a.maxBodyLength},e,t)).nativeProtocols=n,c.equal(t.protocol,s,\"protocol mismatch\"),p(\"options\",t),new v(t,r)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,a,n){var i=l.request(e,a,n);return i.end(),i},configurable:!0,enumerable:!0,writable:!0}})})),a}function b(){}function g(e){var a={protocol:e.protocol,hostname:e.hostname.startsWith(\"[\")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return\"\"!==e.port&&(a.port=Number(e.port)),a}function y(e,a){var n;for(var i in a)e.test(i)&&(n=a[i],delete a[i]);return null==n?void 0:String(n).trim()}function w(e,a){function n(e){Error.captureStackTrace(this,this.constructor),e?(this.message=a+\": \"+e.message,this.cause=e):this.message=a}return n.prototype=new Error,n.prototype.constructor=n,n.prototype.name=\"Error [\"+e+\"]\",n.prototype.code=e,n}function k(e){for(var a of l)e.removeListener(a,u[a]);e.on(\"error\",b),e.abort()}v.prototype=Object.create(r.prototype),v.prototype.abort=function(){k(this._currentRequest),this.emit(\"abort\")},v.prototype.write=function(e,a,n){if(this._ending)throw new x;if(!(\"string\"==typeof e||\"object\"==typeof e&&\"length\"in e))throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\"function\"==typeof a&&(n=a,a=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:a}),this._currentRequest.write(e,a,n)):(this.emit(\"error\",new f),this.abort()):n&&n()},v.prototype.end=function(e,a,n){if(\"function\"==typeof e?(n=e,e=a=null):\"function\"==typeof a&&(n=a,a=null),e){var i=this,o=this._currentRequest;this.write(e,a,(function(){i._ended=!0,o.end(null,null,n)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,n)},v.prototype.setHeader=function(e,a){this._options.headers[e]=a,this._currentRequest.setHeader(e,a)},v.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},v.prototype.setTimeout=function(e,a){var n=this;function i(a){a.setTimeout(e),a.removeListener(\"timeout\",a.destroy),a.addListener(\"timeout\",a.destroy)}function o(a){n._timeout&&clearTimeout(n._timeout),n._timeout=setTimeout((function(){n.emit(\"timeout\"),t()}),e),i(a)}function t(){n._timeout&&(clearTimeout(n._timeout),n._timeout=null),n.removeListener(\"abort\",t),n.removeListener(\"error\",t),n.removeListener(\"response\",t),a&&n.removeListener(\"timeout\",a),n.socket||n._currentRequest.removeListener(\"socket\",o)}return a&&this.on(\"timeout\",a),this.socket?o(this.socket):this._currentRequest.once(\"socket\",o),this.on(\"socket\",i),this.on(\"abort\",t),this.on(\"error\",t),this.on(\"response\",t),this},[\"flushHeaders\",\"getHeader\",\"setNoDelay\",\"setSocketKeepAlive\"].forEach((function(e){v.prototype[e]=function(a,n){return this._currentRequest[e](a,n)}})),[\"aborted\",\"connection\",\"socket\"].forEach((function(e){Object.defineProperty(v.prototype,e,{get:function(){return this._currentRequest[e]}})})),v.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var a=e.path.indexOf(\"?\");a<0?e.pathname=e.path:(e.pathname=e.path.substring(0,a),e.search=e.path.substring(a))}},v.prototype._performRequest=function(){var e=this._options.protocol,a=this._options.nativeProtocols[e];if(a){if(this._options.agents){var n=e.slice(0,-1);this._options.agent=this._options.agents[n]}var o=this._currentRequest=a.request(this._options,this._onNativeResponse);for(var t of(o._redirectable=this,l))o.on(t,u[t]);if(this._currentUrl=/^\\//.test(this._options.path)?i.format(this._options):this._currentUrl=this._options.path,this._isRedirect){var s=0,r=this,c=this._requestBodyBuffers;!function e(a){if(o===r._currentRequest)if(a)r.emit(\"error\",a);else if(s<c.length){var n=c[s++];o.finished||o.write(n.data,n.encoding,e)}else r._ended&&o.end()}()}}else this.emit(\"error\",new TypeError(\"Unsupported protocol \"+e))},v.prototype._processResponse=function(e){var a=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:a});var n=e.headers.location;if(!n||!1===this._options.followRedirects||a<300||a>=400)return e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit(\"response\",e),void(this._requestBodyBuffers=[]);if(k(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit(\"error\",new m);else{var o,t=this._options.beforeRedirect;t&&(o=Object.assign({Host:e.req.getHeader(\"host\")},this._options.headers));var s=this._options.method;((301===a||302===a)&&\"POST\"===this._options.method||303===a&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method=\"GET\",this._requestBodyBuffers=[],y(/^content-/i,this._options.headers));var r,c=y(/^host$/i,this._options.headers),l=i.parse(this._currentUrl),u=c||l.host,f=/^\\w+:/.test(n)?this._currentUrl:i.format(Object.assign(l,{host:u}));try{r=i.resolve(f,n)}catch(e){return void this.emit(\"error\",new d(e))}p(\"redirecting to\",r),this._isRedirect=!0;var x=i.parse(r);if(Object.assign(this._options,x),(x.protocol!==l.protocol&&\"https:\"!==x.protocol||x.host!==u&&!function(e,a){const n=e.length-a.length-1;return n>0&&\".\"===e[n]&&e.endsWith(a)}(x.host,u))&&y(/^(?:authorization|cookie)$/i,this._options.headers),\"function\"==typeof t){var v={headers:e.headers,statusCode:a},h={url:f,method:s,headers:o};try{t(this._options,v,h)}catch(e){return void this.emit(\"error\",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){this.emit(\"error\",new d(e))}}},e.exports=h({http:t,https:s}),e.exports.wrap=h},6882:(e,a,n)=>{var i=n(9779),o=n(3837),t=n(1017),s=n(3685),r=n(5687),c=n(7310).parse,p=n(7147),l=n(2781).Stream,u=n(983),d=n(9118),m=n(2275);function f(e){if(!(this instanceof f))return new f(e);for(var a in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],i.call(this),e=e||{})this[a]=e[a]}e.exports=f,o.inherits(f,i),f.LINE_BREAK=\"\\r\\n\",f.DEFAULT_CONTENT_TYPE=\"application/octet-stream\",f.prototype.append=function(e,a,n){\"string\"==typeof(n=n||{})&&(n={filename:n});var t=i.prototype.append.bind(this);if(\"number\"==typeof a&&(a=\"\"+a),o.isArray(a))this._error(new Error(\"Arrays are not supported.\"));else{var s=this._multiPartHeader(e,a,n),r=this._multiPartFooter();t(s),t(a),t(r),this._trackLength(s,a,n)}},f.prototype._trackLength=function(e,a,n){var i=0;null!=n.knownLength?i+=+n.knownLength:Buffer.isBuffer(a)?i=a.length:\"string\"==typeof a&&(i=Buffer.byteLength(a)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+f.LINE_BREAK.length,a&&(a.path||a.readable&&a.hasOwnProperty(\"httpVersion\")||a instanceof l)&&(n.knownLength||this._valuesToMeasure.push(a))},f.prototype._lengthRetriever=function(e,a){e.hasOwnProperty(\"fd\")?null!=e.end&&e.end!=1/0&&null!=e.start?a(null,e.end+1-(e.start?e.start:0)):p.stat(e.path,(function(n,i){var o;n?a(n):(o=i.size-(e.start?e.start:0),a(null,o))})):e.hasOwnProperty(\"httpVersion\")?a(null,+e.headers[\"content-length\"]):e.hasOwnProperty(\"httpModule\")?(e.on(\"response\",(function(n){e.pause(),a(null,+n.headers[\"content-length\"])})),e.resume()):a(\"Unknown stream\")},f.prototype._multiPartHeader=function(e,a,n){if(\"string\"==typeof n.header)return n.header;var i,o=this._getContentDisposition(a,n),t=this._getContentType(a,n),s=\"\",r={\"Content-Disposition\":[\"form-data\",'name=\"'+e+'\"'].concat(o||[]),\"Content-Type\":[].concat(t||[])};for(var c in\"object\"==typeof n.header&&m(r,n.header),r)r.hasOwnProperty(c)&&null!=(i=r[c])&&(Array.isArray(i)||(i=[i]),i.length&&(s+=c+\": \"+i.join(\"; \")+f.LINE_BREAK));return\"--\"+this.getBoundary()+f.LINE_BREAK+s+f.LINE_BREAK},f.prototype._getContentDisposition=function(e,a){var n,i;return\"string\"==typeof a.filepath?n=t.normalize(a.filepath).replace(/\\\\/g,\"/\"):a.filename||e.name||e.path?n=t.basename(a.filename||e.name||e.path):e.readable&&e.hasOwnProperty(\"httpVersion\")&&(n=t.basename(e.client._httpMessage.path||\"\")),n&&(i='filename=\"'+n+'\"'),i},f.prototype._getContentType=function(e,a){var n=a.contentType;return!n&&e.name&&(n=u.lookup(e.name)),!n&&e.path&&(n=u.lookup(e.path)),!n&&e.readable&&e.hasOwnProperty(\"httpVersion\")&&(n=e.headers[\"content-type\"]),n||!a.filepath&&!a.filename||(n=u.lookup(a.filepath||a.filename)),n||\"object\"!=typeof e||(n=f.DEFAULT_CONTENT_TYPE),n},f.prototype._multiPartFooter=function(){return function(e){var a=f.LINE_BREAK;0===this._streams.length&&(a+=this._lastBoundary()),e(a)}.bind(this)},f.prototype._lastBoundary=function(){return\"--\"+this.getBoundary()+\"--\"+f.LINE_BREAK},f.prototype.getHeaders=function(e){var a,n={\"content-type\":\"multipart/form-data; boundary=\"+this.getBoundary()};for(a in e)e.hasOwnProperty(a)&&(n[a.toLowerCase()]=e[a]);return n},f.prototype.setBoundary=function(e){this._boundary=e},f.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},f.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),a=this.getBoundary(),n=0,i=this._streams.length;n<i;n++)\"function\"!=typeof this._streams[n]&&(e=Buffer.isBuffer(this._streams[n])?Buffer.concat([e,this._streams[n]]):Buffer.concat([e,Buffer.from(this._streams[n])]),\"string\"==typeof this._streams[n]&&this._streams[n].substring(2,a.length+2)===a||(e=Buffer.concat([e,Buffer.from(f.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])},f.prototype._generateBoundary=function(){for(var e=\"--------------------------\",a=0;a<24;a++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},f.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error(\"Cannot calculate proper length in synchronous way.\")),e},f.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},f.prototype.getLength=function(e){var a=this._overheadLength+this._valueLength;this._streams.length&&(a+=this._lastBoundary().length),this._valuesToMeasure.length?d.parallel(this._valuesToMeasure,this._lengthRetriever,(function(n,i){n?e(n):(i.forEach((function(e){a+=e})),e(null,a))})):process.nextTick(e.bind(this,null,a))},f.prototype.submit=function(e,a){var n,i,o={method:\"post\"};return\"string\"==typeof e?(e=c(e),i=m({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},o)):(i=m(e,o)).port||(i.port=\"https:\"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),n=\"https:\"==i.protocol?r.request(i):s.request(i),this.getLength(function(e,i){if(e&&\"Unknown stream\"!==e)this._error(e);else if(i&&n.setHeader(\"Content-Length\",i),this.pipe(n),a){var o,t=function(e,i){return n.removeListener(\"error\",t),n.removeListener(\"response\",o),a.call(this,e,i)};o=t.bind(this,null),n.on(\"error\",t),n.on(\"response\",o)}}.bind(this)),n},f.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit(\"error\",e))},f.prototype.toString=function(){return\"[object FormData]\"}},2275:e=>{e.exports=function(e,a){return Object.keys(a).forEach((function(n){e[n]=e[n]||a[n]})),e}},6560:e=>{\"use strict\";e.exports=(e,a)=>{a=a||process.argv;const n=e.startsWith(\"-\")?\"\":1===e.length?\"-\":\"--\",i=a.indexOf(n+e),o=a.indexOf(\"--\");return-1!==i&&(-1===o||i<o)}},4400:(e,a,n)=>{var i=n(4123).stringify,o=n(6813);e.exports=function(e){return{parse:o(e),stringify:i}},e.exports.parse=o(),e.exports.stringify=i},6813:(e,a,n)=>{var i=null;const o=/(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])/,t=/(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)/;e.exports=function(e){\"use strict\";var a={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:\"error\",constructorAction:\"error\"};if(null!=e){if(!0===e.strict&&(a.strict=!0),!0===e.storeAsString&&(a.storeAsString=!0),a.alwaysParseAsBig=!0===e.alwaysParseAsBig&&e.alwaysParseAsBig,a.useNativeBigInt=!0===e.useNativeBigInt&&e.useNativeBigInt,void 0!==e.constructorAction){if(\"error\"!==e.constructorAction&&\"ignore\"!==e.constructorAction&&\"preserve\"!==e.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be \"error\", \"ignore\" or undefined but passed ${e.constructorAction}`);a.constructorAction=e.constructorAction}if(void 0!==e.protoAction){if(\"error\"!==e.protoAction&&\"ignore\"!==e.protoAction&&\"preserve\"!==e.protoAction)throw new Error(`Incorrect value for protoAction option, must be \"error\", \"ignore\" or undefined but passed ${e.protoAction}`);a.protoAction=e.protoAction}}var s,r,c,p,l={'\"':'\"',\"\\\\\":\"\\\\\",\"/\":\"/\",b:\"\\b\",f:\"\\f\",n:\"\\n\",r:\"\\r\",t:\"\\t\"},u=function(e){throw{name:\"SyntaxError\",message:e,at:s,text:c}},d=function(e){return e&&e!==r&&u(\"Expected '\"+e+\"' instead of '\"+r+\"'\"),r=c.charAt(s),s+=1,r},m=function(){var e,o=\"\";for(\"-\"===r&&(o=\"-\",d(\"-\"));r>=\"0\"&&r<=\"9\";)o+=r,d();if(\".\"===r)for(o+=\".\";d()&&r>=\"0\"&&r<=\"9\";)o+=r;if(\"e\"===r||\"E\"===r)for(o+=r,d(),\"-\"!==r&&\"+\"!==r||(o+=r,d());r>=\"0\"&&r<=\"9\";)o+=r,d();if(e=+o,isFinite(e))return null==i&&(i=n(4431)),o.length>15?a.storeAsString?o:a.useNativeBigInt?BigInt(o):new i(o):a.alwaysParseAsBig?a.useNativeBigInt?BigInt(e):new i(e):e;u(\"Bad number\")},f=function(){var e,a,n,i=\"\";if('\"'===r)for(var o=s;d();){if('\"'===r)return s-1>o&&(i+=c.substring(o,s-1)),d(),i;if(\"\\\\\"===r){if(s-1>o&&(i+=c.substring(o,s-1)),d(),\"u\"===r){for(n=0,a=0;a<4&&(e=parseInt(d(),16),isFinite(e));a+=1)n=16*n+e;i+=String.fromCharCode(n)}else{if(\"string\"!=typeof l[r])break;i+=l[r]}o=s}}u(\"Bad string\")},x=function(){for(;r&&r<=\" \";)d()};return p=function(){switch(x(),r){case\"{\":return function(){var e,n=Object.create(null);if(\"{\"===r){if(d(\"{\"),x(),\"}\"===r)return d(\"}\"),n;for(;r;){if(e=f(),x(),d(\":\"),!0===a.strict&&Object.hasOwnProperty.call(n,e)&&u('Duplicate key \"'+e+'\"'),!0===o.test(e)?\"error\"===a.protoAction?u(\"Object contains forbidden prototype property\"):\"ignore\"===a.protoAction?p():n[e]=p():!0===t.test(e)?\"error\"===a.constructorAction?u(\"Object contains forbidden constructor property\"):\"ignore\"===a.constructorAction?p():n[e]=p():n[e]=p(),x(),\"}\"===r)return d(\"}\"),n;d(\",\"),x()}}u(\"Bad object\")}();case\"[\":return function(){var e=[];if(\"[\"===r){if(d(\"[\"),x(),\"]\"===r)return d(\"]\"),e;for(;r;){if(e.push(p()),x(),\"]\"===r)return d(\"]\"),e;d(\",\"),x()}}u(\"Bad array\")}();case'\"':return f();case\"-\":return m();default:return r>=\"0\"&&r<=\"9\"?m():function(){switch(r){case\"t\":return d(\"t\"),d(\"r\"),d(\"u\"),d(\"e\"),!0;case\"f\":return d(\"f\"),d(\"a\"),d(\"l\"),d(\"s\"),d(\"e\"),!1;case\"n\":return d(\"n\"),d(\"u\"),d(\"l\"),d(\"l\"),null}u(\"Unexpected '\"+r+\"'\")}()}},function(e,a){var n;return c=e+\"\",s=0,r=\" \",n=p(),x(),r&&u(\"Syntax error\"),\"function\"==typeof a?function e(n,i){var o,t=n[i];return t&&\"object\"==typeof t&&Object.keys(t).forEach((function(a){void 0!==(o=e(t,a))?t[a]=o:delete t[a]})),a.call(n,i,t)}({\"\":n},\"\"):n}}},4123:(e,a,n)=>{var i=n(4431),o=e.exports;!function(){\"use strict\";var e,a,n,t=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,s={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"};function r(e){return t.lastIndex=0,t.test(e)?'\"'+e.replace(t,(function(e){var a=s[e];return\"string\"==typeof a?a:\"\\\\u\"+(\"0000\"+e.charCodeAt(0).toString(16)).slice(-4)}))+'\"':'\"'+e+'\"'}function c(o,t){var s,p,l,u,d,m=e,f=t[o],x=null!=f&&(f instanceof i||i.isBigNumber(f));switch(f&&\"object\"==typeof f&&\"function\"==typeof f.toJSON&&(f=f.toJSON(o)),\"function\"==typeof n&&(f=n.call(t,o,f)),typeof f){case\"string\":return x?f:r(f);case\"number\":return isFinite(f)?String(f):\"null\";case\"boolean\":case\"null\":case\"bigint\":return String(f);case\"object\":if(!f)return\"null\";if(e+=a,d=[],\"[object Array]\"===Object.prototype.toString.apply(f)){for(u=f.length,s=0;s<u;s+=1)d[s]=c(s,f)||\"null\";return l=0===d.length?\"[]\":e?\"[\\n\"+e+d.join(\",\\n\"+e)+\"\\n\"+m+\"]\":\"[\"+d.join(\",\")+\"]\",e=m,l}if(n&&\"object\"==typeof n)for(u=n.length,s=0;s<u;s+=1)\"string\"==typeof n[s]&&(l=c(p=n[s],f))&&d.push(r(p)+(e?\": \":\":\")+l);else Object.keys(f).forEach((function(a){var n=c(a,f);n&&d.push(r(a)+(e?\": \":\":\")+n)}));return l=0===d.length?\"{}\":e?\"{\\n\"+e+d.join(\",\\n\"+e)+\"\\n\"+m+\"}\":\"{\"+d.join(\",\")+\"}\",e=m,l}}\"function\"!=typeof o.stringify&&(o.stringify=function(i,o,t){var s;if(e=\"\",a=\"\",\"number\"==typeof t)for(s=0;s<t;s+=1)a+=\" \";else\"string\"==typeof t&&(a=t);if(n=o,o&&\"function\"!=typeof o&&(\"object\"!=typeof o||\"number\"!=typeof o.length))throw new Error(\"JSON.stringify\");return c(\"\",{\"\":i})})}()},5234:(e,a,n)=>{e.exports=n(3765)},983:(e,a,n)=>{\"use strict\";var i,o,t,s=n(5234),r=n(1017).extname,c=/^\\s*([^;\\s]*)(?:;|\\s|$)/,p=/^text\\//i;function l(e){if(!e||\"string\"!=typeof e)return!1;var a=c.exec(e),n=a&&s[a[1].toLowerCase()];return n&&n.charset?n.charset:!(!a||!p.test(a[1]))&&\"UTF-8\"}a.charset=l,a.charsets={lookup:l},a.contentType=function(e){if(!e||\"string\"!=typeof e)return!1;var n=-1===e.indexOf(\"/\")?a.lookup(e):e;if(!n)return!1;if(-1===n.indexOf(\"charset\")){var i=a.charset(n);i&&(n+=\"; charset=\"+i.toLowerCase())}return n},a.extension=function(e){if(!e||\"string\"!=typeof e)return!1;var n=c.exec(e),i=n&&a.extensions[n[1].toLowerCase()];return!(!i||!i.length)&&i[0]},a.extensions=Object.create(null),a.lookup=function(e){if(!e||\"string\"!=typeof e)return!1;var n=r(\"x.\"+e).toLowerCase().substr(1);return n&&a.types[n]||!1},a.types=Object.create(null),i=a.extensions,o=a.types,t=[\"nginx\",\"apache\",void 0,\"iana\"],Object.keys(s).forEach((function(e){var a=s[e],n=a.extensions;if(n&&n.length){i[e]=n;for(var r=0;r<n.length;r++){var c=n[r];if(o[c]){var p=t.indexOf(s[o[c]].source),l=t.indexOf(a.source);if(\"application/octet-stream\"!==o[c]&&(p>l||p===l&&\"application/\"===o[c].substr(0,12)))continue}o[c]=e}}}))},1394:(e,a,n)=>{\"use strict\";var i=n(7310).parse,o={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},t=String.prototype.endsWith||function(e){return e.length<=this.length&&-1!==this.indexOf(e,this.length-e.length)};function s(e){return process.env[e.toLowerCase()]||process.env[e.toUpperCase()]||\"\"}a.getProxyForUrl=function(e){var a=\"string\"==typeof e?i(e):e||{},n=a.protocol,r=a.host,c=a.port;if(\"string\"!=typeof r||!r||\"string\"!=typeof n)return\"\";if(n=n.split(\":\",1)[0],!function(e,a){var n=(s(\"npm_config_no_proxy\")||s(\"no_proxy\")).toLowerCase();return!n||\"*\"!==n&&n.split(/[,\\s]/).every((function(n){if(!n)return!0;var i=n.match(/^(.+):(\\d+)$/),o=i?i[1]:n,s=i?parseInt(i[2]):0;return!(!s||s===a)||(/^[.*]/.test(o)?(\"*\"===o.charAt(0)&&(o=o.slice(1)),!t.call(e,o)):e!==o)}))}(r=r.replace(/:\\d*$/,\"\"),c=parseInt(c)||o[n]||0))return\"\";var p=s(\"npm_config_\"+n+\"_proxy\")||s(n+\"_proxy\")||s(\"npm_config_proxy\")||s(\"all_proxy\");return p&&-1===p.indexOf(\"://\")&&(p=n+\"://\"+p),p}},2130:(e,a,n)=>{\"use strict\";const i=n(2037),o=n(6560),t=process.env;let s;function r(e){const a=function(e){if(!1===s)return 0;if(o(\"color=16m\")||o(\"color=full\")||o(\"color=truecolor\"))return 3;if(o(\"color=256\"))return 2;if(e&&!e.isTTY&&!0!==s)return 0;const a=s?1:0;if(\"win32\"===process.platform){const e=i.release().split(\".\");return Number(process.versions.node.split(\".\")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if(\"CI\"in t)return[\"TRAVIS\",\"CIRCLECI\",\"APPVEYOR\",\"GITLAB_CI\"].some((e=>e in t))||\"codeship\"===t.CI_NAME?1:a;if(\"TEAMCITY_VERSION\"in t)return/^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(t.TEAMCITY_VERSION)?1:0;if(\"truecolor\"===t.COLORTERM)return 3;if(\"TERM_PROGRAM\"in t){const e=parseInt((t.TERM_PROGRAM_VERSION||\"\").split(\".\")[0],10);switch(t.TERM_PROGRAM){case\"iTerm.app\":return e>=3?3:2;case\"Apple_Terminal\":return 2}}return/-256(color)?$/i.test(t.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(t.TERM)||\"COLORTERM\"in t?1:(t.TERM,a)}(e);return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(a)}o(\"no-color\")||o(\"no-colors\")||o(\"color=false\")?s=!1:(o(\"color\")||o(\"colors\")||o(\"color=true\")||o(\"color=always\"))&&(s=!0),\"FORCE_COLOR\"in t&&(s=0===t.FORCE_COLOR.length||0!==parseInt(t.FORCE_COLOR,10)),e.exports={supportsColor:r,stdout:r(process.stdout),stderr:r(process.stderr)}},4078:function(e,a,n){var i,o,t;t=function(){function e(e){var a=[];if(0===e.length)return\"\";if(\"string\"!=typeof e[0])throw new TypeError(\"Url must be a string. Received \"+e[0]);if(e[0].match(/^[^/:]+:\\/*$/)&&e.length>1){var n=e.shift();e[0]=n+e[0]}e[0].match(/^file:\\/\\/\\//)?e[0]=e[0].replace(/^([^/:]+):\\/*/,\"$1:///\"):e[0]=e[0].replace(/^([^/:]+):\\/*/,\"$1://\");for(var i=0;i<e.length;i++){var o=e[i];if(\"string\"!=typeof o)throw new TypeError(\"Url must be a string. Received \"+o);\"\"!==o&&(i>0&&(o=o.replace(/^[\\/]+/,\"\")),o=i<e.length-1?o.replace(/[\\/]+$/,\"\"):o.replace(/[\\/]+$/,\"/\"),a.push(o))}var t=a.join(\"/\"),s=(t=t.replace(/\\/(\\?|&|#[^!])/g,\"$1\")).split(\"?\");return t=s.shift()+(s.length>0?\"?\":\"\")+s.join(\"&\")}return function(){return e(\"object\"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}},e.exports?e.exports=t():void 0===(o=\"function\"==typeof(i=t)?i.call(a,n,a,e):i)||(e.exports=o)},9491:e=>{\"use strict\";e.exports=__webpack_require__(/*! assert */ \"assert\")},2361:e=>{\"use strict\";e.exports=__webpack_require__(/*! events */ \"events\")},7147:e=>{\"use strict\";e.exports=__webpack_require__(/*! fs */ \"fs\")},3685:e=>{\"use strict\";e.exports=__webpack_require__(/*! http */ \"http\")},5687:e=>{\"use strict\";e.exports=__webpack_require__(/*! https */ \"https\")},2037:e=>{\"use strict\";e.exports=__webpack_require__(/*! os */ \"os\")},1017:e=>{\"use strict\";e.exports=__webpack_require__(/*! path */ \"path\")},2781:e=>{\"use strict\";e.exports=__webpack_require__(/*! stream */ \"stream\")},6224:e=>{\"use strict\";e.exports=__webpack_require__(/*! tty */ \"tty\")},7310:e=>{\"use strict\";e.exports=__webpack_require__(/*! url */ \"url\")},3837:e=>{\"use strict\";e.exports=__webpack_require__(/*! util */ \"util\")},9796:e=>{\"use strict\";e.exports=__webpack_require__(/*! zlib */ \"zlib\")},3306:(e,a,n)=>{\"use strict\";const i=n(6882),o=n(7310),t=n(1394),s=n(3685),r=n(5687),c=n(3837),p=n(938),l=n(9796),u=n(2781),d=n(2361);function m(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}const f=m(i),x=m(o),v=m(s),h=m(r),b=m(c),g=m(p),y=m(l),w=m(u),k=m(d);function j(e,a){return function(){return e.apply(a,arguments)}}const{toString:_}=Object.prototype,{getPrototypeOf:S}=Object,C=(E=Object.create(null),e=>{const a=_.call(e);return E[a]||(E[a]=a.slice(8,-1).toLowerCase())});var E;const O=e=>(e=e.toLowerCase(),a=>C(a)===e),A=e=>a=>typeof a===e,{isArray:T}=Array,R=A(\"undefined\"),P=O(\"ArrayBuffer\"),B=A(\"string\"),N=A(\"function\"),F=A(\"number\"),L=e=>null!==e&&\"object\"==typeof e,z=e=>{if(\"object\"!==C(e))return!1;const a=S(e);return!(null!==a&&a!==Object.prototype&&null!==Object.getPrototypeOf(a)||Symbol.toStringTag in e||Symbol.iterator in e)},D=O(\"Date\"),U=O(\"File\"),M=O(\"Blob\"),q=O(\"FileList\"),I=O(\"URLSearchParams\");function H(e,a,{allOwnKeys:n=!1}={}){if(null==e)return;let i,o;if(\"object\"!=typeof e&&(e=[e]),T(e))for(i=0,o=e.length;i<o;i++)a.call(null,e[i],i,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),t=o.length;let s;for(i=0;i<t;i++)s=o[i],a.call(null,e[s],s,e)}}function K(e,a){a=a.toLowerCase();const n=Object.keys(e);let i,o=n.length;for(;o-- >0;)if(i=n[o],a===i.toLowerCase())return i;return null}const V=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:global,$=e=>!R(e)&&e!==V,G=(W=\"undefined\"!=typeof Uint8Array&&S(Uint8Array),e=>W&&e instanceof W);var W;const J=O(\"HTMLFormElement\"),X=(({hasOwnProperty:e})=>(a,n)=>e.call(a,n))(Object.prototype),Y=O(\"RegExp\"),Q=(e,a)=>{const n=Object.getOwnPropertyDescriptors(e),i={};H(n,((n,o)=>{let t;!1!==(t=a(n,o,e))&&(i[o]=t||n)})),Object.defineProperties(e,i)},Z=\"abcdefghijklmnopqrstuvwxyz\",ee=\"0123456789\",ae={DIGIT:ee,ALPHA:Z,ALPHA_DIGIT:Z+Z.toUpperCase()+ee},ne=O(\"AsyncFunction\"),ie={isArray:T,isArrayBuffer:P,isBuffer:function(e){return null!==e&&!R(e)&&null!==e.constructor&&!R(e.constructor)&&N(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let a;return e&&(\"function\"==typeof FormData&&e instanceof FormData||N(e.append)&&(\"formdata\"===(a=C(e))||\"object\"===a&&N(e.toString)&&\"[object FormData]\"===e.toString()))},isArrayBufferView:function(e){let a;return a=\"undefined\"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&P(e.buffer),a},isString:B,isNumber:F,isBoolean:e=>!0===e||!1===e,isObject:L,isPlainObject:z,isUndefined:R,isDate:D,isFile:U,isBlob:M,isRegExp:Y,isFunction:N,isStream:e=>L(e)&&N(e.pipe),isURLSearchParams:I,isTypedArray:G,isFileList:q,forEach:H,merge:function e(){const{caseless:a}=$(this)&&this||{},n={},i=(i,o)=>{const t=a&&K(n,o)||o;z(n[t])&&z(i)?n[t]=e(n[t],i):z(i)?n[t]=e({},i):T(i)?n[t]=i.slice():n[t]=i};for(let e=0,a=arguments.length;e<a;e++)arguments[e]&&H(arguments[e],i);return n},extend:(e,a,n,{allOwnKeys:i}={})=>(H(a,((a,i)=>{n&&N(a)?e[i]=j(a,n):e[i]=a}),{allOwnKeys:i}),e),trim:e=>e.trim?e.trim():e.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\"\"),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,a,n,i)=>{e.prototype=Object.create(a.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,\"super\",{value:a.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,a,n,i)=>{let o,t,s;const r={};if(a=a||{},null==e)return a;do{for(o=Object.getOwnPropertyNames(e),t=o.length;t-- >0;)s=o[t],i&&!i(s,e,a)||r[s]||(a[s]=e[s],r[s]=!0);e=!1!==n&&S(e)}while(e&&(!n||n(e,a))&&e!==Object.prototype);return a},kindOf:C,kindOfTest:O,endsWith:(e,a,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=a.length;const i=e.indexOf(a,n);return-1!==i&&i===n},toArray:e=>{if(!e)return null;if(T(e))return e;let a=e.length;if(!F(a))return null;const n=new Array(a);for(;a-- >0;)n[a]=e[a];return n},forEachEntry:(e,a)=>{const n=(e&&e[Symbol.iterator]).call(e);let i;for(;(i=n.next())&&!i.done;){const n=i.value;a.call(e,n[0],n[1])}},matchAll:(e,a)=>{let n;const i=[];for(;null!==(n=e.exec(a));)i.push(n);return i},isHTMLForm:J,hasOwnProperty:X,hasOwnProp:X,reduceDescriptors:Q,freezeMethods:e=>{Q(e,((a,n)=>{if(N(e)&&-1!==[\"arguments\",\"caller\",\"callee\"].indexOf(n))return!1;const i=e[n];N(i)&&(a.enumerable=!1,\"writable\"in a?a.writable=!1:a.set||(a.set=()=>{throw Error(\"Can not rewrite read-only method '\"+n+\"'\")}))}))},toObjectSet:(e,a)=>{const n={},i=e=>{e.forEach((e=>{n[e]=!0}))};return T(e)?i(e):i(String(e).split(a)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,(function(e,a,n){return a.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,a)=>(e=+e,Number.isFinite(e)?e:a),findKey:K,global:V,isContextDefined:$,ALPHABET:ae,generateString:(e=16,a=ae.ALPHA_DIGIT)=>{let n=\"\";const{length:i}=a;for(;e--;)n+=a[Math.random()*i|0];return n},isSpecCompliantForm:function(e){return!!(e&&N(e.append)&&\"FormData\"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const a=new Array(10),n=(e,i)=>{if(L(e)){if(a.indexOf(e)>=0)return;if(!(\"toJSON\"in e)){a[i]=e;const o=T(e)?[]:{};return H(e,((e,a)=>{const t=n(e,i+1);!R(t)&&(o[a]=t)})),a[i]=void 0,o}}return e};return n(e,0)},isAsyncFn:ne,isThenable:e=>e&&(L(e)||N(e))&&N(e.then)&&N(e.catch)};function oe(e,a,n,i,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name=\"AxiosError\",a&&(this.code=a),n&&(this.config=n),i&&(this.request=i),o&&(this.response=o)}ie.inherits(oe,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:ie.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const te=oe.prototype,se={};function re(e){return ie.isPlainObject(e)||ie.isArray(e)}function ce(e){return ie.endsWith(e,\"[]\")?e.slice(0,-2):e}function pe(e,a,n){return e?e.concat(a).map((function(e,a){return e=ce(e),!n&&a?\"[\"+e+\"]\":e})).join(n?\".\":\"\"):a}[\"ERR_BAD_OPTION_VALUE\",\"ERR_BAD_OPTION\",\"ECONNABORTED\",\"ETIMEDOUT\",\"ERR_NETWORK\",\"ERR_FR_TOO_MANY_REDIRECTS\",\"ERR_DEPRECATED\",\"ERR_BAD_RESPONSE\",\"ERR_BAD_REQUEST\",\"ERR_CANCELED\",\"ERR_NOT_SUPPORT\",\"ERR_INVALID_URL\"].forEach((e=>{se[e]={value:e}})),Object.defineProperties(oe,se),Object.defineProperty(te,\"isAxiosError\",{value:!0}),oe.from=(e,a,n,i,o,t)=>{const s=Object.create(te);return ie.toFlatObject(e,s,(function(e){return e!==Error.prototype}),(e=>\"isAxiosError\"!==e)),oe.call(s,e.message,a,n,i,o),s.cause=e,s.name=e.name,t&&Object.assign(s,t),s};const le=ie.toFlatObject(ie,{},null,(function(e){return/^is[A-Z]/.test(e)}));function ue(e,a,n){if(!ie.isObject(e))throw new TypeError(\"target must be an object\");a=a||new(f.default||FormData);const i=(n=ie.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,a){return!ie.isUndefined(a[e])}))).metaTokens,o=n.visitor||p,t=n.dots,s=n.indexes,r=(n.Blob||\"undefined\"!=typeof Blob&&Blob)&&ie.isSpecCompliantForm(a);if(!ie.isFunction(o))throw new TypeError(\"visitor must be a function\");function c(e){if(null===e)return\"\";if(ie.isDate(e))return e.toISOString();if(!r&&ie.isBlob(e))throw new oe(\"Blob is not supported. Use a Buffer instead.\");return ie.isArrayBuffer(e)||ie.isTypedArray(e)?r&&\"function\"==typeof Blob?new Blob([e]):Buffer.from(e):e}function p(e,n,o){let r=e;if(e&&!o&&\"object\"==typeof e)if(ie.endsWith(n,\"{}\"))n=i?n:n.slice(0,-2),e=JSON.stringify(e);else if(ie.isArray(e)&&function(e){return ie.isArray(e)&&!e.some(re)}(e)||(ie.isFileList(e)||ie.endsWith(n,\"[]\"))&&(r=ie.toArray(e)))return n=ce(n),r.forEach((function(e,i){!ie.isUndefined(e)&&null!==e&&a.append(!0===s?pe([n],i,t):null===s?n:n+\"[]\",c(e))})),!1;return!!re(e)||(a.append(pe(o,n,t),c(e)),!1)}const l=[],u=Object.assign(le,{defaultVisitor:p,convertValue:c,isVisitable:re});if(!ie.isObject(e))throw new TypeError(\"data must be an object\");return function e(n,i){if(!ie.isUndefined(n)){if(-1!==l.indexOf(n))throw Error(\"Circular reference detected in \"+i.join(\".\"));l.push(n),ie.forEach(n,(function(n,t){!0===(!(ie.isUndefined(n)||null===n)&&o.call(a,n,ie.isString(t)?t.trim():t,i,u))&&e(n,i?i.concat(t):[t])})),l.pop()}}(e),a}function de(e){const a={\"!\":\"%21\",\"'\":\"%27\",\"(\":\"%28\",\")\":\"%29\",\"~\":\"%7E\",\"%20\":\"+\",\"%00\":\"\\0\"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return a[e]}))}function me(e,a){this._pairs=[],e&&ue(e,this,a)}const fe=me.prototype;function xe(e){return encodeURIComponent(e).replace(/%3A/gi,\":\").replace(/%24/g,\"$\").replace(/%2C/gi,\",\").replace(/%20/g,\"+\").replace(/%5B/gi,\"[\").replace(/%5D/gi,\"]\")}function ve(e,a,n){if(!a)return e;const i=n&&n.encode||xe,o=n&&n.serialize;let t;if(t=o?o(a,n):ie.isURLSearchParams(a)?a.toString():new me(a,n).toString(i),t){const a=e.indexOf(\"#\");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf(\"?\")?\"?\":\"&\")+t}return e}fe.append=function(e,a){this._pairs.push([e,a])},fe.toString=function(e){const a=e?function(a){return e.call(this,a,de)}:de;return this._pairs.map((function(e){return a(e[0])+\"=\"+a(e[1])}),\"\").join(\"&\")};const he=class InterceptorManager{constructor(){this.handlers=[]}use(e,a,n){return this.handlers.push({fulfilled:e,rejected:a,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){ie.forEach(this.handlers,(function(a){null!==a&&e(a)}))}},be={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ge={isNode:!0,classes:{URLSearchParams:x.default.URLSearchParams,FormData:f.default,Blob:\"undefined\"!=typeof Blob&&Blob||null},protocols:[\"http\",\"https\",\"file\",\"data\"]},ye=\"undefined\"!=typeof window&&\"undefined\"!=typeof document,we=(ke=\"undefined\"!=typeof navigator&&navigator.product,ye&&[\"ReactNative\",\"NativeScript\",\"NS\"].indexOf(ke)<0);var ke;const je=\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&\"function\"==typeof self.importScripts,_e={...Object.freeze({__proto__:null,hasBrowserEnv:ye,hasStandardBrowserWebWorkerEnv:je,hasStandardBrowserEnv:we}),...ge};function Se(e){function a(e,n,i,o){let t=e[o++];const s=Number.isFinite(+t),r=o>=e.length;return t=!t&&ie.isArray(i)?i.length:t,r?(ie.hasOwnProp(i,t)?i[t]=[i[t],n]:i[t]=n,!s):(i[t]&&ie.isObject(i[t])||(i[t]=[]),a(e,n,i[t],o)&&ie.isArray(i[t])&&(i[t]=function(e){const a={},n=Object.keys(e);let i;const o=n.length;let t;for(i=0;i<o;i++)t=n[i],a[t]=e[t];return a}(i[t])),!s)}if(ie.isFormData(e)&&ie.isFunction(e.entries)){const n={};return ie.forEachEntry(e,((e,i)=>{a(function(e){return ie.matchAll(/\\w+|\\[(\\w*)]/g,e).map((e=>\"[]\"===e[0]?\"\":e[1]||e[0]))}(e),i,n,0)})),n}return null}const Ce={transitional:be,adapter:[\"xhr\",\"http\"],transformRequest:[function(e,a){const n=a.getContentType()||\"\",i=n.indexOf(\"application/json\")>-1,o=ie.isObject(e);if(o&&ie.isHTMLForm(e)&&(e=new FormData(e)),ie.isFormData(e))return i&&i?JSON.stringify(Se(e)):e;if(ie.isArrayBuffer(e)||ie.isBuffer(e)||ie.isStream(e)||ie.isFile(e)||ie.isBlob(e))return e;if(ie.isArrayBufferView(e))return e.buffer;if(ie.isURLSearchParams(e))return a.setContentType(\"application/x-www-form-urlencoded;charset=utf-8\",!1),e.toString();let t;if(o){if(n.indexOf(\"application/x-www-form-urlencoded\")>-1)return function(e,a){return ue(e,new _e.classes.URLSearchParams,Object.assign({visitor:function(e,a,n,i){return _e.isNode&&ie.isBuffer(e)?(this.append(a,e.toString(\"base64\")),!1):i.defaultVisitor.apply(this,arguments)}},a))}(e,this.formSerializer).toString();if((t=ie.isFileList(e))||n.indexOf(\"multipart/form-data\")>-1){const a=this.env&&this.env.FormData;return ue(t?{\"files[]\":e}:e,a&&new a,this.formSerializer)}}return o||i?(a.setContentType(\"application/json\",!1),function(e,a,n){if(ie.isString(e))try{return(a||JSON.parse)(e),ie.trim(e)}catch(e){if(\"SyntaxError\"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const a=this.transitional||Ce.transitional,n=a&&a.forcedJSONParsing,i=\"json\"===this.responseType;if(e&&ie.isString(e)&&(n&&!this.responseType||i)){const n=!(a&&a.silentJSONParsing)&&i;try{return JSON.parse(e)}catch(e){if(n){if(\"SyntaxError\"===e.name)throw oe.from(e,oe.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:\"XSRF-TOKEN\",xsrfHeaderName:\"X-XSRF-TOKEN\",maxContentLength:-1,maxBodyLength:-1,env:{FormData:_e.classes.FormData,Blob:_e.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":void 0}}};ie.forEach([\"delete\",\"get\",\"head\",\"post\",\"put\",\"patch\"],(e=>{Ce.headers[e]={}}));const Ee=Ce,Oe=ie.toObjectSet([\"age\",\"authorization\",\"content-length\",\"content-type\",\"etag\",\"expires\",\"from\",\"host\",\"if-modified-since\",\"if-unmodified-since\",\"last-modified\",\"location\",\"max-forwards\",\"proxy-authorization\",\"referer\",\"retry-after\",\"user-agent\"]),Ae=Symbol(\"internals\");function Te(e){return e&&String(e).trim().toLowerCase()}function Re(e){return!1===e||null==e?e:ie.isArray(e)?e.map(Re):String(e)}function Pe(e,a,n,i,o){return ie.isFunction(i)?i.call(this,a,n):(o&&(a=n),ie.isString(a)?ie.isString(i)?-1!==a.indexOf(i):ie.isRegExp(i)?i.test(a):void 0:void 0)}class AxiosHeaders{constructor(e){e&&this.set(e)}set(e,a,n){const i=this;function o(e,a,n){const o=Te(a);if(!o)throw new Error(\"header name must be a non-empty string\");const t=ie.findKey(i,o);(!t||void 0===i[t]||!0===n||void 0===n&&!1!==i[t])&&(i[t||a]=Re(e))}const t=(e,a)=>ie.forEach(e,((e,n)=>o(e,n,a)));return ie.isPlainObject(e)||e instanceof this.constructor?t(e,a):ie.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?t((e=>{const a={};let n,i,o;return e&&e.split(\"\\n\").forEach((function(e){o=e.indexOf(\":\"),n=e.substring(0,o).trim().toLowerCase(),i=e.substring(o+1).trim(),!n||a[n]&&Oe[n]||(\"set-cookie\"===n?a[n]?a[n].push(i):a[n]=[i]:a[n]=a[n]?a[n]+\", \"+i:i)})),a})(e),a):null!=e&&o(a,e,n),this}get(e,a){if(e=Te(e)){const n=ie.findKey(this,e);if(n){const e=this[n];if(!a)return e;if(!0===a)return function(e){const a=Object.create(null),n=/([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;let i;for(;i=n.exec(e);)a[i[1]]=i[2];return a}(e);if(ie.isFunction(a))return a.call(this,e,n);if(ie.isRegExp(a))return a.exec(e);throw new TypeError(\"parser must be boolean|regexp|function\")}}}has(e,a){if(e=Te(e)){const n=ie.findKey(this,e);return!(!n||void 0===this[n]||a&&!Pe(0,this[n],n,a))}return!1}delete(e,a){const n=this;let i=!1;function o(e){if(e=Te(e)){const o=ie.findKey(n,e);!o||a&&!Pe(0,n[o],o,a)||(delete n[o],i=!0)}}return ie.isArray(e)?e.forEach(o):o(e),i}clear(e){const a=Object.keys(this);let n=a.length,i=!1;for(;n--;){const o=a[n];e&&!Pe(0,this[o],o,e,!0)||(delete this[o],i=!0)}return i}normalize(e){const a=this,n={};return ie.forEach(this,((i,o)=>{const t=ie.findKey(n,o);if(t)return a[t]=Re(i),void delete a[o];const s=e?function(e){return e.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g,((e,a,n)=>a.toUpperCase()+n))}(o):String(o).trim();s!==o&&delete a[o],a[s]=Re(i),n[s]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const a=Object.create(null);return ie.forEach(this,((n,i)=>{null!=n&&!1!==n&&(a[i]=e&&ie.isArray(n)?n.join(\", \"):n)})),a}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,a])=>e+\": \"+a)).join(\"\\n\")}get[Symbol.toStringTag](){return\"AxiosHeaders\"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...a){const n=new this(e);return a.forEach((e=>n.set(e))),n}static accessor(e){const a=(this[Ae]=this[Ae]={accessors:{}}).accessors,n=this.prototype;function i(e){const i=Te(e);a[i]||(function(e,a){const n=ie.toCamelCase(\" \"+a);[\"get\",\"set\",\"has\"].forEach((i=>{Object.defineProperty(e,i+n,{value:function(e,n,o){return this[i].call(this,a,e,n,o)},configurable:!0})}))}(n,e),a[i]=!0)}return ie.isArray(e)?e.forEach(i):i(e),this}}AxiosHeaders.accessor([\"Content-Type\",\"Content-Length\",\"Accept\",\"Accept-Encoding\",\"User-Agent\",\"Authorization\"]),ie.reduceDescriptors(AxiosHeaders.prototype,(({value:e},a)=>{let n=a[0].toUpperCase()+a.slice(1);return{get:()=>e,set(e){this[n]=e}}})),ie.freezeMethods(AxiosHeaders);const Be=AxiosHeaders;function Ne(e,a){const n=this||Ee,i=a||n,o=Be.from(i.headers);let t=i.data;return ie.forEach(e,(function(e){t=e.call(n,t,o.normalize(),a?a.status:void 0)})),o.normalize(),t}function Fe(e){return!(!e||!e.__CANCEL__)}function Le(e,a,n){oe.call(this,null==e?\"canceled\":e,oe.ERR_CANCELED,a,n),this.name=\"CanceledError\"}function ze(e,a,n){const i=n.config.validateStatus;n.status&&i&&!i(n.status)?a(new oe(\"Request failed with status code \"+n.status,[oe.ERR_BAD_REQUEST,oe.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}function De(e,a){return e&&!function(e){return/^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(e)}(a)?function(e,a){return a?e.replace(/\\/+$/,\"\")+\"/\"+a.replace(/^\\/+/,\"\"):e}(e,a):a}ie.inherits(Le,oe,{__CANCEL__:!0});const Ue=\"1.6.2\";function Me(e){const a=/^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(e);return a&&a[1]||\"\"}const qe=/^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\s\\S]*)$/;function Ie(e,a){e=e||10;const n=new Array(e),i=new Array(e);let o,t=0,s=0;return a=void 0!==a?a:1e3,function(r){const c=Date.now(),p=i[s];o||(o=c),n[t]=r,i[t]=c;let l=s,u=0;for(;l!==t;)u+=n[l++],l%=e;if(t=(t+1)%e,t===s&&(s=(s+1)%e),c-o<a)return;const d=p&&c-p;return d?Math.round(1e3*u/d):void 0}}const He=Symbol(\"internals\");class AxiosTransformStream extends w.default.Transform{constructor(e){super({readableHighWaterMark:(e=ie.toFlatObject(e,{maxRate:0,chunkSize:65536,minChunkSize:100,timeWindow:500,ticksRate:2,samplesCount:15},null,((e,a)=>!ie.isUndefined(a[e])))).chunkSize});const a=this,n=this[He]={length:e.length,timeWindow:e.timeWindow,ticksRate:e.ticksRate,chunkSize:e.chunkSize,maxRate:e.maxRate,minChunkSize:e.minChunkSize,bytesSeen:0,isCaptured:!1,notifiedBytesLoaded:0,ts:Date.now(),bytes:0,onReadCallback:null},i=Ie(n.ticksRate*e.samplesCount,n.timeWindow);this.on(\"newListener\",(e=>{\"progress\"===e&&(n.isCaptured||(n.isCaptured=!0))}));let o=0;n.updateProgress=function(e,a){let n=0;const i=1e3/a;let o=null;return function(a,t){const s=Date.now();if(a||s-n>i)return o&&(clearTimeout(o),o=null),n=s,e.apply(null,t);o||(o=setTimeout((()=>(o=null,n=Date.now(),e.apply(null,t))),i-(s-n)))}}((function(){const e=n.length,t=n.bytesSeen,s=t-o;if(!s||a.destroyed)return;const r=i(s);o=t,process.nextTick((()=>{a.emit(\"progress\",{loaded:t,total:e,progress:e?t/e:void 0,bytes:s,rate:r||void 0,estimated:r&&e&&t<=e?(e-t)/r:void 0})}))}),n.ticksRate);const t=()=>{n.updateProgress(!0)};this.once(\"end\",t),this.once(\"error\",t)}_read(e){const a=this[He];return a.onReadCallback&&a.onReadCallback(),super._read(e)}_transform(e,a,n){const i=this,o=this[He],t=o.maxRate,s=this.readableHighWaterMark,r=o.timeWindow,c=t/(1e3/r),p=!1!==o.minChunkSize?Math.max(o.minChunkSize,.01*c):0,l=(e,a)=>{const n=Buffer.byteLength(e);let l,u=null,d=s,m=0;if(t){const e=Date.now();(!o.ts||(m=e-o.ts)>=r)&&(o.ts=e,l=c-o.bytes,o.bytes=l<0?-l:0,m=0),l=c-o.bytes}if(t){if(l<=0)return setTimeout((()=>{a(null,e)}),r-m);l<d&&(d=l)}d&&n>d&&n-d>p&&(u=e.subarray(d),e=e.subarray(0,d)),function(e,a){const n=Buffer.byteLength(e);o.bytesSeen+=n,o.bytes+=n,o.isCaptured&&o.updateProgress(),i.push(e)?process.nextTick(a):o.onReadCallback=()=>{o.onReadCallback=null,process.nextTick(a)}}(e,u?()=>{process.nextTick(a,null,u)}:a)};l(e,(function e(a,i){if(a)return n(a);i?l(i,e):n(null)}))}setLength(e){return this[He].length=+e,this}}const Ke=AxiosTransformStream,{asyncIterator:Ve}=Symbol,$e=async function*(e){e.stream?yield*e.stream():e.arrayBuffer?yield await e.arrayBuffer():e[Ve]?yield*e[Ve]():yield e},Ge=ie.ALPHABET.ALPHA_DIGIT+\"-_\",We=new c.TextEncoder,Je=\"\\r\\n\",Xe=We.encode(Je);class FormDataPart{constructor(e,a){const{escapeName:n}=this.constructor,i=ie.isString(a);let o=`Content-Disposition: form-data; name=\"${n(e)}\"${!i&&a.name?`; filename=\"${n(a.name)}\"`:\"\"}\\r\\n`;i?a=We.encode(String(a).replace(/\\r?\\n|\\r\\n?/g,Je)):o+=`Content-Type: ${a.type||\"application/octet-stream\"}\\r\\n`,this.headers=We.encode(o+Je),this.contentLength=i?a.byteLength:a.size,this.size=this.headers.byteLength+this.contentLength+2,this.name=e,this.value=a}async*encode(){yield this.headers;const{value:e}=this;ie.isTypedArray(e)?yield e:yield*$e(e),yield Xe}static escapeName(e){return String(e).replace(/[\\r\\n\"]/g,(e=>({\"\\r\":\"%0D\",\"\\n\":\"%0A\",'\"':\"%22\"}[e])))}}const Ye=(e,a,n)=>{const{tag:i=\"form-data-boundary\",size:o=25,boundary:t=i+\"-\"+ie.generateString(o,Ge)}=n||{};if(!ie.isFormData(e))throw TypeError(\"FormData instance required\");if(t.length<1||t.length>70)throw Error(\"boundary must be 10-70 characters long\");const s=We.encode(\"--\"+t+Je),r=We.encode(\"--\"+t+\"--\"+Je+Je);let c=r.byteLength;const p=Array.from(e.entries()).map((([e,a])=>{const n=new FormDataPart(e,a);return c+=n.size,n}));c+=s.byteLength*p.length,c=ie.toFiniteNumber(c);const l={\"Content-Type\":`multipart/form-data; boundary=${t}`};return Number.isFinite(c)&&(l[\"Content-Length\"]=c),a&&a(l),u.Readable.from(async function*(){for(const e of p)yield s,yield*e.encode();yield r}())};class ZlibHeaderTransformStream extends w.default.Transform{__transform(e,a,n){this.push(e),n()}_transform(e,a,n){if(0!==e.length&&(this._transform=this.__transform,120!==e[0])){const e=Buffer.alloc(2);e[0]=120,e[1]=156,this.push(e,a)}this.__transform(e,a,n)}}const Qe=ZlibHeaderTransformStream,Ze=(e,a)=>ie.isAsyncFn(e)?function(...n){const i=n.pop();e.apply(this,n).then((e=>{try{a?i(null,...a(e)):i(null,e)}catch(e){i(e)}}),i)}:e,ea={flush:y.default.constants.Z_SYNC_FLUSH,finishFlush:y.default.constants.Z_SYNC_FLUSH},aa={flush:y.default.constants.BROTLI_OPERATION_FLUSH,finishFlush:y.default.constants.BROTLI_OPERATION_FLUSH},na=ie.isFunction(y.default.createBrotliDecompress),{http:ia,https:oa}=g.default,ta=/https:?/,sa=_e.protocols.map((e=>e+\":\"));function ra(e){e.beforeRedirects.proxy&&e.beforeRedirects.proxy(e),e.beforeRedirects.config&&e.beforeRedirects.config(e)}function ca(e,a,n){let i=a;if(!i&&!1!==i){const e=t.getProxyForUrl(n);e&&(i=new URL(e))}if(i){if(i.username&&(i.auth=(i.username||\"\")+\":\"+(i.password||\"\")),i.auth){(i.auth.username||i.auth.password)&&(i.auth=(i.auth.username||\"\")+\":\"+(i.auth.password||\"\"));const a=Buffer.from(i.auth,\"utf8\").toString(\"base64\");e.headers[\"Proxy-Authorization\"]=\"Basic \"+a}e.headers.host=e.hostname+(e.port?\":\"+e.port:\"\");const a=i.hostname||i.host;e.hostname=a,e.host=a,e.port=i.port,e.path=n,i.protocol&&(e.protocol=i.protocol.includes(\":\")?i.protocol:`${i.protocol}:`)}e.beforeRedirects.proxy=function(e){ca(e,a,e.href)}}const pa=\"undefined\"!=typeof process&&\"process\"===ie.kindOf(process),la=(e,a)=>(({address:e,family:a})=>{if(!ie.isString(e))throw TypeError(\"address must be a string\");return{address:e,family:a||(e.indexOf(\".\")<0?6:4)}})(ie.isObject(e)?e:{address:e,family:a}),ua=pa&&function(e){return a=async function(a,n,i){let{data:o,lookup:t,family:s}=e;const{responseType:r,responseEncoding:c}=e,p=e.method.toUpperCase();let l,u,d=!1;if(t){const e=Ze(t,(e=>ie.isArray(e)?e:[e]));t=(a,n,i)=>{e(a,n,((e,a,o)=>{const t=ie.isArray(a)?a.map((e=>la(e))):[la(a,o)];n.all?i(e,t):i(e,t[0].address,t[0].family)}))}}const m=new k.default,f=()=>{e.cancelToken&&e.cancelToken.unsubscribe(x),e.signal&&e.signal.removeEventListener(\"abort\",x),m.removeAllListeners()};function x(a){m.emit(\"abort\",!a||a.type?new Le(null,e,u):a)}i(((e,a)=>{l=!0,a&&(d=!0,f())})),m.once(\"abort\",n),(e.cancelToken||e.signal)&&(e.cancelToken&&e.cancelToken.subscribe(x),e.signal&&(e.signal.aborted?x():e.signal.addEventListener(\"abort\",x)));const g=De(e.baseURL,e.url),j=new URL(g,\"http://localhost\"),_=j.protocol||sa[0];if(\"data:\"===_){let i;if(\"GET\"!==p)return ze(a,n,{status:405,statusText:\"method not allowed\",headers:{},config:e});try{i=function(e,a,n){const i=n&&n.Blob||_e.classes.Blob,o=Me(e);if(void 0===a&&i&&(a=!0),\"data\"===o){e=o.length?e.slice(o.length+1):e;const n=qe.exec(e);if(!n)throw new oe(\"Invalid URL\",oe.ERR_INVALID_URL);const t=n[1],s=n[2],r=n[3],c=Buffer.from(decodeURIComponent(r),s?\"base64\":\"utf8\");if(a){if(!i)throw new oe(\"Blob is not supported\",oe.ERR_NOT_SUPPORT);return new i([c],{type:t})}return c}throw new oe(\"Unsupported protocol \"+o,oe.ERR_NOT_SUPPORT)}(e.url,\"blob\"===r,{Blob:e.env&&e.env.Blob})}catch(a){throw oe.from(a,oe.ERR_BAD_REQUEST,e)}return\"text\"===r?(i=i.toString(c),c&&\"utf8\"!==c||(i=ie.stripBOM(i))):\"stream\"===r&&(i=w.default.Readable.from(i)),ze(a,n,{data:i,status:200,statusText:\"OK\",headers:new Be,config:e})}if(-1===sa.indexOf(_))return n(new oe(\"Unsupported protocol \"+_,oe.ERR_BAD_REQUEST,e));const S=Be.from(e.headers).normalize();S.set(\"User-Agent\",\"axios/1.6.2\",!1);const C=e.onDownloadProgress,E=e.onUploadProgress,O=e.maxRate;let A,T;if(ie.isSpecCompliantForm(o)){const e=S.getContentType(/boundary=([-_\\w\\d]{10,70})/i);o=Ye(o,(e=>{S.set(e)}),{tag:\"axios-1.6.2-boundary\",boundary:e&&e[1]||void 0})}else if(ie.isFormData(o)&&ie.isFunction(o.getHeaders)){if(S.set(o.getHeaders()),!S.hasContentLength())try{const e=await b.default.promisify(o.getLength).call(o);Number.isFinite(e)&&e>=0&&S.setContentLength(e)}catch(e){}}else if(ie.isBlob(o))o.size&&S.setContentType(o.type||\"application/octet-stream\"),S.setContentLength(o.size||0),o=w.default.Readable.from($e(o));else if(o&&!ie.isStream(o)){if(Buffer.isBuffer(o));else if(ie.isArrayBuffer(o))o=Buffer.from(new Uint8Array(o));else{if(!ie.isString(o))return n(new oe(\"Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\",oe.ERR_BAD_REQUEST,e));o=Buffer.from(o,\"utf-8\")}if(S.setContentLength(o.length,!1),e.maxBodyLength>-1&&o.length>e.maxBodyLength)return n(new oe(\"Request body larger than maxBodyLength limit\",oe.ERR_BAD_REQUEST,e))}const R=ie.toFiniteNumber(S.getContentLength());let P,B;ie.isArray(O)?(A=O[0],T=O[1]):A=T=O,o&&(E||A)&&(ie.isStream(o)||(o=w.default.Readable.from(o,{objectMode:!1})),o=w.default.pipeline([o,new Ke({length:R,maxRate:ie.toFiniteNumber(A)})],ie.noop),E&&o.on(\"progress\",(e=>{E(Object.assign(e,{upload:!0}))}))),e.auth&&(P=(e.auth.username||\"\")+\":\"+(e.auth.password||\"\")),!P&&j.username&&(P=j.username+\":\"+j.password),P&&S.delete(\"authorization\");try{B=ve(j.pathname+j.search,e.params,e.paramsSerializer).replace(/^\\?/,\"\")}catch(a){const i=new Error(a.message);return i.config=e,i.url=e.url,i.exists=!0,n(i)}S.set(\"Accept-Encoding\",\"gzip, compress, deflate\"+(na?\", br\":\"\"),!1);const N={path:B,method:p,headers:S.toJSON(),agents:{http:e.httpAgent,https:e.httpsAgent},auth:P,protocol:_,family:s,beforeRedirect:ra,beforeRedirects:{}};let F;!ie.isUndefined(t)&&(N.lookup=t),e.socketPath?N.socketPath=e.socketPath:(N.hostname=j.hostname,N.port=j.port,ca(N,e.proxy,_+\"//\"+j.hostname+(j.port?\":\"+j.port:\"\")+N.path));const L=ta.test(N.protocol);if(N.agent=L?e.httpsAgent:e.httpAgent,e.transport?F=e.transport:0===e.maxRedirects?F=L?h.default:v.default:(e.maxRedirects&&(N.maxRedirects=e.maxRedirects),e.beforeRedirect&&(N.beforeRedirects.config=e.beforeRedirect),F=L?oa:ia),e.maxBodyLength>-1?N.maxBodyLength=e.maxBodyLength:N.maxBodyLength=1/0,e.insecureHTTPParser&&(N.insecureHTTPParser=e.insecureHTTPParser),u=F.request(N,(function(i){if(u.destroyed)return;const o=[i],t=+i.headers[\"content-length\"];if(C){const e=new Ke({length:ie.toFiniteNumber(t),maxRate:ie.toFiniteNumber(T)});C&&e.on(\"progress\",(e=>{C(Object.assign(e,{download:!0}))})),o.push(e)}let s=i;const l=i.req||u;if(!1!==e.decompress&&i.headers[\"content-encoding\"])switch(\"HEAD\"!==p&&204!==i.statusCode||delete i.headers[\"content-encoding\"],(i.headers[\"content-encoding\"]||\"\").toLowerCase()){case\"gzip\":case\"x-gzip\":case\"compress\":case\"x-compress\":o.push(y.default.createUnzip(ea)),delete i.headers[\"content-encoding\"];break;case\"deflate\":o.push(new Qe),o.push(y.default.createUnzip(ea)),delete i.headers[\"content-encoding\"];break;case\"br\":na&&(o.push(y.default.createBrotliDecompress(aa)),delete i.headers[\"content-encoding\"])}s=o.length>1?w.default.pipeline(o,ie.noop):o[0];const x=w.default.finished(s,(()=>{x(),f()})),v={status:i.statusCode,statusText:i.statusMessage,headers:new Be(i.headers),config:e,request:l};if(\"stream\"===r)v.data=s,ze(a,n,v);else{const i=[];let o=0;s.on(\"data\",(function(a){i.push(a),o+=a.length,e.maxContentLength>-1&&o>e.maxContentLength&&(d=!0,s.destroy(),n(new oe(\"maxContentLength size of \"+e.maxContentLength+\" exceeded\",oe.ERR_BAD_RESPONSE,e,l)))})),s.on(\"aborted\",(function(){if(d)return;const a=new oe(\"maxContentLength size of \"+e.maxContentLength+\" exceeded\",oe.ERR_BAD_RESPONSE,e,l);s.destroy(a),n(a)})),s.on(\"error\",(function(a){u.destroyed||n(oe.from(a,null,e,l))})),s.on(\"end\",(function(){try{let e=1===i.length?i[0]:Buffer.concat(i);\"arraybuffer\"!==r&&(e=e.toString(c),c&&\"utf8\"!==c||(e=ie.stripBOM(e))),v.data=e}catch(a){return n(oe.from(a,null,e,v.request,v))}ze(a,n,v)}))}m.once(\"abort\",(e=>{s.destroyed||(s.emit(\"error\",e),s.destroy())}))})),m.once(\"abort\",(e=>{n(e),u.destroy(e)})),u.on(\"error\",(function(a){n(oe.from(a,null,e,u))})),u.on(\"socket\",(function(e){e.setKeepAlive(!0,6e4)})),e.timeout){const a=parseInt(e.timeout,10);if(Number.isNaN(a))return void n(new oe(\"error trying to parse `config.timeout` to int\",oe.ERR_BAD_OPTION_VALUE,e,u));u.setTimeout(a,(function(){if(l)return;let a=e.timeout?\"timeout of \"+e.timeout+\"ms exceeded\":\"timeout exceeded\";const i=e.transitional||be;e.timeoutErrorMessage&&(a=e.timeoutErrorMessage),n(new oe(a,i.clarifyTimeoutError?oe.ETIMEDOUT:oe.ECONNABORTED,e,u)),x()}))}if(ie.isStream(o)){let a=!1,n=!1;o.on(\"end\",(()=>{a=!0})),o.once(\"error\",(e=>{n=!0,u.destroy(e)})),o.on(\"close\",(()=>{a||n||x(new Le(\"Request stream has been aborted\",e,u))})),o.pipe(u)}else u.end(o)},new Promise(((e,n)=>{let i,o;const t=(e,a)=>{o||(o=!0,i&&i(e,a))},s=e=>{t(e,!0),n(e)};a((a=>{t(a),e(a)}),s,(e=>i=e)).catch(s)}));var a},da=_e.hasStandardBrowserEnv?{write(e,a,n,i,o,t){const s=[e+\"=\"+encodeURIComponent(a)];ie.isNumber(n)&&s.push(\"expires=\"+new Date(n).toGMTString()),ie.isString(i)&&s.push(\"path=\"+i),ie.isString(o)&&s.push(\"domain=\"+o),!0===t&&s.push(\"secure\"),document.cookie=s.join(\"; \")},read(e){const a=document.cookie.match(new RegExp(\"(^|;\\\\s*)(\"+e+\")=([^;]*)\"));return a?decodeURIComponent(a[3]):null},remove(e){this.write(e,\"\",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}},ma=_e.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement(\"a\");let n;function i(n){let i=n;return e&&(a.setAttribute(\"href\",i),i=a.href),a.setAttribute(\"href\",i),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,\"\"):\"\",host:a.host,search:a.search?a.search.replace(/^\\?/,\"\"):\"\",hash:a.hash?a.hash.replace(/^#/,\"\"):\"\",hostname:a.hostname,port:a.port,pathname:\"/\"===a.pathname.charAt(0)?a.pathname:\"/\"+a.pathname}}return n=i(window.location.href),function(e){const a=ie.isString(e)?i(e):e;return a.protocol===n.protocol&&a.host===n.host}}():function(){return!0};function fa(e,a){let n=0;const i=Ie(50,250);return o=>{const t=o.loaded,s=o.lengthComputable?o.total:void 0,r=t-n,c=i(r);n=t;const p={loaded:t,total:s,progress:s?t/s:void 0,bytes:r,rate:c||void 0,estimated:c&&s&&t<=s?(s-t)/c:void 0,event:o};p[a?\"download\":\"upload\"]=!0,e(p)}}const xa={http:ua,xhr:\"undefined\"!=typeof XMLHttpRequest&&function(e){return new Promise((function(a,n){let i=e.data;const o=Be.from(e.headers).normalize();let t,s,{responseType:r,withXSRFToken:c}=e;function p(){e.cancelToken&&e.cancelToken.unsubscribe(t),e.signal&&e.signal.removeEventListener(\"abort\",t)}if(ie.isFormData(i))if(_e.hasStandardBrowserEnv||_e.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(s=o.getContentType())){const[e,...a]=s?s.split(\";\").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||\"multipart/form-data\",...a].join(\"; \"))}let l=new XMLHttpRequest;if(e.auth){const a=e.auth.username||\"\",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):\"\";o.set(\"Authorization\",\"Basic \"+btoa(a+\":\"+n))}const u=De(e.baseURL,e.url);function d(){if(!l)return;const i=Be.from(\"getAllResponseHeaders\"in l&&l.getAllResponseHeaders());ze((function(e){a(e),p()}),(function(e){n(e),p()}),{data:r&&\"text\"!==r&&\"json\"!==r?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:i,config:e,request:l}),l=null}if(l.open(e.method.toUpperCase(),ve(u,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,\"onloadend\"in l?l.onloadend=d:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf(\"file:\"))&&setTimeout(d)},l.onabort=function(){l&&(n(new oe(\"Request aborted\",oe.ECONNABORTED,e,l)),l=null)},l.onerror=function(){n(new oe(\"Network Error\",oe.ERR_NETWORK,e,l)),l=null},l.ontimeout=function(){let a=e.timeout?\"timeout of \"+e.timeout+\"ms exceeded\":\"timeout exceeded\";const i=e.transitional||be;e.timeoutErrorMessage&&(a=e.timeoutErrorMessage),n(new oe(a,i.clarifyTimeoutError?oe.ETIMEDOUT:oe.ECONNABORTED,e,l)),l=null},_e.hasStandardBrowserEnv&&(c&&ie.isFunction(c)&&(c=c(e)),c||!1!==c&&ma(u))){const a=e.xsrfHeaderName&&e.xsrfCookieName&&da.read(e.xsrfCookieName);a&&o.set(e.xsrfHeaderName,a)}void 0===i&&o.setContentType(null),\"setRequestHeader\"in l&&ie.forEach(o.toJSON(),(function(e,a){l.setRequestHeader(a,e)})),ie.isUndefined(e.withCredentials)||(l.withCredentials=!!e.withCredentials),r&&\"json\"!==r&&(l.responseType=e.responseType),\"function\"==typeof e.onDownloadProgress&&l.addEventListener(\"progress\",fa(e.onDownloadProgress,!0)),\"function\"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener(\"progress\",fa(e.onUploadProgress)),(e.cancelToken||e.signal)&&(t=a=>{l&&(n(!a||a.type?new Le(null,e,l):a),l.abort(),l=null)},e.cancelToken&&e.cancelToken.subscribe(t),e.signal&&(e.signal.aborted?t():e.signal.addEventListener(\"abort\",t)));const m=Me(u);m&&-1===_e.protocols.indexOf(m)?n(new oe(\"Unsupported protocol \"+m+\":\",oe.ERR_BAD_REQUEST,e)):l.send(i||null)}))}};ie.forEach(xa,((e,a)=>{if(e){try{Object.defineProperty(e,\"name\",{value:a})}catch(e){}Object.defineProperty(e,\"adapterName\",{value:a})}}));const va=e=>`- ${e}`,ha=e=>ie.isFunction(e)||null===e||!1===e,ba=e=>{e=ie.isArray(e)?e:[e];const{length:a}=e;let n,i;const o={};for(let t=0;t<a;t++){let a;if(n=e[t],i=n,!ha(n)&&(i=xa[(a=String(n)).toLowerCase()],void 0===i))throw new oe(`Unknown adapter '${a}'`);if(i)break;o[a||\"#\"+t]=i}if(!i){const e=Object.entries(o).map((([e,a])=>`adapter ${e} `+(!1===a?\"is not supported by the environment\":\"is not available in the build\")));throw new oe(\"There is no suitable adapter to dispatch the request \"+(a?e.length>1?\"since :\\n\"+e.map(va).join(\"\\n\"):\" \"+va(e[0]):\"as no adapter specified\"),\"ERR_NOT_SUPPORT\")}return i};function ga(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Le(null,e)}function ya(e){return ga(e),e.headers=Be.from(e.headers),e.data=Ne.call(e,e.transformRequest),-1!==[\"post\",\"put\",\"patch\"].indexOf(e.method)&&e.headers.setContentType(\"application/x-www-form-urlencoded\",!1),ba(e.adapter||Ee.adapter)(e).then((function(a){return ga(e),a.data=Ne.call(e,e.transformResponse,a),a.headers=Be.from(a.headers),a}),(function(a){return Fe(a)||(ga(e),a&&a.response&&(a.response.data=Ne.call(e,e.transformResponse,a.response),a.response.headers=Be.from(a.response.headers))),Promise.reject(a)}))}const wa=e=>e instanceof Be?e.toJSON():e;function ka(e,a){a=a||{};const n={};function i(e,a,n){return ie.isPlainObject(e)&&ie.isPlainObject(a)?ie.merge.call({caseless:n},e,a):ie.isPlainObject(a)?ie.merge({},a):ie.isArray(a)?a.slice():a}function o(e,a,n){return ie.isUndefined(a)?ie.isUndefined(e)?void 0:i(void 0,e,n):i(e,a,n)}function t(e,a){if(!ie.isUndefined(a))return i(void 0,a)}function s(e,a){return ie.isUndefined(a)?ie.isUndefined(e)?void 0:i(void 0,e):i(void 0,a)}function r(n,o,t){return t in a?i(n,o):t in e?i(void 0,n):void 0}const c={url:t,method:t,data:t,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,withXSRFToken:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:r,headers:(e,a)=>o(wa(e),wa(a),!0)};return ie.forEach(Object.keys(Object.assign({},e,a)),(function(i){const t=c[i]||o,s=t(e[i],a[i],i);ie.isUndefined(s)&&t!==r||(n[i]=s)})),n}const ja={};[\"object\",\"boolean\",\"number\",\"function\",\"string\",\"symbol\"].forEach(((e,a)=>{ja[e]=function(n){return typeof n===e||\"a\"+(a<1?\"n \":\" \")+e}}));const _a={};ja.transitional=function(e,a,n){function i(e,a){return\"[Axios v1.6.2] Transitional option '\"+e+\"'\"+a+(n?\". \"+n:\"\")}return(n,o,t)=>{if(!1===e)throw new oe(i(o,\" has been removed\"+(a?\" in \"+a:\"\")),oe.ERR_DEPRECATED);return a&&!_a[o]&&(_a[o]=!0,console.warn(i(o,\" has been deprecated since v\"+a+\" and will be removed in the near future\"))),!e||e(n,o,t)}};const Sa={assertOptions:function(e,a,n){if(\"object\"!=typeof e)throw new oe(\"options must be an object\",oe.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let o=i.length;for(;o-- >0;){const t=i[o],s=a[t];if(s){const a=e[t],n=void 0===a||s(a,t,e);if(!0!==n)throw new oe(\"option \"+t+\" must be \"+n,oe.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new oe(\"Unknown option \"+t,oe.ERR_BAD_OPTION)}},validators:ja},Ca=Sa.validators;class Axios{constructor(e){this.defaults=e,this.interceptors={request:new he,response:new he}}request(e,a){\"string\"==typeof e?(a=a||{}).url=e:a=e||{},a=ka(this.defaults,a);const{transitional:n,paramsSerializer:i,headers:o}=a;void 0!==n&&Sa.assertOptions(n,{silentJSONParsing:Ca.transitional(Ca.boolean),forcedJSONParsing:Ca.transitional(Ca.boolean),clarifyTimeoutError:Ca.transitional(Ca.boolean)},!1),null!=i&&(ie.isFunction(i)?a.paramsSerializer={serialize:i}:Sa.assertOptions(i,{encode:Ca.function,serialize:Ca.function},!0)),a.method=(a.method||this.defaults.method||\"get\").toLowerCase();let t=o&&ie.merge(o.common,o[a.method]);o&&ie.forEach([\"delete\",\"get\",\"head\",\"post\",\"put\",\"patch\",\"common\"],(e=>{delete o[e]})),a.headers=Be.concat(t,o);const s=[];let r=!0;this.interceptors.request.forEach((function(e){\"function\"==typeof e.runWhen&&!1===e.runWhen(a)||(r=r&&e.synchronous,s.unshift(e.fulfilled,e.rejected))}));const c=[];let p;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let l,u=0;if(!r){const e=[ya.bind(this),void 0];for(e.unshift.apply(e,s),e.push.apply(e,c),l=e.length,p=Promise.resolve(a);u<l;)p=p.then(e[u++],e[u++]);return p}l=s.length;let d=a;for(u=0;u<l;){const e=s[u++],a=s[u++];try{d=e(d)}catch(e){a.call(this,e);break}}try{p=ya.call(this,d)}catch(e){return Promise.reject(e)}for(u=0,l=c.length;u<l;)p=p.then(c[u++],c[u++]);return p}getUri(e){return ve(De((e=ka(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}ie.forEach([\"delete\",\"get\",\"head\",\"options\"],(function(e){Axios.prototype[e]=function(a,n){return this.request(ka(n||{},{method:e,url:a,data:(n||{}).data}))}})),ie.forEach([\"post\",\"put\",\"patch\"],(function(e){function a(a){return function(n,i,o){return this.request(ka(o||{},{method:e,headers:a?{\"Content-Type\":\"multipart/form-data\"}:{},url:n,data:i}))}}Axios.prototype[e]=a(),Axios.prototype[e+\"Form\"]=a(!0)}));const Ea=Axios;class CancelToken{constructor(e){if(\"function\"!=typeof e)throw new TypeError(\"executor must be a function.\");let a;this.promise=new Promise((function(e){a=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let a=n._listeners.length;for(;a-- >0;)n._listeners[a](e);n._listeners=null})),this.promise.then=e=>{let a;const i=new Promise((e=>{n.subscribe(e),a=e})).then(e);return i.cancel=function(){n.unsubscribe(a)},i},e((function(e,i,o){n.reason||(n.reason=new Le(e,i,o),a(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const a=this._listeners.indexOf(e);-1!==a&&this._listeners.splice(a,1)}static source(){let e;return{token:new CancelToken((function(a){e=a})),cancel:e}}}const Oa=CancelToken,Aa={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Aa).forEach((([e,a])=>{Aa[a]=e}));const Ta=Aa,Ra=function e(a){const n=new Ea(a),i=j(Ea.prototype.request,n);return ie.extend(i,Ea.prototype,n,{allOwnKeys:!0}),ie.extend(i,n,null,{allOwnKeys:!0}),i.create=function(n){return e(ka(a,n))},i}(Ee);Ra.Axios=Ea,Ra.CanceledError=Le,Ra.CancelToken=Oa,Ra.isCancel=Fe,Ra.VERSION=Ue,Ra.toFormData=ue,Ra.AxiosError=oe,Ra.Cancel=Ra.CanceledError,Ra.all=function(e){return Promise.all(e)},Ra.spread=function(e){return function(a){return e.apply(null,a)}},Ra.isAxiosError=function(e){return ie.isObject(e)&&!0===e.isAxiosError},Ra.mergeConfig=ka,Ra.AxiosHeaders=Be,Ra.formToJSON=e=>Se(ie.isHTMLForm(e)?new FormData(e):e),Ra.getAdapter=ba,Ra.HttpStatusCode=Ta,Ra.default=Ra,e.exports=Ra},3765:e=>{\"use strict\";e.exports=JSON.parse('{\"application/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"application/3gpdash-qoe-report+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/3gpp-ims+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/3gpphal+json\":{\"source\":\"iana\",\"compressible\":true},\"application/3gpphalforms+json\":{\"source\":\"iana\",\"compressible\":true},\"application/a2l\":{\"source\":\"iana\"},\"application/ace+cbor\":{\"source\":\"iana\"},\"application/activemessage\":{\"source\":\"iana\"},\"application/activity+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-costmap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-costmapfilter+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-directory+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointcost+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointcostparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointprop+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointpropparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-error+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-networkmap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-networkmapfilter+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-updatestreamcontrol+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-updatestreamparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/aml\":{\"source\":\"iana\"},\"application/andrew-inset\":{\"source\":\"iana\",\"extensions\":[\"ez\"]},\"application/applefile\":{\"source\":\"iana\"},\"application/applixware\":{\"source\":\"apache\",\"extensions\":[\"aw\"]},\"application/at+jwt\":{\"source\":\"iana\"},\"application/atf\":{\"source\":\"iana\"},\"application/atfx\":{\"source\":\"iana\"},\"application/atom+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atom\"]},\"application/atomcat+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomcat\"]},\"application/atomdeleted+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomdeleted\"]},\"application/atomicmail\":{\"source\":\"iana\"},\"application/atomsvc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomsvc\"]},\"application/atsc-dwd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dwd\"]},\"application/atsc-dynamic-event-message\":{\"source\":\"iana\"},\"application/atsc-held+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"held\"]},\"application/atsc-rdt+json\":{\"source\":\"iana\",\"compressible\":true},\"application/atsc-rsat+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rsat\"]},\"application/atxml\":{\"source\":\"iana\"},\"application/auth-policy+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/bacnet-xdd+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/batch-smtp\":{\"source\":\"iana\"},\"application/bdoc\":{\"compressible\":false,\"extensions\":[\"bdoc\"]},\"application/beep+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/calendar+json\":{\"source\":\"iana\",\"compressible\":true},\"application/calendar+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xcs\"]},\"application/call-completion\":{\"source\":\"iana\"},\"application/cals-1840\":{\"source\":\"iana\"},\"application/captive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/cbor\":{\"source\":\"iana\"},\"application/cbor-seq\":{\"source\":\"iana\"},\"application/cccex\":{\"source\":\"iana\"},\"application/ccmp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ccxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ccxml\"]},\"application/cdfx+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cdfx\"]},\"application/cdmi-capability\":{\"source\":\"iana\",\"extensions\":[\"cdmia\"]},\"application/cdmi-container\":{\"source\":\"iana\",\"extensions\":[\"cdmic\"]},\"application/cdmi-domain\":{\"source\":\"iana\",\"extensions\":[\"cdmid\"]},\"application/cdmi-object\":{\"source\":\"iana\",\"extensions\":[\"cdmio\"]},\"application/cdmi-queue\":{\"source\":\"iana\",\"extensions\":[\"cdmiq\"]},\"application/cdni\":{\"source\":\"iana\"},\"application/cea\":{\"source\":\"iana\"},\"application/cea-2018+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cellml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cfw\":{\"source\":\"iana\"},\"application/city+json\":{\"source\":\"iana\",\"compressible\":true},\"application/clr\":{\"source\":\"iana\"},\"application/clue+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/clue_info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cms\":{\"source\":\"iana\"},\"application/cnrp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/coap-group+json\":{\"source\":\"iana\",\"compressible\":true},\"application/coap-payload\":{\"source\":\"iana\"},\"application/commonground\":{\"source\":\"iana\"},\"application/conference-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cose\":{\"source\":\"iana\"},\"application/cose-key\":{\"source\":\"iana\"},\"application/cose-key-set\":{\"source\":\"iana\"},\"application/cpl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cpl\"]},\"application/csrattrs\":{\"source\":\"iana\"},\"application/csta+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cstadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/csvm+json\":{\"source\":\"iana\",\"compressible\":true},\"application/cu-seeme\":{\"source\":\"apache\",\"extensions\":[\"cu\"]},\"application/cwt\":{\"source\":\"iana\"},\"application/cybercash\":{\"source\":\"iana\"},\"application/dart\":{\"compressible\":true},\"application/dash+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpd\"]},\"application/dash-patch+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpp\"]},\"application/dashdelta\":{\"source\":\"iana\"},\"application/davmount+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"davmount\"]},\"application/dca-rft\":{\"source\":\"iana\"},\"application/dcd\":{\"source\":\"iana\"},\"application/dec-dx\":{\"source\":\"iana\"},\"application/dialog-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dicom\":{\"source\":\"iana\"},\"application/dicom+json\":{\"source\":\"iana\",\"compressible\":true},\"application/dicom+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dii\":{\"source\":\"iana\"},\"application/dit\":{\"source\":\"iana\"},\"application/dns\":{\"source\":\"iana\"},\"application/dns+json\":{\"source\":\"iana\",\"compressible\":true},\"application/dns-message\":{\"source\":\"iana\"},\"application/docbook+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"dbk\"]},\"application/dots+cbor\":{\"source\":\"iana\"},\"application/dskpp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dssc+der\":{\"source\":\"iana\",\"extensions\":[\"dssc\"]},\"application/dssc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdssc\"]},\"application/dvcs\":{\"source\":\"iana\"},\"application/ecmascript\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"es\",\"ecma\"]},\"application/edi-consent\":{\"source\":\"iana\"},\"application/edi-x12\":{\"source\":\"iana\",\"compressible\":false},\"application/edifact\":{\"source\":\"iana\",\"compressible\":false},\"application/efi\":{\"source\":\"iana\"},\"application/elm+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/elm+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.cap+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/emergencycalldata.comment+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.deviceinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.ecall.msd\":{\"source\":\"iana\"},\"application/emergencycalldata.providerinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.serviceinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.subscriberinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.veds+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emma+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"emma\"]},\"application/emotionml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"emotionml\"]},\"application/encaprtp\":{\"source\":\"iana\"},\"application/epp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/epub+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"epub\"]},\"application/eshop\":{\"source\":\"iana\"},\"application/exi\":{\"source\":\"iana\",\"extensions\":[\"exi\"]},\"application/expect-ct-report+json\":{\"source\":\"iana\",\"compressible\":true},\"application/express\":{\"source\":\"iana\",\"extensions\":[\"exp\"]},\"application/fastinfoset\":{\"source\":\"iana\"},\"application/fastsoap\":{\"source\":\"iana\"},\"application/fdt+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"fdt\"]},\"application/fhir+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/fhir+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/fido.trusted-apps+json\":{\"compressible\":true},\"application/fits\":{\"source\":\"iana\"},\"application/flexfec\":{\"source\":\"iana\"},\"application/font-sfnt\":{\"source\":\"iana\"},\"application/font-tdpfr\":{\"source\":\"iana\",\"extensions\":[\"pfr\"]},\"application/font-woff\":{\"source\":\"iana\",\"compressible\":false},\"application/framework-attributes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/geo+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"geojson\"]},\"application/geo+json-seq\":{\"source\":\"iana\"},\"application/geopackage+sqlite3\":{\"source\":\"iana\"},\"application/geoxacml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/gltf-buffer\":{\"source\":\"iana\"},\"application/gml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"gml\"]},\"application/gpx+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"gpx\"]},\"application/gxf\":{\"source\":\"apache\",\"extensions\":[\"gxf\"]},\"application/gzip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"gz\"]},\"application/h224\":{\"source\":\"iana\"},\"application/held+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/hjson\":{\"extensions\":[\"hjson\"]},\"application/http\":{\"source\":\"iana\"},\"application/hyperstudio\":{\"source\":\"iana\",\"extensions\":[\"stk\"]},\"application/ibe-key-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ibe-pkg-reply+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ibe-pp-data\":{\"source\":\"iana\"},\"application/iges\":{\"source\":\"iana\"},\"application/im-iscomposing+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/index\":{\"source\":\"iana\"},\"application/index.cmd\":{\"source\":\"iana\"},\"application/index.obj\":{\"source\":\"iana\"},\"application/index.response\":{\"source\":\"iana\"},\"application/index.vnd\":{\"source\":\"iana\"},\"application/inkml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ink\",\"inkml\"]},\"application/iotp\":{\"source\":\"iana\"},\"application/ipfix\":{\"source\":\"iana\",\"extensions\":[\"ipfix\"]},\"application/ipp\":{\"source\":\"iana\"},\"application/isup\":{\"source\":\"iana\"},\"application/its+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"its\"]},\"application/java-archive\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"jar\",\"war\",\"ear\"]},\"application/java-serialized-object\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"ser\"]},\"application/java-vm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"class\"]},\"application/javascript\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"js\",\"mjs\"]},\"application/jf2feed+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jose\":{\"source\":\"iana\"},\"application/jose+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jrd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jscalendar+json\":{\"source\":\"iana\",\"compressible\":true},\"application/json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"json\",\"map\"]},\"application/json-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/json-seq\":{\"source\":\"iana\"},\"application/json5\":{\"extensions\":[\"json5\"]},\"application/jsonml+json\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"jsonml\"]},\"application/jwk+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jwk-set+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jwt\":{\"source\":\"iana\"},\"application/kpml-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/kpml-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ld+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"jsonld\"]},\"application/lgr+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lgr\"]},\"application/link-format\":{\"source\":\"iana\"},\"application/load-control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/lost+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lostxml\"]},\"application/lostsync+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/lpf+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/lxf\":{\"source\":\"iana\"},\"application/mac-binhex40\":{\"source\":\"iana\",\"extensions\":[\"hqx\"]},\"application/mac-compactpro\":{\"source\":\"apache\",\"extensions\":[\"cpt\"]},\"application/macwriteii\":{\"source\":\"iana\"},\"application/mads+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mads\"]},\"application/manifest+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"webmanifest\"]},\"application/marc\":{\"source\":\"iana\",\"extensions\":[\"mrc\"]},\"application/marcxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mrcx\"]},\"application/mathematica\":{\"source\":\"iana\",\"extensions\":[\"ma\",\"nb\",\"mb\"]},\"application/mathml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mathml\"]},\"application/mathml-content+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mathml-presentation+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-associated-procedure-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-deregister+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-envelope+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-msk+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-msk-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-protection-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-reception-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-register+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-register-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-schedule+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-user-service-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbox\":{\"source\":\"iana\",\"extensions\":[\"mbox\"]},\"application/media-policy-dataset+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpf\"]},\"application/media_control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mediaservercontrol+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mscml\"]},\"application/merge-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/metalink+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"metalink\"]},\"application/metalink4+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"meta4\"]},\"application/mets+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mets\"]},\"application/mf4\":{\"source\":\"iana\"},\"application/mikey\":{\"source\":\"iana\"},\"application/mipc\":{\"source\":\"iana\"},\"application/missing-blocks+cbor-seq\":{\"source\":\"iana\"},\"application/mmt-aei+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"maei\"]},\"application/mmt-usd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"musd\"]},\"application/mods+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mods\"]},\"application/moss-keys\":{\"source\":\"iana\"},\"application/moss-signature\":{\"source\":\"iana\"},\"application/mosskey-data\":{\"source\":\"iana\"},\"application/mosskey-request\":{\"source\":\"iana\"},\"application/mp21\":{\"source\":\"iana\",\"extensions\":[\"m21\",\"mp21\"]},\"application/mp4\":{\"source\":\"iana\",\"extensions\":[\"mp4s\",\"m4p\"]},\"application/mpeg4-generic\":{\"source\":\"iana\"},\"application/mpeg4-iod\":{\"source\":\"iana\"},\"application/mpeg4-iod-xmt\":{\"source\":\"iana\"},\"application/mrb-consumer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mrb-publish+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/msc-ivr+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/msc-mixer+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/msword\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"doc\",\"dot\"]},\"application/mud+json\":{\"source\":\"iana\",\"compressible\":true},\"application/multipart-core\":{\"source\":\"iana\"},\"application/mxf\":{\"source\":\"iana\",\"extensions\":[\"mxf\"]},\"application/n-quads\":{\"source\":\"iana\",\"extensions\":[\"nq\"]},\"application/n-triples\":{\"source\":\"iana\",\"extensions\":[\"nt\"]},\"application/nasdata\":{\"source\":\"iana\"},\"application/news-checkgroups\":{\"source\":\"iana\",\"charset\":\"US-ASCII\"},\"application/news-groupinfo\":{\"source\":\"iana\",\"charset\":\"US-ASCII\"},\"application/news-transmission\":{\"source\":\"iana\"},\"application/nlsml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/node\":{\"source\":\"iana\",\"extensions\":[\"cjs\"]},\"application/nss\":{\"source\":\"iana\"},\"application/oauth-authz-req+jwt\":{\"source\":\"iana\"},\"application/oblivious-dns-message\":{\"source\":\"iana\"},\"application/ocsp-request\":{\"source\":\"iana\"},\"application/ocsp-response\":{\"source\":\"iana\"},\"application/octet-stream\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]},\"application/oda\":{\"source\":\"iana\",\"extensions\":[\"oda\"]},\"application/odm+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/odx\":{\"source\":\"iana\"},\"application/oebps-package+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"opf\"]},\"application/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ogx\"]},\"application/omdoc+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"omdoc\"]},\"application/onenote\":{\"source\":\"apache\",\"extensions\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]},\"application/opc-nodeset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/oscore\":{\"source\":\"iana\"},\"application/oxps\":{\"source\":\"iana\",\"extensions\":[\"oxps\"]},\"application/p21\":{\"source\":\"iana\"},\"application/p21+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/p2p-overlay+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"relo\"]},\"application/parityfec\":{\"source\":\"iana\"},\"application/passport\":{\"source\":\"iana\"},\"application/patch-ops-error+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xer\"]},\"application/pdf\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pdf\"]},\"application/pdx\":{\"source\":\"iana\"},\"application/pem-certificate-chain\":{\"source\":\"iana\"},\"application/pgp-encrypted\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pgp\"]},\"application/pgp-keys\":{\"source\":\"iana\",\"extensions\":[\"asc\"]},\"application/pgp-signature\":{\"source\":\"iana\",\"extensions\":[\"asc\",\"sig\"]},\"application/pics-rules\":{\"source\":\"apache\",\"extensions\":[\"prf\"]},\"application/pidf+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/pidf-diff+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/pkcs10\":{\"source\":\"iana\",\"extensions\":[\"p10\"]},\"application/pkcs12\":{\"source\":\"iana\"},\"application/pkcs7-mime\":{\"source\":\"iana\",\"extensions\":[\"p7m\",\"p7c\"]},\"application/pkcs7-signature\":{\"source\":\"iana\",\"extensions\":[\"p7s\"]},\"application/pkcs8\":{\"source\":\"iana\",\"extensions\":[\"p8\"]},\"application/pkcs8-encrypted\":{\"source\":\"iana\"},\"application/pkix-attr-cert\":{\"source\":\"iana\",\"extensions\":[\"ac\"]},\"application/pkix-cert\":{\"source\":\"iana\",\"extensions\":[\"cer\"]},\"application/pkix-crl\":{\"source\":\"iana\",\"extensions\":[\"crl\"]},\"application/pkix-pkipath\":{\"source\":\"iana\",\"extensions\":[\"pkipath\"]},\"application/pkixcmp\":{\"source\":\"iana\",\"extensions\":[\"pki\"]},\"application/pls+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"pls\"]},\"application/poc-settings+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/postscript\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ai\",\"eps\",\"ps\"]},\"application/ppsp-tracker+json\":{\"source\":\"iana\",\"compressible\":true},\"application/problem+json\":{\"source\":\"iana\",\"compressible\":true},\"application/problem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/provenance+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"provx\"]},\"application/prs.alvestrand.titrax-sheet\":{\"source\":\"iana\"},\"application/prs.cww\":{\"source\":\"iana\",\"extensions\":[\"cww\"]},\"application/prs.cyn\":{\"source\":\"iana\",\"charset\":\"7-BIT\"},\"application/prs.hpub+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/prs.nprend\":{\"source\":\"iana\"},\"application/prs.plucker\":{\"source\":\"iana\"},\"application/prs.rdf-xml-crypt\":{\"source\":\"iana\"},\"application/prs.xsf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/pskc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"pskcxml\"]},\"application/pvd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/qsig\":{\"source\":\"iana\"},\"application/raml+yaml\":{\"compressible\":true,\"extensions\":[\"raml\"]},\"application/raptorfec\":{\"source\":\"iana\"},\"application/rdap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/rdf+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rdf\",\"owl\"]},\"application/reginfo+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rif\"]},\"application/relax-ng-compact-syntax\":{\"source\":\"iana\",\"extensions\":[\"rnc\"]},\"application/remote-printing\":{\"source\":\"iana\"},\"application/reputon+json\":{\"source\":\"iana\",\"compressible\":true},\"application/resource-lists+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rl\"]},\"application/resource-lists-diff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rld\"]},\"application/rfc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/riscos\":{\"source\":\"iana\"},\"application/rlmi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/rls-services+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rs\"]},\"application/route-apd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rapd\"]},\"application/route-s-tsid+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sls\"]},\"application/route-usd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rusd\"]},\"application/rpki-ghostbusters\":{\"source\":\"iana\",\"extensions\":[\"gbr\"]},\"application/rpki-manifest\":{\"source\":\"iana\",\"extensions\":[\"mft\"]},\"application/rpki-publication\":{\"source\":\"iana\"},\"application/rpki-roa\":{\"source\":\"iana\",\"extensions\":[\"roa\"]},\"application/rpki-updown\":{\"source\":\"iana\"},\"application/rsd+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"rsd\"]},\"application/rss+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"rss\"]},\"application/rtf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtf\"]},\"application/rtploopback\":{\"source\":\"iana\"},\"application/rtx\":{\"source\":\"iana\"},\"application/samlassertion+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/samlmetadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sarif+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sarif-external-properties+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sbe\":{\"source\":\"iana\"},\"application/sbml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sbml\"]},\"application/scaip+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/scim+json\":{\"source\":\"iana\",\"compressible\":true},\"application/scvp-cv-request\":{\"source\":\"iana\",\"extensions\":[\"scq\"]},\"application/scvp-cv-response\":{\"source\":\"iana\",\"extensions\":[\"scs\"]},\"application/scvp-vp-request\":{\"source\":\"iana\",\"extensions\":[\"spq\"]},\"application/scvp-vp-response\":{\"source\":\"iana\",\"extensions\":[\"spp\"]},\"application/sdp\":{\"source\":\"iana\",\"extensions\":[\"sdp\"]},\"application/secevent+jwt\":{\"source\":\"iana\"},\"application/senml+cbor\":{\"source\":\"iana\"},\"application/senml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/senml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"senmlx\"]},\"application/senml-etch+cbor\":{\"source\":\"iana\"},\"application/senml-etch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/senml-exi\":{\"source\":\"iana\"},\"application/sensml+cbor\":{\"source\":\"iana\"},\"application/sensml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sensml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sensmlx\"]},\"application/sensml-exi\":{\"source\":\"iana\"},\"application/sep+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sep-exi\":{\"source\":\"iana\"},\"application/session-info\":{\"source\":\"iana\"},\"application/set-payment\":{\"source\":\"iana\"},\"application/set-payment-initiation\":{\"source\":\"iana\",\"extensions\":[\"setpay\"]},\"application/set-registration\":{\"source\":\"iana\"},\"application/set-registration-initiation\":{\"source\":\"iana\",\"extensions\":[\"setreg\"]},\"application/sgml\":{\"source\":\"iana\"},\"application/sgml-open-catalog\":{\"source\":\"iana\"},\"application/shf+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"shf\"]},\"application/sieve\":{\"source\":\"iana\",\"extensions\":[\"siv\",\"sieve\"]},\"application/simple-filter+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/simple-message-summary\":{\"source\":\"iana\"},\"application/simplesymbolcontainer\":{\"source\":\"iana\"},\"application/sipc\":{\"source\":\"iana\"},\"application/slate\":{\"source\":\"iana\"},\"application/smil\":{\"source\":\"iana\"},\"application/smil+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"smi\",\"smil\"]},\"application/smpte336m\":{\"source\":\"iana\"},\"application/soap+fastinfoset\":{\"source\":\"iana\"},\"application/soap+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sparql-query\":{\"source\":\"iana\",\"extensions\":[\"rq\"]},\"application/sparql-results+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"srx\"]},\"application/spdx+json\":{\"source\":\"iana\",\"compressible\":true},\"application/spirits-event+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sql\":{\"source\":\"iana\"},\"application/srgs\":{\"source\":\"iana\",\"extensions\":[\"gram\"]},\"application/srgs+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"grxml\"]},\"application/sru+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sru\"]},\"application/ssdl+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ssdl\"]},\"application/ssml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ssml\"]},\"application/stix+json\":{\"source\":\"iana\",\"compressible\":true},\"application/swid+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"swidtag\"]},\"application/tamp-apex-update\":{\"source\":\"iana\"},\"application/tamp-apex-update-confirm\":{\"source\":\"iana\"},\"application/tamp-community-update\":{\"source\":\"iana\"},\"application/tamp-community-update-confirm\":{\"source\":\"iana\"},\"application/tamp-error\":{\"source\":\"iana\"},\"application/tamp-sequence-adjust\":{\"source\":\"iana\"},\"application/tamp-sequence-adjust-confirm\":{\"source\":\"iana\"},\"application/tamp-status-query\":{\"source\":\"iana\"},\"application/tamp-status-response\":{\"source\":\"iana\"},\"application/tamp-update\":{\"source\":\"iana\"},\"application/tamp-update-confirm\":{\"source\":\"iana\"},\"application/tar\":{\"compressible\":true},\"application/taxii+json\":{\"source\":\"iana\",\"compressible\":true},\"application/td+json\":{\"source\":\"iana\",\"compressible\":true},\"application/tei+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tei\",\"teicorpus\"]},\"application/tetra_isi\":{\"source\":\"iana\"},\"application/thraud+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tfi\"]},\"application/timestamp-query\":{\"source\":\"iana\"},\"application/timestamp-reply\":{\"source\":\"iana\"},\"application/timestamped-data\":{\"source\":\"iana\",\"extensions\":[\"tsd\"]},\"application/tlsrpt+gzip\":{\"source\":\"iana\"},\"application/tlsrpt+json\":{\"source\":\"iana\",\"compressible\":true},\"application/tnauthlist\":{\"source\":\"iana\"},\"application/token-introspection+jwt\":{\"source\":\"iana\"},\"application/toml\":{\"compressible\":true,\"extensions\":[\"toml\"]},\"application/trickle-ice-sdpfrag\":{\"source\":\"iana\"},\"application/trig\":{\"source\":\"iana\",\"extensions\":[\"trig\"]},\"application/ttml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ttml\"]},\"application/tve-trigger\":{\"source\":\"iana\"},\"application/tzif\":{\"source\":\"iana\"},\"application/tzif-leap\":{\"source\":\"iana\"},\"application/ubjson\":{\"compressible\":false,\"extensions\":[\"ubj\"]},\"application/ulpfec\":{\"source\":\"iana\"},\"application/urc-grpsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/urc-ressheet+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rsheet\"]},\"application/urc-targetdesc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"td\"]},\"application/urc-uisocketdesc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vcard+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vcard+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vemmi\":{\"source\":\"iana\"},\"application/vividence.scriptfile\":{\"source\":\"apache\"},\"application/vnd.1000minds.decision-model+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"1km\"]},\"application/vnd.3gpp-prose+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp-prose-pc3ch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp-v2x-local-service-information\":{\"source\":\"iana\"},\"application/vnd.3gpp.5gnas\":{\"source\":\"iana\"},\"application/vnd.3gpp.access-transfer-events+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.bsf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.gmop+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.gtpc\":{\"source\":\"iana\"},\"application/vnd.3gpp.interworking-data\":{\"source\":\"iana\"},\"application/vnd.3gpp.lpp\":{\"source\":\"iana\"},\"application/vnd.3gpp.mc-signalling-ear\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-payload\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-signalling\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-floor-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-location-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-signed+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-ue-init-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-affiliation-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-location-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-transmission-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mid-call+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.ngap\":{\"source\":\"iana\"},\"application/vnd.3gpp.pfcp\":{\"source\":\"iana\"},\"application/vnd.3gpp.pic-bw-large\":{\"source\":\"iana\",\"extensions\":[\"plb\"]},\"application/vnd.3gpp.pic-bw-small\":{\"source\":\"iana\",\"extensions\":[\"psb\"]},\"application/vnd.3gpp.pic-bw-var\":{\"source\":\"iana\",\"extensions\":[\"pvb\"]},\"application/vnd.3gpp.s1ap\":{\"source\":\"iana\"},\"application/vnd.3gpp.sms\":{\"source\":\"iana\"},\"application/vnd.3gpp.sms+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.srvcc-ext+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.srvcc-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.state-and-event-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.ussd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp2.bcmcsinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp2.sms\":{\"source\":\"iana\"},\"application/vnd.3gpp2.tcap\":{\"source\":\"iana\",\"extensions\":[\"tcap\"]},\"application/vnd.3lightssoftware.imagescal\":{\"source\":\"iana\"},\"application/vnd.3m.post-it-notes\":{\"source\":\"iana\",\"extensions\":[\"pwn\"]},\"application/vnd.accpac.simply.aso\":{\"source\":\"iana\",\"extensions\":[\"aso\"]},\"application/vnd.accpac.simply.imp\":{\"source\":\"iana\",\"extensions\":[\"imp\"]},\"application/vnd.acucobol\":{\"source\":\"iana\",\"extensions\":[\"acu\"]},\"application/vnd.acucorp\":{\"source\":\"iana\",\"extensions\":[\"atc\",\"acutc\"]},\"application/vnd.adobe.air-application-installer-package+zip\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"air\"]},\"application/vnd.adobe.flash.movie\":{\"source\":\"iana\"},\"application/vnd.adobe.formscentral.fcdt\":{\"source\":\"iana\",\"extensions\":[\"fcdt\"]},\"application/vnd.adobe.fxp\":{\"source\":\"iana\",\"extensions\":[\"fxp\",\"fxpl\"]},\"application/vnd.adobe.partial-upload\":{\"source\":\"iana\"},\"application/vnd.adobe.xdp+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdp\"]},\"application/vnd.adobe.xfdf\":{\"source\":\"iana\",\"extensions\":[\"xfdf\"]},\"application/vnd.aether.imp\":{\"source\":\"iana\"},\"application/vnd.afpc.afplinedata\":{\"source\":\"iana\"},\"application/vnd.afpc.afplinedata-pagedef\":{\"source\":\"iana\"},\"application/vnd.afpc.cmoca-cmresource\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-charset\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-codedfont\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-codepage\":{\"source\":\"iana\"},\"application/vnd.afpc.modca\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-cmtable\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-formdef\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-mediummap\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-objectcontainer\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-overlay\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-pagesegment\":{\"source\":\"iana\"},\"application/vnd.age\":{\"source\":\"iana\",\"extensions\":[\"age\"]},\"application/vnd.ah-barcode\":{\"source\":\"iana\"},\"application/vnd.ahead.space\":{\"source\":\"iana\",\"extensions\":[\"ahead\"]},\"application/vnd.airzip.filesecure.azf\":{\"source\":\"iana\",\"extensions\":[\"azf\"]},\"application/vnd.airzip.filesecure.azs\":{\"source\":\"iana\",\"extensions\":[\"azs\"]},\"application/vnd.amadeus+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.amazon.ebook\":{\"source\":\"apache\",\"extensions\":[\"azw\"]},\"application/vnd.amazon.mobi8-ebook\":{\"source\":\"iana\"},\"application/vnd.americandynamics.acc\":{\"source\":\"iana\",\"extensions\":[\"acc\"]},\"application/vnd.amiga.ami\":{\"source\":\"iana\",\"extensions\":[\"ami\"]},\"application/vnd.amundsen.maze+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.android.ota\":{\"source\":\"iana\"},\"application/vnd.android.package-archive\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"apk\"]},\"application/vnd.anki\":{\"source\":\"iana\"},\"application/vnd.anser-web-certificate-issue-initiation\":{\"source\":\"iana\",\"extensions\":[\"cii\"]},\"application/vnd.anser-web-funds-transfer-initiation\":{\"source\":\"apache\",\"extensions\":[\"fti\"]},\"application/vnd.antix.game-component\":{\"source\":\"iana\",\"extensions\":[\"atx\"]},\"application/vnd.apache.arrow.file\":{\"source\":\"iana\"},\"application/vnd.apache.arrow.stream\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.binary\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.compact\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.json\":{\"source\":\"iana\"},\"application/vnd.api+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.aplextor.warrp+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.apothekende.reservation+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.apple.installer+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpkg\"]},\"application/vnd.apple.keynote\":{\"source\":\"iana\",\"extensions\":[\"key\"]},\"application/vnd.apple.mpegurl\":{\"source\":\"iana\",\"extensions\":[\"m3u8\"]},\"application/vnd.apple.numbers\":{\"source\":\"iana\",\"extensions\":[\"numbers\"]},\"application/vnd.apple.pages\":{\"source\":\"iana\",\"extensions\":[\"pages\"]},\"application/vnd.apple.pkpass\":{\"compressible\":false,\"extensions\":[\"pkpass\"]},\"application/vnd.arastra.swi\":{\"source\":\"iana\"},\"application/vnd.aristanetworks.swi\":{\"source\":\"iana\",\"extensions\":[\"swi\"]},\"application/vnd.artisan+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.artsquare\":{\"source\":\"iana\"},\"application/vnd.astraea-software.iota\":{\"source\":\"iana\",\"extensions\":[\"iota\"]},\"application/vnd.audiograph\":{\"source\":\"iana\",\"extensions\":[\"aep\"]},\"application/vnd.autopackage\":{\"source\":\"iana\"},\"application/vnd.avalon+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.avistar+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.balsamiq.bmml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"bmml\"]},\"application/vnd.balsamiq.bmpr\":{\"source\":\"iana\"},\"application/vnd.banana-accounting\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.error\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.msg\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.msg+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.bekitzur-stech+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.bint.med-content\":{\"source\":\"iana\"},\"application/vnd.biopax.rdf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.blink-idb-value-wrapper\":{\"source\":\"iana\"},\"application/vnd.blueice.multipass\":{\"source\":\"iana\",\"extensions\":[\"mpm\"]},\"application/vnd.bluetooth.ep.oob\":{\"source\":\"iana\"},\"application/vnd.bluetooth.le.oob\":{\"source\":\"iana\"},\"application/vnd.bmi\":{\"source\":\"iana\",\"extensions\":[\"bmi\"]},\"application/vnd.bpf\":{\"source\":\"iana\"},\"application/vnd.bpf3\":{\"source\":\"iana\"},\"application/vnd.businessobjects\":{\"source\":\"iana\",\"extensions\":[\"rep\"]},\"application/vnd.byu.uapi+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cab-jscript\":{\"source\":\"iana\"},\"application/vnd.canon-cpdl\":{\"source\":\"iana\"},\"application/vnd.canon-lips\":{\"source\":\"iana\"},\"application/vnd.capasystems-pg+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cendio.thinlinc.clientconf\":{\"source\":\"iana\"},\"application/vnd.century-systems.tcp_stream\":{\"source\":\"iana\"},\"application/vnd.chemdraw+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cdxml\"]},\"application/vnd.chess-pgn\":{\"source\":\"iana\"},\"application/vnd.chipnuts.karaoke-mmd\":{\"source\":\"iana\",\"extensions\":[\"mmd\"]},\"application/vnd.ciedi\":{\"source\":\"iana\"},\"application/vnd.cinderella\":{\"source\":\"iana\",\"extensions\":[\"cdy\"]},\"application/vnd.cirpack.isdn-ext\":{\"source\":\"iana\"},\"application/vnd.citationstyles.style+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"csl\"]},\"application/vnd.claymore\":{\"source\":\"iana\",\"extensions\":[\"cla\"]},\"application/vnd.cloanto.rp9\":{\"source\":\"iana\",\"extensions\":[\"rp9\"]},\"application/vnd.clonk.c4group\":{\"source\":\"iana\",\"extensions\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]},\"application/vnd.cluetrust.cartomobile-config\":{\"source\":\"iana\",\"extensions\":[\"c11amc\"]},\"application/vnd.cluetrust.cartomobile-config-pkg\":{\"source\":\"iana\",\"extensions\":[\"c11amz\"]},\"application/vnd.coffeescript\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.document\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.document-template\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.presentation\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.presentation-template\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet-template\":{\"source\":\"iana\"},\"application/vnd.collection+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.collection.doc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.collection.next+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.comicbook+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.comicbook-rar\":{\"source\":\"iana\"},\"application/vnd.commerce-battelle\":{\"source\":\"iana\"},\"application/vnd.commonspace\":{\"source\":\"iana\",\"extensions\":[\"csp\"]},\"application/vnd.contact.cmsg\":{\"source\":\"iana\",\"extensions\":[\"cdbcmsg\"]},\"application/vnd.coreos.ignition+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cosmocaller\":{\"source\":\"iana\",\"extensions\":[\"cmc\"]},\"application/vnd.crick.clicker\":{\"source\":\"iana\",\"extensions\":[\"clkx\"]},\"application/vnd.crick.clicker.keyboard\":{\"source\":\"iana\",\"extensions\":[\"clkk\"]},\"application/vnd.crick.clicker.palette\":{\"source\":\"iana\",\"extensions\":[\"clkp\"]},\"application/vnd.crick.clicker.template\":{\"source\":\"iana\",\"extensions\":[\"clkt\"]},\"application/vnd.crick.clicker.wordbank\":{\"source\":\"iana\",\"extensions\":[\"clkw\"]},\"application/vnd.criticaltools.wbs+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wbs\"]},\"application/vnd.cryptii.pipe+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.crypto-shade-file\":{\"source\":\"iana\"},\"application/vnd.cryptomator.encrypted\":{\"source\":\"iana\"},\"application/vnd.cryptomator.vault\":{\"source\":\"iana\"},\"application/vnd.ctc-posml\":{\"source\":\"iana\",\"extensions\":[\"pml\"]},\"application/vnd.ctct.ws+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cups-pdf\":{\"source\":\"iana\"},\"application/vnd.cups-postscript\":{\"source\":\"iana\"},\"application/vnd.cups-ppd\":{\"source\":\"iana\",\"extensions\":[\"ppd\"]},\"application/vnd.cups-raster\":{\"source\":\"iana\"},\"application/vnd.cups-raw\":{\"source\":\"iana\"},\"application/vnd.curl\":{\"source\":\"iana\"},\"application/vnd.curl.car\":{\"source\":\"apache\",\"extensions\":[\"car\"]},\"application/vnd.curl.pcurl\":{\"source\":\"apache\",\"extensions\":[\"pcurl\"]},\"application/vnd.cyan.dean.root+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cybank\":{\"source\":\"iana\"},\"application/vnd.cyclonedx+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cyclonedx+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.d2l.coursepackage1p0+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.d3m-dataset\":{\"source\":\"iana\"},\"application/vnd.d3m-problem\":{\"source\":\"iana\"},\"application/vnd.dart\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dart\"]},\"application/vnd.data-vision.rdz\":{\"source\":\"iana\",\"extensions\":[\"rdz\"]},\"application/vnd.datapackage+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dataresource+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dbf\":{\"source\":\"iana\",\"extensions\":[\"dbf\"]},\"application/vnd.debian.binary-package\":{\"source\":\"iana\"},\"application/vnd.dece.data\":{\"source\":\"iana\",\"extensions\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]},\"application/vnd.dece.ttml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uvt\",\"uvvt\"]},\"application/vnd.dece.unspecified\":{\"source\":\"iana\",\"extensions\":[\"uvx\",\"uvvx\"]},\"application/vnd.dece.zip\":{\"source\":\"iana\",\"extensions\":[\"uvz\",\"uvvz\"]},\"application/vnd.denovo.fcselayout-link\":{\"source\":\"iana\",\"extensions\":[\"fe_launch\"]},\"application/vnd.desmume.movie\":{\"source\":\"iana\"},\"application/vnd.dir-bi.plate-dl-nosuffix\":{\"source\":\"iana\"},\"application/vnd.dm.delegation+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dna\":{\"source\":\"iana\",\"extensions\":[\"dna\"]},\"application/vnd.document+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dolby.mlp\":{\"source\":\"apache\",\"extensions\":[\"mlp\"]},\"application/vnd.dolby.mobile.1\":{\"source\":\"iana\"},\"application/vnd.dolby.mobile.2\":{\"source\":\"iana\"},\"application/vnd.doremir.scorecloud-binary-document\":{\"source\":\"iana\"},\"application/vnd.dpgraph\":{\"source\":\"iana\",\"extensions\":[\"dpg\"]},\"application/vnd.dreamfactory\":{\"source\":\"iana\",\"extensions\":[\"dfac\"]},\"application/vnd.drive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ds-keypoint\":{\"source\":\"apache\",\"extensions\":[\"kpxx\"]},\"application/vnd.dtg.local\":{\"source\":\"iana\"},\"application/vnd.dtg.local.flash\":{\"source\":\"iana\"},\"application/vnd.dtg.local.html\":{\"source\":\"iana\"},\"application/vnd.dvb.ait\":{\"source\":\"iana\",\"extensions\":[\"ait\"]},\"application/vnd.dvb.dvbisl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.dvbj\":{\"source\":\"iana\"},\"application/vnd.dvb.esgcontainer\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcdftnotifaccess\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgaccess\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgaccess2\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgpdd\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcroaming\":{\"source\":\"iana\"},\"application/vnd.dvb.iptv.alfec-base\":{\"source\":\"iana\"},\"application/vnd.dvb.iptv.alfec-enhancement\":{\"source\":\"iana\"},\"application/vnd.dvb.notif-aggregate-root+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-container+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-generic+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-msglist+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-registration-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-registration-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-init+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.pfr\":{\"source\":\"iana\"},\"application/vnd.dvb.service\":{\"source\":\"iana\",\"extensions\":[\"svc\"]},\"application/vnd.dxr\":{\"source\":\"iana\"},\"application/vnd.dynageo\":{\"source\":\"iana\",\"extensions\":[\"geo\"]},\"application/vnd.dzr\":{\"source\":\"iana\"},\"application/vnd.easykaraoke.cdgdownload\":{\"source\":\"iana\"},\"application/vnd.ecdis-update\":{\"source\":\"iana\"},\"application/vnd.ecip.rlp\":{\"source\":\"iana\"},\"application/vnd.eclipse.ditto+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ecowin.chart\":{\"source\":\"iana\",\"extensions\":[\"mag\"]},\"application/vnd.ecowin.filerequest\":{\"source\":\"iana\"},\"application/vnd.ecowin.fileupdate\":{\"source\":\"iana\"},\"application/vnd.ecowin.series\":{\"source\":\"iana\"},\"application/vnd.ecowin.seriesrequest\":{\"source\":\"iana\"},\"application/vnd.ecowin.seriesupdate\":{\"source\":\"iana\"},\"application/vnd.efi.img\":{\"source\":\"iana\"},\"application/vnd.efi.iso\":{\"source\":\"iana\"},\"application/vnd.emclient.accessrequest+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.enliven\":{\"source\":\"iana\",\"extensions\":[\"nml\"]},\"application/vnd.enphase.envoy\":{\"source\":\"iana\"},\"application/vnd.eprints.data+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.epson.esf\":{\"source\":\"iana\",\"extensions\":[\"esf\"]},\"application/vnd.epson.msf\":{\"source\":\"iana\",\"extensions\":[\"msf\"]},\"application/vnd.epson.quickanime\":{\"source\":\"iana\",\"extensions\":[\"qam\"]},\"application/vnd.epson.salt\":{\"source\":\"iana\",\"extensions\":[\"slt\"]},\"application/vnd.epson.ssf\":{\"source\":\"iana\",\"extensions\":[\"ssf\"]},\"application/vnd.ericsson.quickcall\":{\"source\":\"iana\"},\"application/vnd.espass-espass+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.eszigno3+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"es3\",\"et3\"]},\"application/vnd.etsi.aoc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.asic-e+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.etsi.asic-s+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.etsi.cug+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvcommand+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvdiscovery+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-bc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-cod+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-npvr+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvservice+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsync+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvueprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.mcid+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.mheg5\":{\"source\":\"iana\"},\"application/vnd.etsi.overload-control-policy-dataset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.pstn+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.sci+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.simservs+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.timestamp-token\":{\"source\":\"iana\"},\"application/vnd.etsi.tsl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.tsl.der\":{\"source\":\"iana\"},\"application/vnd.eu.kasparian.car+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.eudora.data\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.profile\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.settings\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.theme\":{\"source\":\"iana\"},\"application/vnd.exstream-empower+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.exstream-package\":{\"source\":\"iana\"},\"application/vnd.ezpix-album\":{\"source\":\"iana\",\"extensions\":[\"ez2\"]},\"application/vnd.ezpix-package\":{\"source\":\"iana\",\"extensions\":[\"ez3\"]},\"application/vnd.f-secure.mobile\":{\"source\":\"iana\"},\"application/vnd.familysearch.gedcom+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.fastcopy-disk-image\":{\"source\":\"iana\"},\"application/vnd.fdf\":{\"source\":\"iana\",\"extensions\":[\"fdf\"]},\"application/vnd.fdsn.mseed\":{\"source\":\"iana\",\"extensions\":[\"mseed\"]},\"application/vnd.fdsn.seed\":{\"source\":\"iana\",\"extensions\":[\"seed\",\"dataless\"]},\"application/vnd.ffsns\":{\"source\":\"iana\"},\"application/vnd.ficlab.flb+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.filmit.zfc\":{\"source\":\"iana\"},\"application/vnd.fints\":{\"source\":\"iana\"},\"application/vnd.firemonkeys.cloudcell\":{\"source\":\"iana\"},\"application/vnd.flographit\":{\"source\":\"iana\",\"extensions\":[\"gph\"]},\"application/vnd.fluxtime.clip\":{\"source\":\"iana\",\"extensions\":[\"ftc\"]},\"application/vnd.font-fontforge-sfd\":{\"source\":\"iana\"},\"application/vnd.framemaker\":{\"source\":\"iana\",\"extensions\":[\"fm\",\"frame\",\"maker\",\"book\"]},\"application/vnd.frogans.fnc\":{\"source\":\"iana\",\"extensions\":[\"fnc\"]},\"application/vnd.frogans.ltf\":{\"source\":\"iana\",\"extensions\":[\"ltf\"]},\"application/vnd.fsc.weblaunch\":{\"source\":\"iana\",\"extensions\":[\"fsc\"]},\"application/vnd.fujifilm.fb.docuworks\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.docuworks.binder\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.docuworks.container\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.jfi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.fujitsu.oasys\":{\"source\":\"iana\",\"extensions\":[\"oas\"]},\"application/vnd.fujitsu.oasys2\":{\"source\":\"iana\",\"extensions\":[\"oa2\"]},\"application/vnd.fujitsu.oasys3\":{\"source\":\"iana\",\"extensions\":[\"oa3\"]},\"application/vnd.fujitsu.oasysgp\":{\"source\":\"iana\",\"extensions\":[\"fg5\"]},\"application/vnd.fujitsu.oasysprs\":{\"source\":\"iana\",\"extensions\":[\"bh2\"]},\"application/vnd.fujixerox.art-ex\":{\"source\":\"iana\"},\"application/vnd.fujixerox.art4\":{\"source\":\"iana\"},\"application/vnd.fujixerox.ddd\":{\"source\":\"iana\",\"extensions\":[\"ddd\"]},\"application/vnd.fujixerox.docuworks\":{\"source\":\"iana\",\"extensions\":[\"xdw\"]},\"application/vnd.fujixerox.docuworks.binder\":{\"source\":\"iana\",\"extensions\":[\"xbd\"]},\"application/vnd.fujixerox.docuworks.container\":{\"source\":\"iana\"},\"application/vnd.fujixerox.hbpl\":{\"source\":\"iana\"},\"application/vnd.fut-misnet\":{\"source\":\"iana\"},\"application/vnd.futoin+cbor\":{\"source\":\"iana\"},\"application/vnd.futoin+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.fuzzysheet\":{\"source\":\"iana\",\"extensions\":[\"fzs\"]},\"application/vnd.genomatix.tuxedo\":{\"source\":\"iana\",\"extensions\":[\"txd\"]},\"application/vnd.gentics.grd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geo+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geocube+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geogebra.file\":{\"source\":\"iana\",\"extensions\":[\"ggb\"]},\"application/vnd.geogebra.slides\":{\"source\":\"iana\"},\"application/vnd.geogebra.tool\":{\"source\":\"iana\",\"extensions\":[\"ggt\"]},\"application/vnd.geometry-explorer\":{\"source\":\"iana\",\"extensions\":[\"gex\",\"gre\"]},\"application/vnd.geonext\":{\"source\":\"iana\",\"extensions\":[\"gxt\"]},\"application/vnd.geoplan\":{\"source\":\"iana\",\"extensions\":[\"g2w\"]},\"application/vnd.geospace\":{\"source\":\"iana\",\"extensions\":[\"g3w\"]},\"application/vnd.gerber\":{\"source\":\"iana\"},\"application/vnd.globalplatform.card-content-mgt\":{\"source\":\"iana\"},\"application/vnd.globalplatform.card-content-mgt-response\":{\"source\":\"iana\"},\"application/vnd.gmx\":{\"source\":\"iana\",\"extensions\":[\"gmx\"]},\"application/vnd.google-apps.document\":{\"compressible\":false,\"extensions\":[\"gdoc\"]},\"application/vnd.google-apps.presentation\":{\"compressible\":false,\"extensions\":[\"gslides\"]},\"application/vnd.google-apps.spreadsheet\":{\"compressible\":false,\"extensions\":[\"gsheet\"]},\"application/vnd.google-earth.kml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"kml\"]},\"application/vnd.google-earth.kmz\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"kmz\"]},\"application/vnd.gov.sk.e-form+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.gov.sk.e-form+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.gov.sk.xmldatacontainer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.grafeq\":{\"source\":\"iana\",\"extensions\":[\"gqf\",\"gqs\"]},\"application/vnd.gridmp\":{\"source\":\"iana\"},\"application/vnd.groove-account\":{\"source\":\"iana\",\"extensions\":[\"gac\"]},\"application/vnd.groove-help\":{\"source\":\"iana\",\"extensions\":[\"ghf\"]},\"application/vnd.groove-identity-message\":{\"source\":\"iana\",\"extensions\":[\"gim\"]},\"application/vnd.groove-injector\":{\"source\":\"iana\",\"extensions\":[\"grv\"]},\"application/vnd.groove-tool-message\":{\"source\":\"iana\",\"extensions\":[\"gtm\"]},\"application/vnd.groove-tool-template\":{\"source\":\"iana\",\"extensions\":[\"tpl\"]},\"application/vnd.groove-vcard\":{\"source\":\"iana\",\"extensions\":[\"vcg\"]},\"application/vnd.hal+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hal+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"hal\"]},\"application/vnd.handheld-entertainment+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"zmm\"]},\"application/vnd.hbci\":{\"source\":\"iana\",\"extensions\":[\"hbci\"]},\"application/vnd.hc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hcl-bireports\":{\"source\":\"iana\"},\"application/vnd.hdt\":{\"source\":\"iana\"},\"application/vnd.heroku+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hhe.lesson-player\":{\"source\":\"iana\",\"extensions\":[\"les\"]},\"application/vnd.hl7cda+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.hl7v2+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.hp-hpgl\":{\"source\":\"iana\",\"extensions\":[\"hpgl\"]},\"application/vnd.hp-hpid\":{\"source\":\"iana\",\"extensions\":[\"hpid\"]},\"application/vnd.hp-hps\":{\"source\":\"iana\",\"extensions\":[\"hps\"]},\"application/vnd.hp-jlyt\":{\"source\":\"iana\",\"extensions\":[\"jlt\"]},\"application/vnd.hp-pcl\":{\"source\":\"iana\",\"extensions\":[\"pcl\"]},\"application/vnd.hp-pclxl\":{\"source\":\"iana\",\"extensions\":[\"pclxl\"]},\"application/vnd.httphone\":{\"source\":\"iana\"},\"application/vnd.hydrostatix.sof-data\":{\"source\":\"iana\",\"extensions\":[\"sfd-hdstx\"]},\"application/vnd.hyper+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hyper-item+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hyperdrive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hzn-3d-crossword\":{\"source\":\"iana\"},\"application/vnd.ibm.afplinedata\":{\"source\":\"iana\"},\"application/vnd.ibm.electronic-media\":{\"source\":\"iana\"},\"application/vnd.ibm.minipay\":{\"source\":\"iana\",\"extensions\":[\"mpy\"]},\"application/vnd.ibm.modcap\":{\"source\":\"iana\",\"extensions\":[\"afp\",\"listafp\",\"list3820\"]},\"application/vnd.ibm.rights-management\":{\"source\":\"iana\",\"extensions\":[\"irm\"]},\"application/vnd.ibm.secure-container\":{\"source\":\"iana\",\"extensions\":[\"sc\"]},\"application/vnd.iccprofile\":{\"source\":\"iana\",\"extensions\":[\"icc\",\"icm\"]},\"application/vnd.ieee.1905\":{\"source\":\"iana\"},\"application/vnd.igloader\":{\"source\":\"iana\",\"extensions\":[\"igl\"]},\"application/vnd.imagemeter.folder+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.imagemeter.image+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.immervision-ivp\":{\"source\":\"iana\",\"extensions\":[\"ivp\"]},\"application/vnd.immervision-ivu\":{\"source\":\"iana\",\"extensions\":[\"ivu\"]},\"application/vnd.ims.imsccv1p1\":{\"source\":\"iana\"},\"application/vnd.ims.imsccv1p2\":{\"source\":\"iana\"},\"application/vnd.ims.imsccv1p3\":{\"source\":\"iana\"},\"application/vnd.ims.lis.v2.result+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolconsumerprofile+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolproxy+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolproxy.id+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolsettings+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolsettings.simple+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.informedcontrol.rms+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.informix-visionary\":{\"source\":\"iana\"},\"application/vnd.infotech.project\":{\"source\":\"iana\"},\"application/vnd.infotech.project+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.innopath.wamp.notification\":{\"source\":\"iana\"},\"application/vnd.insors.igm\":{\"source\":\"iana\",\"extensions\":[\"igm\"]},\"application/vnd.intercon.formnet\":{\"source\":\"iana\",\"extensions\":[\"xpw\",\"xpx\"]},\"application/vnd.intergeo\":{\"source\":\"iana\",\"extensions\":[\"i2g\"]},\"application/vnd.intertrust.digibox\":{\"source\":\"iana\"},\"application/vnd.intertrust.nncp\":{\"source\":\"iana\"},\"application/vnd.intu.qbo\":{\"source\":\"iana\",\"extensions\":[\"qbo\"]},\"application/vnd.intu.qfx\":{\"source\":\"iana\",\"extensions\":[\"qfx\"]},\"application/vnd.iptc.g2.catalogitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.conceptitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.knowledgeitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.newsitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.newsmessage+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.packageitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.planningitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ipunplugged.rcprofile\":{\"source\":\"iana\",\"extensions\":[\"rcprofile\"]},\"application/vnd.irepository.package+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"irp\"]},\"application/vnd.is-xpr\":{\"source\":\"iana\",\"extensions\":[\"xpr\"]},\"application/vnd.isac.fcs\":{\"source\":\"iana\",\"extensions\":[\"fcs\"]},\"application/vnd.iso11783-10+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.jam\":{\"source\":\"iana\",\"extensions\":[\"jam\"]},\"application/vnd.japannet-directory-service\":{\"source\":\"iana\"},\"application/vnd.japannet-jpnstore-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-payment-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-registration\":{\"source\":\"iana\"},\"application/vnd.japannet-registration-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-setstore-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-verification\":{\"source\":\"iana\"},\"application/vnd.japannet-verification-wakeup\":{\"source\":\"iana\"},\"application/vnd.jcp.javame.midlet-rms\":{\"source\":\"iana\",\"extensions\":[\"rms\"]},\"application/vnd.jisp\":{\"source\":\"iana\",\"extensions\":[\"jisp\"]},\"application/vnd.joost.joda-archive\":{\"source\":\"iana\",\"extensions\":[\"joda\"]},\"application/vnd.jsk.isdn-ngn\":{\"source\":\"iana\"},\"application/vnd.kahootz\":{\"source\":\"iana\",\"extensions\":[\"ktz\",\"ktr\"]},\"application/vnd.kde.karbon\":{\"source\":\"iana\",\"extensions\":[\"karbon\"]},\"application/vnd.kde.kchart\":{\"source\":\"iana\",\"extensions\":[\"chrt\"]},\"application/vnd.kde.kformula\":{\"source\":\"iana\",\"extensions\":[\"kfo\"]},\"application/vnd.kde.kivio\":{\"source\":\"iana\",\"extensions\":[\"flw\"]},\"application/vnd.kde.kontour\":{\"source\":\"iana\",\"extensions\":[\"kon\"]},\"application/vnd.kde.kpresenter\":{\"source\":\"iana\",\"extensions\":[\"kpr\",\"kpt\"]},\"application/vnd.kde.kspread\":{\"source\":\"iana\",\"extensions\":[\"ksp\"]},\"application/vnd.kde.kword\":{\"source\":\"iana\",\"extensions\":[\"kwd\",\"kwt\"]},\"application/vnd.kenameaapp\":{\"source\":\"iana\",\"extensions\":[\"htke\"]},\"application/vnd.kidspiration\":{\"source\":\"iana\",\"extensions\":[\"kia\"]},\"application/vnd.kinar\":{\"source\":\"iana\",\"extensions\":[\"kne\",\"knp\"]},\"application/vnd.koan\":{\"source\":\"iana\",\"extensions\":[\"skp\",\"skd\",\"skt\",\"skm\"]},\"application/vnd.kodak-descriptor\":{\"source\":\"iana\",\"extensions\":[\"sse\"]},\"application/vnd.las\":{\"source\":\"iana\"},\"application/vnd.las.las+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.las.las+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lasxml\"]},\"application/vnd.laszip\":{\"source\":\"iana\"},\"application/vnd.leap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.liberty-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.llamagraphics.life-balance.desktop\":{\"source\":\"iana\",\"extensions\":[\"lbd\"]},\"application/vnd.llamagraphics.life-balance.exchange+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lbe\"]},\"application/vnd.logipipe.circuit+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.loom\":{\"source\":\"iana\"},\"application/vnd.lotus-1-2-3\":{\"source\":\"iana\",\"extensions\":[\"123\"]},\"application/vnd.lotus-approach\":{\"source\":\"iana\",\"extensions\":[\"apr\"]},\"application/vnd.lotus-freelance\":{\"source\":\"iana\",\"extensions\":[\"pre\"]},\"application/vnd.lotus-notes\":{\"source\":\"iana\",\"extensions\":[\"nsf\"]},\"application/vnd.lotus-organizer\":{\"source\":\"iana\",\"extensions\":[\"org\"]},\"application/vnd.lotus-screencam\":{\"source\":\"iana\",\"extensions\":[\"scm\"]},\"application/vnd.lotus-wordpro\":{\"source\":\"iana\",\"extensions\":[\"lwp\"]},\"application/vnd.macports.portpkg\":{\"source\":\"iana\",\"extensions\":[\"portpkg\"]},\"application/vnd.mapbox-vector-tile\":{\"source\":\"iana\",\"extensions\":[\"mvt\"]},\"application/vnd.marlin.drm.actiontoken+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.conftoken+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.license+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.mdcf\":{\"source\":\"iana\"},\"application/vnd.mason+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.maxar.archive.3tz+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.maxmind.maxmind-db\":{\"source\":\"iana\"},\"application/vnd.mcd\":{\"source\":\"iana\",\"extensions\":[\"mcd\"]},\"application/vnd.medcalcdata\":{\"source\":\"iana\",\"extensions\":[\"mc1\"]},\"application/vnd.mediastation.cdkey\":{\"source\":\"iana\",\"extensions\":[\"cdkey\"]},\"application/vnd.meridian-slingshot\":{\"source\":\"iana\"},\"application/vnd.mfer\":{\"source\":\"iana\",\"extensions\":[\"mwf\"]},\"application/vnd.mfmp\":{\"source\":\"iana\",\"extensions\":[\"mfm\"]},\"application/vnd.micro+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.micrografx.flo\":{\"source\":\"iana\",\"extensions\":[\"flo\"]},\"application/vnd.micrografx.igx\":{\"source\":\"iana\",\"extensions\":[\"igx\"]},\"application/vnd.microsoft.portable-executable\":{\"source\":\"iana\"},\"application/vnd.microsoft.windows.thumbnail-cache\":{\"source\":\"iana\"},\"application/vnd.miele+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.mif\":{\"source\":\"iana\",\"extensions\":[\"mif\"]},\"application/vnd.minisoft-hp3000-save\":{\"source\":\"iana\"},\"application/vnd.mitsubishi.misty-guard.trustweb\":{\"source\":\"iana\"},\"application/vnd.mobius.daf\":{\"source\":\"iana\",\"extensions\":[\"daf\"]},\"application/vnd.mobius.dis\":{\"source\":\"iana\",\"extensions\":[\"dis\"]},\"application/vnd.mobius.mbk\":{\"source\":\"iana\",\"extensions\":[\"mbk\"]},\"application/vnd.mobius.mqy\":{\"source\":\"iana\",\"extensions\":[\"mqy\"]},\"application/vnd.mobius.msl\":{\"source\":\"iana\",\"extensions\":[\"msl\"]},\"application/vnd.mobius.plc\":{\"source\":\"iana\",\"extensions\":[\"plc\"]},\"application/vnd.mobius.txf\":{\"source\":\"iana\",\"extensions\":[\"txf\"]},\"application/vnd.mophun.application\":{\"source\":\"iana\",\"extensions\":[\"mpn\"]},\"application/vnd.mophun.certificate\":{\"source\":\"iana\",\"extensions\":[\"mpc\"]},\"application/vnd.motorola.flexsuite\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.adsi\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.fis\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.gotap\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.kmr\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.ttc\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.wem\":{\"source\":\"iana\"},\"application/vnd.motorola.iprm\":{\"source\":\"iana\"},\"application/vnd.mozilla.xul+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xul\"]},\"application/vnd.ms-3mfdocument\":{\"source\":\"iana\"},\"application/vnd.ms-artgalry\":{\"source\":\"iana\",\"extensions\":[\"cil\"]},\"application/vnd.ms-asf\":{\"source\":\"iana\"},\"application/vnd.ms-cab-compressed\":{\"source\":\"iana\",\"extensions\":[\"cab\"]},\"application/vnd.ms-color.iccprofile\":{\"source\":\"apache\"},\"application/vnd.ms-excel\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]},\"application/vnd.ms-excel.addin.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlam\"]},\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlsb\"]},\"application/vnd.ms-excel.sheet.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlsm\"]},\"application/vnd.ms-excel.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xltm\"]},\"application/vnd.ms-fontobject\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"eot\"]},\"application/vnd.ms-htmlhelp\":{\"source\":\"iana\",\"extensions\":[\"chm\"]},\"application/vnd.ms-ims\":{\"source\":\"iana\",\"extensions\":[\"ims\"]},\"application/vnd.ms-lrm\":{\"source\":\"iana\",\"extensions\":[\"lrm\"]},\"application/vnd.ms-office.activex+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-officetheme\":{\"source\":\"iana\",\"extensions\":[\"thmx\"]},\"application/vnd.ms-opentype\":{\"source\":\"apache\",\"compressible\":true},\"application/vnd.ms-outlook\":{\"compressible\":false,\"extensions\":[\"msg\"]},\"application/vnd.ms-package.obfuscated-opentype\":{\"source\":\"apache\"},\"application/vnd.ms-pki.seccat\":{\"source\":\"apache\",\"extensions\":[\"cat\"]},\"application/vnd.ms-pki.stl\":{\"source\":\"apache\",\"extensions\":[\"stl\"]},\"application/vnd.ms-playready.initiator+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-powerpoint\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ppt\",\"pps\",\"pot\"]},\"application/vnd.ms-powerpoint.addin.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"ppam\"]},\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"pptm\"]},\"application/vnd.ms-powerpoint.slide.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"sldm\"]},\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"ppsm\"]},\"application/vnd.ms-powerpoint.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"potm\"]},\"application/vnd.ms-printdevicecapabilities+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-printing.printticket+xml\":{\"source\":\"apache\",\"compressible\":true},\"application/vnd.ms-printschematicket+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-project\":{\"source\":\"iana\",\"extensions\":[\"mpp\",\"mpt\"]},\"application/vnd.ms-tnef\":{\"source\":\"iana\"},\"application/vnd.ms-windows.devicepairing\":{\"source\":\"iana\"},\"application/vnd.ms-windows.nwprinting.oob\":{\"source\":\"iana\"},\"application/vnd.ms-windows.printerpairing\":{\"source\":\"iana\"},\"application/vnd.ms-windows.wsd.oob\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.lic-chlg-req\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.lic-resp\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.meter-chlg-req\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.meter-resp\":{\"source\":\"iana\"},\"application/vnd.ms-word.document.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"docm\"]},\"application/vnd.ms-word.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"dotm\"]},\"application/vnd.ms-works\":{\"source\":\"iana\",\"extensions\":[\"wps\",\"wks\",\"wcm\",\"wdb\"]},\"application/vnd.ms-wpl\":{\"source\":\"iana\",\"extensions\":[\"wpl\"]},\"application/vnd.ms-xpsdocument\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xps\"]},\"application/vnd.msa-disk-image\":{\"source\":\"iana\"},\"application/vnd.mseq\":{\"source\":\"iana\",\"extensions\":[\"mseq\"]},\"application/vnd.msign\":{\"source\":\"iana\"},\"application/vnd.multiad.creator\":{\"source\":\"iana\"},\"application/vnd.multiad.creator.cif\":{\"source\":\"iana\"},\"application/vnd.music-niff\":{\"source\":\"iana\"},\"application/vnd.musician\":{\"source\":\"iana\",\"extensions\":[\"mus\"]},\"application/vnd.muvee.style\":{\"source\":\"iana\",\"extensions\":[\"msty\"]},\"application/vnd.mynfc\":{\"source\":\"iana\",\"extensions\":[\"taglet\"]},\"application/vnd.nacamar.ybrid+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ncd.control\":{\"source\":\"iana\"},\"application/vnd.ncd.reference\":{\"source\":\"iana\"},\"application/vnd.nearst.inv+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nebumind.line\":{\"source\":\"iana\"},\"application/vnd.nervana\":{\"source\":\"iana\"},\"application/vnd.netfpx\":{\"source\":\"iana\"},\"application/vnd.neurolanguage.nlu\":{\"source\":\"iana\",\"extensions\":[\"nlu\"]},\"application/vnd.nimn\":{\"source\":\"iana\"},\"application/vnd.nintendo.nitro.rom\":{\"source\":\"iana\"},\"application/vnd.nintendo.snes.rom\":{\"source\":\"iana\"},\"application/vnd.nitf\":{\"source\":\"iana\",\"extensions\":[\"ntf\",\"nitf\"]},\"application/vnd.noblenet-directory\":{\"source\":\"iana\",\"extensions\":[\"nnd\"]},\"application/vnd.noblenet-sealer\":{\"source\":\"iana\",\"extensions\":[\"nns\"]},\"application/vnd.noblenet-web\":{\"source\":\"iana\",\"extensions\":[\"nnw\"]},\"application/vnd.nokia.catalogs\":{\"source\":\"iana\"},\"application/vnd.nokia.conml+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.conml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.iptv.config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.isds-radio-presets\":{\"source\":\"iana\"},\"application/vnd.nokia.landmark+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.landmark+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.landmarkcollection+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.n-gage.ac+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ac\"]},\"application/vnd.nokia.n-gage.data\":{\"source\":\"iana\",\"extensions\":[\"ngdat\"]},\"application/vnd.nokia.n-gage.symbian.install\":{\"source\":\"iana\",\"extensions\":[\"n-gage\"]},\"application/vnd.nokia.ncd\":{\"source\":\"iana\"},\"application/vnd.nokia.pcd+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.pcd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.radio-preset\":{\"source\":\"iana\",\"extensions\":[\"rpst\"]},\"application/vnd.nokia.radio-presets\":{\"source\":\"iana\",\"extensions\":[\"rpss\"]},\"application/vnd.novadigm.edm\":{\"source\":\"iana\",\"extensions\":[\"edm\"]},\"application/vnd.novadigm.edx\":{\"source\":\"iana\",\"extensions\":[\"edx\"]},\"application/vnd.novadigm.ext\":{\"source\":\"iana\",\"extensions\":[\"ext\"]},\"application/vnd.ntt-local.content-share\":{\"source\":\"iana\"},\"application/vnd.ntt-local.file-transfer\":{\"source\":\"iana\"},\"application/vnd.ntt-local.ogw_remote-access\":{\"source\":\"iana\"},\"application/vnd.ntt-local.sip-ta_remote\":{\"source\":\"iana\"},\"application/vnd.ntt-local.sip-ta_tcp_stream\":{\"source\":\"iana\"},\"application/vnd.oasis.opendocument.chart\":{\"source\":\"iana\",\"extensions\":[\"odc\"]},\"application/vnd.oasis.opendocument.chart-template\":{\"source\":\"iana\",\"extensions\":[\"otc\"]},\"application/vnd.oasis.opendocument.database\":{\"source\":\"iana\",\"extensions\":[\"odb\"]},\"application/vnd.oasis.opendocument.formula\":{\"source\":\"iana\",\"extensions\":[\"odf\"]},\"application/vnd.oasis.opendocument.formula-template\":{\"source\":\"iana\",\"extensions\":[\"odft\"]},\"application/vnd.oasis.opendocument.graphics\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odg\"]},\"application/vnd.oasis.opendocument.graphics-template\":{\"source\":\"iana\",\"extensions\":[\"otg\"]},\"application/vnd.oasis.opendocument.image\":{\"source\":\"iana\",\"extensions\":[\"odi\"]},\"application/vnd.oasis.opendocument.image-template\":{\"source\":\"iana\",\"extensions\":[\"oti\"]},\"application/vnd.oasis.opendocument.presentation\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odp\"]},\"application/vnd.oasis.opendocument.presentation-template\":{\"source\":\"iana\",\"extensions\":[\"otp\"]},\"application/vnd.oasis.opendocument.spreadsheet\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ods\"]},\"application/vnd.oasis.opendocument.spreadsheet-template\":{\"source\":\"iana\",\"extensions\":[\"ots\"]},\"application/vnd.oasis.opendocument.text\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odt\"]},\"application/vnd.oasis.opendocument.text-master\":{\"source\":\"iana\",\"extensions\":[\"odm\"]},\"application/vnd.oasis.opendocument.text-template\":{\"source\":\"iana\",\"extensions\":[\"ott\"]},\"application/vnd.oasis.opendocument.text-web\":{\"source\":\"iana\",\"extensions\":[\"oth\"]},\"application/vnd.obn\":{\"source\":\"iana\"},\"application/vnd.ocf+cbor\":{\"source\":\"iana\"},\"application/vnd.oci.image.manifest.v1+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oftn.l10n+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.contentaccessdownload+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.contentaccessstreaming+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.cspg-hexbinary\":{\"source\":\"iana\"},\"application/vnd.oipf.dae.svg+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.dae.xhtml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.mippvcontrolmessage+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.pae.gem\":{\"source\":\"iana\"},\"application/vnd.oipf.spdiscovery+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.spdlist+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.ueprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.userprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.olpc-sugar\":{\"source\":\"iana\",\"extensions\":[\"xo\"]},\"application/vnd.oma-scws-config\":{\"source\":\"iana\"},\"application/vnd.oma-scws-http-request\":{\"source\":\"iana\"},\"application/vnd.oma-scws-http-response\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.associated-procedure-parameter+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.drm-trigger+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.imd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.ltkm\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.notification+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.provisioningtrigger\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.sgboot\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.sgdd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.sgdu\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.simple-symbol-container\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.smartcard-trigger+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.sprov+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.stkm\":{\"source\":\"iana\"},\"application/vnd.oma.cab-address-book+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-feature-handler+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-pcc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-subs-invite+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-user-prefs+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.dcd\":{\"source\":\"iana\"},\"application/vnd.oma.dcdc\":{\"source\":\"iana\"},\"application/vnd.oma.dd2+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dd2\"]},\"application/vnd.oma.drm.risd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.group-usage-list+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.lwm2m+cbor\":{\"source\":\"iana\"},\"application/vnd.oma.lwm2m+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.lwm2m+tlv\":{\"source\":\"iana\"},\"application/vnd.oma.pal+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.detailed-progress-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.final-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.groups+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.invocation-descriptor+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.optimized-progress-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.push\":{\"source\":\"iana\"},\"application/vnd.oma.scidm.messages+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.xcap-directory+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.omads-email+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omads-file+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omads-folder+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omaloc-supl-init\":{\"source\":\"iana\"},\"application/vnd.onepager\":{\"source\":\"iana\"},\"application/vnd.onepagertamp\":{\"source\":\"iana\"},\"application/vnd.onepagertamx\":{\"source\":\"iana\"},\"application/vnd.onepagertat\":{\"source\":\"iana\"},\"application/vnd.onepagertatp\":{\"source\":\"iana\"},\"application/vnd.onepagertatx\":{\"source\":\"iana\"},\"application/vnd.openblox.game+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"obgx\"]},\"application/vnd.openblox.game-binary\":{\"source\":\"iana\"},\"application/vnd.openeye.oeb\":{\"source\":\"iana\"},\"application/vnd.openofficeorg.extension\":{\"source\":\"apache\",\"extensions\":[\"oxt\"]},\"application/vnd.openstreetmap.data+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"osm\"]},\"application/vnd.opentimestamps.ots\":{\"source\":\"iana\"},\"application/vnd.openxmlformats-officedocument.custom-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawing+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.extended-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pptx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slide\":{\"source\":\"iana\",\"extensions\":[\"sldx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":{\"source\":\"iana\",\"extensions\":[\"ppsx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.template\":{\"source\":\"iana\",\"extensions\":[\"potx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xlsx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":{\"source\":\"iana\",\"extensions\":[\"xltx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.theme+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.themeoverride+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.vmldrawing\":{\"source\":\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"docx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":{\"source\":\"iana\",\"extensions\":[\"dotx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.core-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.relationships+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oracle.resource+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.orange.indata\":{\"source\":\"iana\"},\"application/vnd.osa.netdeploy\":{\"source\":\"iana\"},\"application/vnd.osgeo.mapguide.package\":{\"source\":\"iana\",\"extensions\":[\"mgp\"]},\"application/vnd.osgi.bundle\":{\"source\":\"iana\"},\"application/vnd.osgi.dp\":{\"source\":\"iana\",\"extensions\":[\"dp\"]},\"application/vnd.osgi.subsystem\":{\"source\":\"iana\",\"extensions\":[\"esa\"]},\"application/vnd.otps.ct-kip+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oxli.countgraph\":{\"source\":\"iana\"},\"application/vnd.pagerduty+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.palm\":{\"source\":\"iana\",\"extensions\":[\"pdb\",\"pqa\",\"oprc\"]},\"application/vnd.panoply\":{\"source\":\"iana\"},\"application/vnd.paos.xml\":{\"source\":\"iana\"},\"application/vnd.patentdive\":{\"source\":\"iana\"},\"application/vnd.patientecommsdoc\":{\"source\":\"iana\"},\"application/vnd.pawaafile\":{\"source\":\"iana\",\"extensions\":[\"paw\"]},\"application/vnd.pcos\":{\"source\":\"iana\"},\"application/vnd.pg.format\":{\"source\":\"iana\",\"extensions\":[\"str\"]},\"application/vnd.pg.osasli\":{\"source\":\"iana\",\"extensions\":[\"ei6\"]},\"application/vnd.piaccess.application-licence\":{\"source\":\"iana\"},\"application/vnd.picsel\":{\"source\":\"iana\",\"extensions\":[\"efif\"]},\"application/vnd.pmi.widget\":{\"source\":\"iana\",\"extensions\":[\"wg\"]},\"application/vnd.poc.group-advertisement+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.pocketlearn\":{\"source\":\"iana\",\"extensions\":[\"plf\"]},\"application/vnd.powerbuilder6\":{\"source\":\"iana\",\"extensions\":[\"pbd\"]},\"application/vnd.powerbuilder6-s\":{\"source\":\"iana\"},\"application/vnd.powerbuilder7\":{\"source\":\"iana\"},\"application/vnd.powerbuilder7-s\":{\"source\":\"iana\"},\"application/vnd.powerbuilder75\":{\"source\":\"iana\"},\"application/vnd.powerbuilder75-s\":{\"source\":\"iana\"},\"application/vnd.preminet\":{\"source\":\"iana\"},\"application/vnd.previewsystems.box\":{\"source\":\"iana\",\"extensions\":[\"box\"]},\"application/vnd.proteus.magazine\":{\"source\":\"iana\",\"extensions\":[\"mgz\"]},\"application/vnd.psfs\":{\"source\":\"iana\"},\"application/vnd.publishare-delta-tree\":{\"source\":\"iana\",\"extensions\":[\"qps\"]},\"application/vnd.pvi.ptid1\":{\"source\":\"iana\",\"extensions\":[\"ptid\"]},\"application/vnd.pwg-multiplexed\":{\"source\":\"iana\"},\"application/vnd.pwg-xhtml-print+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.qualcomm.brew-app-res\":{\"source\":\"iana\"},\"application/vnd.quarantainenet\":{\"source\":\"iana\"},\"application/vnd.quark.quarkxpress\":{\"source\":\"iana\",\"extensions\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]},\"application/vnd.quobject-quoxdocument\":{\"source\":\"iana\"},\"application/vnd.radisys.moml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-conf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-conn+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-dialog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-stream+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-conf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-base+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-fax-detect+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-group+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-speech+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-transform+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.rainstor.data\":{\"source\":\"iana\"},\"application/vnd.rapid\":{\"source\":\"iana\"},\"application/vnd.rar\":{\"source\":\"iana\",\"extensions\":[\"rar\"]},\"application/vnd.realvnc.bed\":{\"source\":\"iana\",\"extensions\":[\"bed\"]},\"application/vnd.recordare.musicxml\":{\"source\":\"iana\",\"extensions\":[\"mxl\"]},\"application/vnd.recordare.musicxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"musicxml\"]},\"application/vnd.renlearn.rlprint\":{\"source\":\"iana\"},\"application/vnd.resilient.logic\":{\"source\":\"iana\"},\"application/vnd.restful+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.rig.cryptonote\":{\"source\":\"iana\",\"extensions\":[\"cryptonote\"]},\"application/vnd.rim.cod\":{\"source\":\"apache\",\"extensions\":[\"cod\"]},\"application/vnd.rn-realmedia\":{\"source\":\"apache\",\"extensions\":[\"rm\"]},\"application/vnd.rn-realmedia-vbr\":{\"source\":\"apache\",\"extensions\":[\"rmvb\"]},\"application/vnd.route66.link66+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"link66\"]},\"application/vnd.rs-274x\":{\"source\":\"iana\"},\"application/vnd.ruckus.download\":{\"source\":\"iana\"},\"application/vnd.s3sms\":{\"source\":\"iana\"},\"application/vnd.sailingtracker.track\":{\"source\":\"iana\",\"extensions\":[\"st\"]},\"application/vnd.sar\":{\"source\":\"iana\"},\"application/vnd.sbm.cid\":{\"source\":\"iana\"},\"application/vnd.sbm.mid2\":{\"source\":\"iana\"},\"application/vnd.scribus\":{\"source\":\"iana\"},\"application/vnd.sealed.3df\":{\"source\":\"iana\"},\"application/vnd.sealed.csf\":{\"source\":\"iana\"},\"application/vnd.sealed.doc\":{\"source\":\"iana\"},\"application/vnd.sealed.eml\":{\"source\":\"iana\"},\"application/vnd.sealed.mht\":{\"source\":\"iana\"},\"application/vnd.sealed.net\":{\"source\":\"iana\"},\"application/vnd.sealed.ppt\":{\"source\":\"iana\"},\"application/vnd.sealed.tiff\":{\"source\":\"iana\"},\"application/vnd.sealed.xls\":{\"source\":\"iana\"},\"application/vnd.sealedmedia.softseal.html\":{\"source\":\"iana\"},\"application/vnd.sealedmedia.softseal.pdf\":{\"source\":\"iana\"},\"application/vnd.seemail\":{\"source\":\"iana\",\"extensions\":[\"see\"]},\"application/vnd.seis+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.sema\":{\"source\":\"iana\",\"extensions\":[\"sema\"]},\"application/vnd.semd\":{\"source\":\"iana\",\"extensions\":[\"semd\"]},\"application/vnd.semf\":{\"source\":\"iana\",\"extensions\":[\"semf\"]},\"application/vnd.shade-save-file\":{\"source\":\"iana\"},\"application/vnd.shana.informed.formdata\":{\"source\":\"iana\",\"extensions\":[\"ifm\"]},\"application/vnd.shana.informed.formtemplate\":{\"source\":\"iana\",\"extensions\":[\"itp\"]},\"application/vnd.shana.informed.interchange\":{\"source\":\"iana\",\"extensions\":[\"iif\"]},\"application/vnd.shana.informed.package\":{\"source\":\"iana\",\"extensions\":[\"ipk\"]},\"application/vnd.shootproof+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.shopkick+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.shp\":{\"source\":\"iana\"},\"application/vnd.shx\":{\"source\":\"iana\"},\"application/vnd.sigrok.session\":{\"source\":\"iana\"},\"application/vnd.simtech-mindmapper\":{\"source\":\"iana\",\"extensions\":[\"twd\",\"twds\"]},\"application/vnd.siren+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.smaf\":{\"source\":\"iana\",\"extensions\":[\"mmf\"]},\"application/vnd.smart.notebook\":{\"source\":\"iana\"},\"application/vnd.smart.teacher\":{\"source\":\"iana\",\"extensions\":[\"teacher\"]},\"application/vnd.snesdev-page-table\":{\"source\":\"iana\"},\"application/vnd.software602.filler.form+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"fo\"]},\"application/vnd.software602.filler.form-xml-zip\":{\"source\":\"iana\"},\"application/vnd.solent.sdkm+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sdkm\",\"sdkd\"]},\"application/vnd.spotfire.dxp\":{\"source\":\"iana\",\"extensions\":[\"dxp\"]},\"application/vnd.spotfire.sfs\":{\"source\":\"iana\",\"extensions\":[\"sfs\"]},\"application/vnd.sqlite3\":{\"source\":\"iana\"},\"application/vnd.sss-cod\":{\"source\":\"iana\"},\"application/vnd.sss-dtf\":{\"source\":\"iana\"},\"application/vnd.sss-ntf\":{\"source\":\"iana\"},\"application/vnd.stardivision.calc\":{\"source\":\"apache\",\"extensions\":[\"sdc\"]},\"application/vnd.stardivision.draw\":{\"source\":\"apache\",\"extensions\":[\"sda\"]},\"application/vnd.stardivision.impress\":{\"source\":\"apache\",\"extensions\":[\"sdd\"]},\"application/vnd.stardivision.math\":{\"source\":\"apache\",\"extensions\":[\"smf\"]},\"application/vnd.stardivision.writer\":{\"source\":\"apache\",\"extensions\":[\"sdw\",\"vor\"]},\"application/vnd.stardivision.writer-global\":{\"source\":\"apache\",\"extensions\":[\"sgl\"]},\"application/vnd.stepmania.package\":{\"source\":\"iana\",\"extensions\":[\"smzip\"]},\"application/vnd.stepmania.stepchart\":{\"source\":\"iana\",\"extensions\":[\"sm\"]},\"application/vnd.street-stream\":{\"source\":\"iana\"},\"application/vnd.sun.wadl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wadl\"]},\"application/vnd.sun.xml.calc\":{\"source\":\"apache\",\"extensions\":[\"sxc\"]},\"application/vnd.sun.xml.calc.template\":{\"source\":\"apache\",\"extensions\":[\"stc\"]},\"application/vnd.sun.xml.draw\":{\"source\":\"apache\",\"extensions\":[\"sxd\"]},\"application/vnd.sun.xml.draw.template\":{\"source\":\"apache\",\"extensions\":[\"std\"]},\"application/vnd.sun.xml.impress\":{\"source\":\"apache\",\"extensions\":[\"sxi\"]},\"application/vnd.sun.xml.impress.template\":{\"source\":\"apache\",\"extensions\":[\"sti\"]},\"application/vnd.sun.xml.math\":{\"source\":\"apache\",\"extensions\":[\"sxm\"]},\"application/vnd.sun.xml.writer\":{\"source\":\"apache\",\"extensions\":[\"sxw\"]},\"application/vnd.sun.xml.writer.global\":{\"source\":\"apache\",\"extensions\":[\"sxg\"]},\"application/vnd.sun.xml.writer.template\":{\"source\":\"apache\",\"extensions\":[\"stw\"]},\"application/vnd.sus-calendar\":{\"source\":\"iana\",\"extensions\":[\"sus\",\"susp\"]},\"application/vnd.svd\":{\"source\":\"iana\",\"extensions\":[\"svd\"]},\"application/vnd.swiftview-ics\":{\"source\":\"iana\"},\"application/vnd.sycle+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.syft+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.symbian.install\":{\"source\":\"apache\",\"extensions\":[\"sis\",\"sisx\"]},\"application/vnd.syncml+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"xsm\"]},\"application/vnd.syncml.dm+wbxml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"bdm\"]},\"application/vnd.syncml.dm+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"xdm\"]},\"application/vnd.syncml.dm.notification\":{\"source\":\"iana\"},\"application/vnd.syncml.dmddf+wbxml\":{\"source\":\"iana\"},\"application/vnd.syncml.dmddf+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"ddf\"]},\"application/vnd.syncml.dmtnds+wbxml\":{\"source\":\"iana\"},\"application/vnd.syncml.dmtnds+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.syncml.ds.notification\":{\"source\":\"iana\"},\"application/vnd.tableschema+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tao.intent-module-archive\":{\"source\":\"iana\",\"extensions\":[\"tao\"]},\"application/vnd.tcpdump.pcap\":{\"source\":\"iana\",\"extensions\":[\"pcap\",\"cap\",\"dmp\"]},\"application/vnd.think-cell.ppttc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tmd.mediaflex.api+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tml\":{\"source\":\"iana\"},\"application/vnd.tmobile-livetv\":{\"source\":\"iana\",\"extensions\":[\"tmo\"]},\"application/vnd.tri.onesource\":{\"source\":\"iana\"},\"application/vnd.trid.tpt\":{\"source\":\"iana\",\"extensions\":[\"tpt\"]},\"application/vnd.triscape.mxs\":{\"source\":\"iana\",\"extensions\":[\"mxs\"]},\"application/vnd.trueapp\":{\"source\":\"iana\",\"extensions\":[\"tra\"]},\"application/vnd.truedoc\":{\"source\":\"iana\"},\"application/vnd.ubisoft.webplayer\":{\"source\":\"iana\"},\"application/vnd.ufdl\":{\"source\":\"iana\",\"extensions\":[\"ufd\",\"ufdl\"]},\"application/vnd.uiq.theme\":{\"source\":\"iana\",\"extensions\":[\"utz\"]},\"application/vnd.umajin\":{\"source\":\"iana\",\"extensions\":[\"umj\"]},\"application/vnd.unity\":{\"source\":\"iana\",\"extensions\":[\"unityweb\"]},\"application/vnd.uoml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uoml\"]},\"application/vnd.uplanet.alert\":{\"source\":\"iana\"},\"application/vnd.uplanet.alert-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.bearer-choice\":{\"source\":\"iana\"},\"application/vnd.uplanet.bearer-choice-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.cacheop\":{\"source\":\"iana\"},\"application/vnd.uplanet.cacheop-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.channel\":{\"source\":\"iana\"},\"application/vnd.uplanet.channel-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.list\":{\"source\":\"iana\"},\"application/vnd.uplanet.list-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.listcmd\":{\"source\":\"iana\"},\"application/vnd.uplanet.listcmd-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.signal\":{\"source\":\"iana\"},\"application/vnd.uri-map\":{\"source\":\"iana\"},\"application/vnd.valve.source.material\":{\"source\":\"iana\"},\"application/vnd.vcx\":{\"source\":\"iana\",\"extensions\":[\"vcx\"]},\"application/vnd.vd-study\":{\"source\":\"iana\"},\"application/vnd.vectorworks\":{\"source\":\"iana\"},\"application/vnd.vel+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.verimatrix.vcas\":{\"source\":\"iana\"},\"application/vnd.veritone.aion+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.veryant.thin\":{\"source\":\"iana\"},\"application/vnd.ves.encrypted\":{\"source\":\"iana\"},\"application/vnd.vidsoft.vidconference\":{\"source\":\"iana\"},\"application/vnd.visio\":{\"source\":\"iana\",\"extensions\":[\"vsd\",\"vst\",\"vss\",\"vsw\"]},\"application/vnd.visionary\":{\"source\":\"iana\",\"extensions\":[\"vis\"]},\"application/vnd.vividence.scriptfile\":{\"source\":\"iana\"},\"application/vnd.vsf\":{\"source\":\"iana\",\"extensions\":[\"vsf\"]},\"application/vnd.wap.sic\":{\"source\":\"iana\"},\"application/vnd.wap.slc\":{\"source\":\"iana\"},\"application/vnd.wap.wbxml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"wbxml\"]},\"application/vnd.wap.wmlc\":{\"source\":\"iana\",\"extensions\":[\"wmlc\"]},\"application/vnd.wap.wmlscriptc\":{\"source\":\"iana\",\"extensions\":[\"wmlsc\"]},\"application/vnd.webturbo\":{\"source\":\"iana\",\"extensions\":[\"wtb\"]},\"application/vnd.wfa.dpp\":{\"source\":\"iana\"},\"application/vnd.wfa.p2p\":{\"source\":\"iana\"},\"application/vnd.wfa.wsc\":{\"source\":\"iana\"},\"application/vnd.windows.devicepairing\":{\"source\":\"iana\"},\"application/vnd.wmc\":{\"source\":\"iana\"},\"application/vnd.wmf.bootstrap\":{\"source\":\"iana\"},\"application/vnd.wolfram.mathematica\":{\"source\":\"iana\"},\"application/vnd.wolfram.mathematica.package\":{\"source\":\"iana\"},\"application/vnd.wolfram.player\":{\"source\":\"iana\",\"extensions\":[\"nbp\"]},\"application/vnd.wordperfect\":{\"source\":\"iana\",\"extensions\":[\"wpd\"]},\"application/vnd.wqd\":{\"source\":\"iana\",\"extensions\":[\"wqd\"]},\"application/vnd.wrq-hp3000-labelled\":{\"source\":\"iana\"},\"application/vnd.wt.stf\":{\"source\":\"iana\",\"extensions\":[\"stf\"]},\"application/vnd.wv.csp+wbxml\":{\"source\":\"iana\"},\"application/vnd.wv.csp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.wv.ssp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xacml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xara\":{\"source\":\"iana\",\"extensions\":[\"xar\"]},\"application/vnd.xfdl\":{\"source\":\"iana\",\"extensions\":[\"xfdl\"]},\"application/vnd.xfdl.webform\":{\"source\":\"iana\"},\"application/vnd.xmi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xmpie.cpkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.dpkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.plan\":{\"source\":\"iana\"},\"application/vnd.xmpie.ppkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.xlim\":{\"source\":\"iana\"},\"application/vnd.yamaha.hv-dic\":{\"source\":\"iana\",\"extensions\":[\"hvd\"]},\"application/vnd.yamaha.hv-script\":{\"source\":\"iana\",\"extensions\":[\"hvs\"]},\"application/vnd.yamaha.hv-voice\":{\"source\":\"iana\",\"extensions\":[\"hvp\"]},\"application/vnd.yamaha.openscoreformat\":{\"source\":\"iana\",\"extensions\":[\"osf\"]},\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"osfpvg\"]},\"application/vnd.yamaha.remote-setup\":{\"source\":\"iana\"},\"application/vnd.yamaha.smaf-audio\":{\"source\":\"iana\",\"extensions\":[\"saf\"]},\"application/vnd.yamaha.smaf-phrase\":{\"source\":\"iana\",\"extensions\":[\"spf\"]},\"application/vnd.yamaha.through-ngn\":{\"source\":\"iana\"},\"application/vnd.yamaha.tunnel-udpencap\":{\"source\":\"iana\"},\"application/vnd.yaoweme\":{\"source\":\"iana\"},\"application/vnd.yellowriver-custom-menu\":{\"source\":\"iana\",\"extensions\":[\"cmp\"]},\"application/vnd.youtube.yt\":{\"source\":\"iana\"},\"application/vnd.zul\":{\"source\":\"iana\",\"extensions\":[\"zir\",\"zirz\"]},\"application/vnd.zzazz.deck+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"zaz\"]},\"application/voicexml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"vxml\"]},\"application/voucher-cms+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vq-rtcpxr\":{\"source\":\"iana\"},\"application/wasm\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wasm\"]},\"application/watcherinfo+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wif\"]},\"application/webpush-options+json\":{\"source\":\"iana\",\"compressible\":true},\"application/whoispp-query\":{\"source\":\"iana\"},\"application/whoispp-response\":{\"source\":\"iana\"},\"application/widget\":{\"source\":\"iana\",\"extensions\":[\"wgt\"]},\"application/winhlp\":{\"source\":\"apache\",\"extensions\":[\"hlp\"]},\"application/wita\":{\"source\":\"iana\"},\"application/wordperfect5.1\":{\"source\":\"iana\"},\"application/wsdl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wsdl\"]},\"application/wspolicy+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wspolicy\"]},\"application/x-7z-compressed\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"7z\"]},\"application/x-abiword\":{\"source\":\"apache\",\"extensions\":[\"abw\"]},\"application/x-ace-compressed\":{\"source\":\"apache\",\"extensions\":[\"ace\"]},\"application/x-amf\":{\"source\":\"apache\"},\"application/x-apple-diskimage\":{\"source\":\"apache\",\"extensions\":[\"dmg\"]},\"application/x-arj\":{\"compressible\":false,\"extensions\":[\"arj\"]},\"application/x-authorware-bin\":{\"source\":\"apache\",\"extensions\":[\"aab\",\"x32\",\"u32\",\"vox\"]},\"application/x-authorware-map\":{\"source\":\"apache\",\"extensions\":[\"aam\"]},\"application/x-authorware-seg\":{\"source\":\"apache\",\"extensions\":[\"aas\"]},\"application/x-bcpio\":{\"source\":\"apache\",\"extensions\":[\"bcpio\"]},\"application/x-bdoc\":{\"compressible\":false,\"extensions\":[\"bdoc\"]},\"application/x-bittorrent\":{\"source\":\"apache\",\"extensions\":[\"torrent\"]},\"application/x-blorb\":{\"source\":\"apache\",\"extensions\":[\"blb\",\"blorb\"]},\"application/x-bzip\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"bz\"]},\"application/x-bzip2\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"bz2\",\"boz\"]},\"application/x-cbr\":{\"source\":\"apache\",\"extensions\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]},\"application/x-cdlink\":{\"source\":\"apache\",\"extensions\":[\"vcd\"]},\"application/x-cfs-compressed\":{\"source\":\"apache\",\"extensions\":[\"cfs\"]},\"application/x-chat\":{\"source\":\"apache\",\"extensions\":[\"chat\"]},\"application/x-chess-pgn\":{\"source\":\"apache\",\"extensions\":[\"pgn\"]},\"application/x-chrome-extension\":{\"extensions\":[\"crx\"]},\"application/x-cocoa\":{\"source\":\"nginx\",\"extensions\":[\"cco\"]},\"application/x-compress\":{\"source\":\"apache\"},\"application/x-conference\":{\"source\":\"apache\",\"extensions\":[\"nsc\"]},\"application/x-cpio\":{\"source\":\"apache\",\"extensions\":[\"cpio\"]},\"application/x-csh\":{\"source\":\"apache\",\"extensions\":[\"csh\"]},\"application/x-deb\":{\"compressible\":false},\"application/x-debian-package\":{\"source\":\"apache\",\"extensions\":[\"deb\",\"udeb\"]},\"application/x-dgc-compressed\":{\"source\":\"apache\",\"extensions\":[\"dgc\"]},\"application/x-director\":{\"source\":\"apache\",\"extensions\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]},\"application/x-doom\":{\"source\":\"apache\",\"extensions\":[\"wad\"]},\"application/x-dtbncx+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ncx\"]},\"application/x-dtbook+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"dtb\"]},\"application/x-dtbresource+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"res\"]},\"application/x-dvi\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"dvi\"]},\"application/x-envoy\":{\"source\":\"apache\",\"extensions\":[\"evy\"]},\"application/x-eva\":{\"source\":\"apache\",\"extensions\":[\"eva\"]},\"application/x-font-bdf\":{\"source\":\"apache\",\"extensions\":[\"bdf\"]},\"application/x-font-dos\":{\"source\":\"apache\"},\"application/x-font-framemaker\":{\"source\":\"apache\"},\"application/x-font-ghostscript\":{\"source\":\"apache\",\"extensions\":[\"gsf\"]},\"application/x-font-libgrx\":{\"source\":\"apache\"},\"application/x-font-linux-psf\":{\"source\":\"apache\",\"extensions\":[\"psf\"]},\"application/x-font-pcf\":{\"source\":\"apache\",\"extensions\":[\"pcf\"]},\"application/x-font-snf\":{\"source\":\"apache\",\"extensions\":[\"snf\"]},\"application/x-font-speedo\":{\"source\":\"apache\"},\"application/x-font-sunos-news\":{\"source\":\"apache\"},\"application/x-font-type1\":{\"source\":\"apache\",\"extensions\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"]},\"application/x-font-vfont\":{\"source\":\"apache\"},\"application/x-freearc\":{\"source\":\"apache\",\"extensions\":[\"arc\"]},\"application/x-futuresplash\":{\"source\":\"apache\",\"extensions\":[\"spl\"]},\"application/x-gca-compressed\":{\"source\":\"apache\",\"extensions\":[\"gca\"]},\"application/x-glulx\":{\"source\":\"apache\",\"extensions\":[\"ulx\"]},\"application/x-gnumeric\":{\"source\":\"apache\",\"extensions\":[\"gnumeric\"]},\"application/x-gramps-xml\":{\"source\":\"apache\",\"extensions\":[\"gramps\"]},\"application/x-gtar\":{\"source\":\"apache\",\"extensions\":[\"gtar\"]},\"application/x-gzip\":{\"source\":\"apache\"},\"application/x-hdf\":{\"source\":\"apache\",\"extensions\":[\"hdf\"]},\"application/x-httpd-php\":{\"compressible\":true,\"extensions\":[\"php\"]},\"application/x-install-instructions\":{\"source\":\"apache\",\"extensions\":[\"install\"]},\"application/x-iso9660-image\":{\"source\":\"apache\",\"extensions\":[\"iso\"]},\"application/x-iwork-keynote-sffkey\":{\"extensions\":[\"key\"]},\"application/x-iwork-numbers-sffnumbers\":{\"extensions\":[\"numbers\"]},\"application/x-iwork-pages-sffpages\":{\"extensions\":[\"pages\"]},\"application/x-java-archive-diff\":{\"source\":\"nginx\",\"extensions\":[\"jardiff\"]},\"application/x-java-jnlp-file\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"jnlp\"]},\"application/x-javascript\":{\"compressible\":true},\"application/x-keepass2\":{\"extensions\":[\"kdbx\"]},\"application/x-latex\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"latex\"]},\"application/x-lua-bytecode\":{\"extensions\":[\"luac\"]},\"application/x-lzh-compressed\":{\"source\":\"apache\",\"extensions\":[\"lzh\",\"lha\"]},\"application/x-makeself\":{\"source\":\"nginx\",\"extensions\":[\"run\"]},\"application/x-mie\":{\"source\":\"apache\",\"extensions\":[\"mie\"]},\"application/x-mobipocket-ebook\":{\"source\":\"apache\",\"extensions\":[\"prc\",\"mobi\"]},\"application/x-mpegurl\":{\"compressible\":false},\"application/x-ms-application\":{\"source\":\"apache\",\"extensions\":[\"application\"]},\"application/x-ms-shortcut\":{\"source\":\"apache\",\"extensions\":[\"lnk\"]},\"application/x-ms-wmd\":{\"source\":\"apache\",\"extensions\":[\"wmd\"]},\"application/x-ms-wmz\":{\"source\":\"apache\",\"extensions\":[\"wmz\"]},\"application/x-ms-xbap\":{\"source\":\"apache\",\"extensions\":[\"xbap\"]},\"application/x-msaccess\":{\"source\":\"apache\",\"extensions\":[\"mdb\"]},\"application/x-msbinder\":{\"source\":\"apache\",\"extensions\":[\"obd\"]},\"application/x-mscardfile\":{\"source\":\"apache\",\"extensions\":[\"crd\"]},\"application/x-msclip\":{\"source\":\"apache\",\"extensions\":[\"clp\"]},\"application/x-msdos-program\":{\"extensions\":[\"exe\"]},\"application/x-msdownload\":{\"source\":\"apache\",\"extensions\":[\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]},\"application/x-msmediaview\":{\"source\":\"apache\",\"extensions\":[\"mvb\",\"m13\",\"m14\"]},\"application/x-msmetafile\":{\"source\":\"apache\",\"extensions\":[\"wmf\",\"wmz\",\"emf\",\"emz\"]},\"application/x-msmoney\":{\"source\":\"apache\",\"extensions\":[\"mny\"]},\"application/x-mspublisher\":{\"source\":\"apache\",\"extensions\":[\"pub\"]},\"application/x-msschedule\":{\"source\":\"apache\",\"extensions\":[\"scd\"]},\"application/x-msterminal\":{\"source\":\"apache\",\"extensions\":[\"trm\"]},\"application/x-mswrite\":{\"source\":\"apache\",\"extensions\":[\"wri\"]},\"application/x-netcdf\":{\"source\":\"apache\",\"extensions\":[\"nc\",\"cdf\"]},\"application/x-ns-proxy-autoconfig\":{\"compressible\":true,\"extensions\":[\"pac\"]},\"application/x-nzb\":{\"source\":\"apache\",\"extensions\":[\"nzb\"]},\"application/x-perl\":{\"source\":\"nginx\",\"extensions\":[\"pl\",\"pm\"]},\"application/x-pilot\":{\"source\":\"nginx\",\"extensions\":[\"prc\",\"pdb\"]},\"application/x-pkcs12\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"p12\",\"pfx\"]},\"application/x-pkcs7-certificates\":{\"source\":\"apache\",\"extensions\":[\"p7b\",\"spc\"]},\"application/x-pkcs7-certreqresp\":{\"source\":\"apache\",\"extensions\":[\"p7r\"]},\"application/x-pki-message\":{\"source\":\"iana\"},\"application/x-rar-compressed\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"rar\"]},\"application/x-redhat-package-manager\":{\"source\":\"nginx\",\"extensions\":[\"rpm\"]},\"application/x-research-info-systems\":{\"source\":\"apache\",\"extensions\":[\"ris\"]},\"application/x-sea\":{\"source\":\"nginx\",\"extensions\":[\"sea\"]},\"application/x-sh\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"sh\"]},\"application/x-shar\":{\"source\":\"apache\",\"extensions\":[\"shar\"]},\"application/x-shockwave-flash\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"swf\"]},\"application/x-silverlight-app\":{\"source\":\"apache\",\"extensions\":[\"xap\"]},\"application/x-sql\":{\"source\":\"apache\",\"extensions\":[\"sql\"]},\"application/x-stuffit\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"sit\"]},\"application/x-stuffitx\":{\"source\":\"apache\",\"extensions\":[\"sitx\"]},\"application/x-subrip\":{\"source\":\"apache\",\"extensions\":[\"srt\"]},\"application/x-sv4cpio\":{\"source\":\"apache\",\"extensions\":[\"sv4cpio\"]},\"application/x-sv4crc\":{\"source\":\"apache\",\"extensions\":[\"sv4crc\"]},\"application/x-t3vm-image\":{\"source\":\"apache\",\"extensions\":[\"t3\"]},\"application/x-tads\":{\"source\":\"apache\",\"extensions\":[\"gam\"]},\"application/x-tar\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"tar\"]},\"application/x-tcl\":{\"source\":\"apache\",\"extensions\":[\"tcl\",\"tk\"]},\"application/x-tex\":{\"source\":\"apache\",\"extensions\":[\"tex\"]},\"application/x-tex-tfm\":{\"source\":\"apache\",\"extensions\":[\"tfm\"]},\"application/x-texinfo\":{\"source\":\"apache\",\"extensions\":[\"texinfo\",\"texi\"]},\"application/x-tgif\":{\"source\":\"apache\",\"extensions\":[\"obj\"]},\"application/x-ustar\":{\"source\":\"apache\",\"extensions\":[\"ustar\"]},\"application/x-virtualbox-hdd\":{\"compressible\":true,\"extensions\":[\"hdd\"]},\"application/x-virtualbox-ova\":{\"compressible\":true,\"extensions\":[\"ova\"]},\"application/x-virtualbox-ovf\":{\"compressible\":true,\"extensions\":[\"ovf\"]},\"application/x-virtualbox-vbox\":{\"compressible\":true,\"extensions\":[\"vbox\"]},\"application/x-virtualbox-vbox-extpack\":{\"compressible\":false,\"extensions\":[\"vbox-extpack\"]},\"application/x-virtualbox-vdi\":{\"compressible\":true,\"extensions\":[\"vdi\"]},\"application/x-virtualbox-vhd\":{\"compressible\":true,\"extensions\":[\"vhd\"]},\"application/x-virtualbox-vmdk\":{\"compressible\":true,\"extensions\":[\"vmdk\"]},\"application/x-wais-source\":{\"source\":\"apache\",\"extensions\":[\"src\"]},\"application/x-web-app-manifest+json\":{\"compressible\":true,\"extensions\":[\"webapp\"]},\"application/x-www-form-urlencoded\":{\"source\":\"iana\",\"compressible\":true},\"application/x-x509-ca-cert\":{\"source\":\"iana\",\"extensions\":[\"der\",\"crt\",\"pem\"]},\"application/x-x509-ca-ra-cert\":{\"source\":\"iana\"},\"application/x-x509-next-ca-cert\":{\"source\":\"iana\"},\"application/x-xfig\":{\"source\":\"apache\",\"extensions\":[\"fig\"]},\"application/x-xliff+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xlf\"]},\"application/x-xpinstall\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"xpi\"]},\"application/x-xz\":{\"source\":\"apache\",\"extensions\":[\"xz\"]},\"application/x-zmachine\":{\"source\":\"apache\",\"extensions\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]},\"application/x400-bp\":{\"source\":\"iana\"},\"application/xacml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xaml+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xaml\"]},\"application/xcap-att+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xav\"]},\"application/xcap-caps+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xca\"]},\"application/xcap-diff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdf\"]},\"application/xcap-el+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xel\"]},\"application/xcap-error+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xcap-ns+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xns\"]},\"application/xcon-conference-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xcon-conference-info-diff+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xenc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xenc\"]},\"application/xhtml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xhtml\",\"xht\"]},\"application/xhtml-voice+xml\":{\"source\":\"apache\",\"compressible\":true},\"application/xliff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xlf\"]},\"application/xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xml\",\"xsl\",\"xsd\",\"rng\"]},\"application/xml-dtd\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dtd\"]},\"application/xml-external-parsed-entity\":{\"source\":\"iana\"},\"application/xml-patch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xmpp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xop+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xop\"]},\"application/xproc+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xpl\"]},\"application/xslt+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xsl\",\"xslt\"]},\"application/xspf+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xspf\"]},\"application/xv+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]},\"application/yang\":{\"source\":\"iana\",\"extensions\":[\"yang\"]},\"application/yang-data+json\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-data+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-patch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/yin+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"yin\"]},\"application/zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"zip\"]},\"application/zlib\":{\"source\":\"iana\"},\"application/zstd\":{\"source\":\"iana\"},\"audio/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"audio/32kadpcm\":{\"source\":\"iana\"},\"audio/3gpp\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"3gpp\"]},\"audio/3gpp2\":{\"source\":\"iana\"},\"audio/aac\":{\"source\":\"iana\"},\"audio/ac3\":{\"source\":\"iana\"},\"audio/adpcm\":{\"source\":\"apache\",\"extensions\":[\"adp\"]},\"audio/amr\":{\"source\":\"iana\",\"extensions\":[\"amr\"]},\"audio/amr-wb\":{\"source\":\"iana\"},\"audio/amr-wb+\":{\"source\":\"iana\"},\"audio/aptx\":{\"source\":\"iana\"},\"audio/asc\":{\"source\":\"iana\"},\"audio/atrac-advanced-lossless\":{\"source\":\"iana\"},\"audio/atrac-x\":{\"source\":\"iana\"},\"audio/atrac3\":{\"source\":\"iana\"},\"audio/basic\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"au\",\"snd\"]},\"audio/bv16\":{\"source\":\"iana\"},\"audio/bv32\":{\"source\":\"iana\"},\"audio/clearmode\":{\"source\":\"iana\"},\"audio/cn\":{\"source\":\"iana\"},\"audio/dat12\":{\"source\":\"iana\"},\"audio/dls\":{\"source\":\"iana\"},\"audio/dsr-es201108\":{\"source\":\"iana\"},\"audio/dsr-es202050\":{\"source\":\"iana\"},\"audio/dsr-es202211\":{\"source\":\"iana\"},\"audio/dsr-es202212\":{\"source\":\"iana\"},\"audio/dv\":{\"source\":\"iana\"},\"audio/dvi4\":{\"source\":\"iana\"},\"audio/eac3\":{\"source\":\"iana\"},\"audio/encaprtp\":{\"source\":\"iana\"},\"audio/evrc\":{\"source\":\"iana\"},\"audio/evrc-qcp\":{\"source\":\"iana\"},\"audio/evrc0\":{\"source\":\"iana\"},\"audio/evrc1\":{\"source\":\"iana\"},\"audio/evrcb\":{\"source\":\"iana\"},\"audio/evrcb0\":{\"source\":\"iana\"},\"audio/evrcb1\":{\"source\":\"iana\"},\"audio/evrcnw\":{\"source\":\"iana\"},\"audio/evrcnw0\":{\"source\":\"iana\"},\"audio/evrcnw1\":{\"source\":\"iana\"},\"audio/evrcwb\":{\"source\":\"iana\"},\"audio/evrcwb0\":{\"source\":\"iana\"},\"audio/evrcwb1\":{\"source\":\"iana\"},\"audio/evs\":{\"source\":\"iana\"},\"audio/flexfec\":{\"source\":\"iana\"},\"audio/fwdred\":{\"source\":\"iana\"},\"audio/g711-0\":{\"source\":\"iana\"},\"audio/g719\":{\"source\":\"iana\"},\"audio/g722\":{\"source\":\"iana\"},\"audio/g7221\":{\"source\":\"iana\"},\"audio/g723\":{\"source\":\"iana\"},\"audio/g726-16\":{\"source\":\"iana\"},\"audio/g726-24\":{\"source\":\"iana\"},\"audio/g726-32\":{\"source\":\"iana\"},\"audio/g726-40\":{\"source\":\"iana\"},\"audio/g728\":{\"source\":\"iana\"},\"audio/g729\":{\"source\":\"iana\"},\"audio/g7291\":{\"source\":\"iana\"},\"audio/g729d\":{\"source\":\"iana\"},\"audio/g729e\":{\"source\":\"iana\"},\"audio/gsm\":{\"source\":\"iana\"},\"audio/gsm-efr\":{\"source\":\"iana\"},\"audio/gsm-hr-08\":{\"source\":\"iana\"},\"audio/ilbc\":{\"source\":\"iana\"},\"audio/ip-mr_v2.5\":{\"source\":\"iana\"},\"audio/isac\":{\"source\":\"apache\"},\"audio/l16\":{\"source\":\"iana\"},\"audio/l20\":{\"source\":\"iana\"},\"audio/l24\":{\"source\":\"iana\",\"compressible\":false},\"audio/l8\":{\"source\":\"iana\"},\"audio/lpc\":{\"source\":\"iana\"},\"audio/melp\":{\"source\":\"iana\"},\"audio/melp1200\":{\"source\":\"iana\"},\"audio/melp2400\":{\"source\":\"iana\"},\"audio/melp600\":{\"source\":\"iana\"},\"audio/mhas\":{\"source\":\"iana\"},\"audio/midi\":{\"source\":\"apache\",\"extensions\":[\"mid\",\"midi\",\"kar\",\"rmi\"]},\"audio/mobile-xmf\":{\"source\":\"iana\",\"extensions\":[\"mxmf\"]},\"audio/mp3\":{\"compressible\":false,\"extensions\":[\"mp3\"]},\"audio/mp4\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"m4a\",\"mp4a\"]},\"audio/mp4a-latm\":{\"source\":\"iana\"},\"audio/mpa\":{\"source\":\"iana\"},\"audio/mpa-robust\":{\"source\":\"iana\"},\"audio/mpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]},\"audio/mpeg4-generic\":{\"source\":\"iana\"},\"audio/musepack\":{\"source\":\"apache\"},\"audio/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"oga\",\"ogg\",\"spx\",\"opus\"]},\"audio/opus\":{\"source\":\"iana\"},\"audio/parityfec\":{\"source\":\"iana\"},\"audio/pcma\":{\"source\":\"iana\"},\"audio/pcma-wb\":{\"source\":\"iana\"},\"audio/pcmu\":{\"source\":\"iana\"},\"audio/pcmu-wb\":{\"source\":\"iana\"},\"audio/prs.sid\":{\"source\":\"iana\"},\"audio/qcelp\":{\"source\":\"iana\"},\"audio/raptorfec\":{\"source\":\"iana\"},\"audio/red\":{\"source\":\"iana\"},\"audio/rtp-enc-aescm128\":{\"source\":\"iana\"},\"audio/rtp-midi\":{\"source\":\"iana\"},\"audio/rtploopback\":{\"source\":\"iana\"},\"audio/rtx\":{\"source\":\"iana\"},\"audio/s3m\":{\"source\":\"apache\",\"extensions\":[\"s3m\"]},\"audio/scip\":{\"source\":\"iana\"},\"audio/silk\":{\"source\":\"apache\",\"extensions\":[\"sil\"]},\"audio/smv\":{\"source\":\"iana\"},\"audio/smv-qcp\":{\"source\":\"iana\"},\"audio/smv0\":{\"source\":\"iana\"},\"audio/sofa\":{\"source\":\"iana\"},\"audio/sp-midi\":{\"source\":\"iana\"},\"audio/speex\":{\"source\":\"iana\"},\"audio/t140c\":{\"source\":\"iana\"},\"audio/t38\":{\"source\":\"iana\"},\"audio/telephone-event\":{\"source\":\"iana\"},\"audio/tetra_acelp\":{\"source\":\"iana\"},\"audio/tetra_acelp_bb\":{\"source\":\"iana\"},\"audio/tone\":{\"source\":\"iana\"},\"audio/tsvcis\":{\"source\":\"iana\"},\"audio/uemclip\":{\"source\":\"iana\"},\"audio/ulpfec\":{\"source\":\"iana\"},\"audio/usac\":{\"source\":\"iana\"},\"audio/vdvi\":{\"source\":\"iana\"},\"audio/vmr-wb\":{\"source\":\"iana\"},\"audio/vnd.3gpp.iufp\":{\"source\":\"iana\"},\"audio/vnd.4sb\":{\"source\":\"iana\"},\"audio/vnd.audiokoz\":{\"source\":\"iana\"},\"audio/vnd.celp\":{\"source\":\"iana\"},\"audio/vnd.cisco.nse\":{\"source\":\"iana\"},\"audio/vnd.cmles.radio-events\":{\"source\":\"iana\"},\"audio/vnd.cns.anp1\":{\"source\":\"iana\"},\"audio/vnd.cns.inf1\":{\"source\":\"iana\"},\"audio/vnd.dece.audio\":{\"source\":\"iana\",\"extensions\":[\"uva\",\"uvva\"]},\"audio/vnd.digital-winds\":{\"source\":\"iana\",\"extensions\":[\"eol\"]},\"audio/vnd.dlna.adts\":{\"source\":\"iana\"},\"audio/vnd.dolby.heaac.1\":{\"source\":\"iana\"},\"audio/vnd.dolby.heaac.2\":{\"source\":\"iana\"},\"audio/vnd.dolby.mlp\":{\"source\":\"iana\"},\"audio/vnd.dolby.mps\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2x\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2z\":{\"source\":\"iana\"},\"audio/vnd.dolby.pulse.1\":{\"source\":\"iana\"},\"audio/vnd.dra\":{\"source\":\"iana\",\"extensions\":[\"dra\"]},\"audio/vnd.dts\":{\"source\":\"iana\",\"extensions\":[\"dts\"]},\"audio/vnd.dts.hd\":{\"source\":\"iana\",\"extensions\":[\"dtshd\"]},\"audio/vnd.dts.uhd\":{\"source\":\"iana\"},\"audio/vnd.dvb.file\":{\"source\":\"iana\"},\"audio/vnd.everad.plj\":{\"source\":\"iana\"},\"audio/vnd.hns.audio\":{\"source\":\"iana\"},\"audio/vnd.lucent.voice\":{\"source\":\"iana\",\"extensions\":[\"lvp\"]},\"audio/vnd.ms-playready.media.pya\":{\"source\":\"iana\",\"extensions\":[\"pya\"]},\"audio/vnd.nokia.mobile-xmf\":{\"source\":\"iana\"},\"audio/vnd.nortel.vbk\":{\"source\":\"iana\"},\"audio/vnd.nuera.ecelp4800\":{\"source\":\"iana\",\"extensions\":[\"ecelp4800\"]},\"audio/vnd.nuera.ecelp7470\":{\"source\":\"iana\",\"extensions\":[\"ecelp7470\"]},\"audio/vnd.nuera.ecelp9600\":{\"source\":\"iana\",\"extensions\":[\"ecelp9600\"]},\"audio/vnd.octel.sbc\":{\"source\":\"iana\"},\"audio/vnd.presonus.multitrack\":{\"source\":\"iana\"},\"audio/vnd.qcelp\":{\"source\":\"iana\"},\"audio/vnd.rhetorex.32kadpcm\":{\"source\":\"iana\"},\"audio/vnd.rip\":{\"source\":\"iana\",\"extensions\":[\"rip\"]},\"audio/vnd.rn-realaudio\":{\"compressible\":false},\"audio/vnd.sealedmedia.softseal.mpeg\":{\"source\":\"iana\"},\"audio/vnd.vmx.cvsd\":{\"source\":\"iana\"},\"audio/vnd.wave\":{\"compressible\":false},\"audio/vorbis\":{\"source\":\"iana\",\"compressible\":false},\"audio/vorbis-config\":{\"source\":\"iana\"},\"audio/wav\":{\"compressible\":false,\"extensions\":[\"wav\"]},\"audio/wave\":{\"compressible\":false,\"extensions\":[\"wav\"]},\"audio/webm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"weba\"]},\"audio/x-aac\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"aac\"]},\"audio/x-aiff\":{\"source\":\"apache\",\"extensions\":[\"aif\",\"aiff\",\"aifc\"]},\"audio/x-caf\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"caf\"]},\"audio/x-flac\":{\"source\":\"apache\",\"extensions\":[\"flac\"]},\"audio/x-m4a\":{\"source\":\"nginx\",\"extensions\":[\"m4a\"]},\"audio/x-matroska\":{\"source\":\"apache\",\"extensions\":[\"mka\"]},\"audio/x-mpegurl\":{\"source\":\"apache\",\"extensions\":[\"m3u\"]},\"audio/x-ms-wax\":{\"source\":\"apache\",\"extensions\":[\"wax\"]},\"audio/x-ms-wma\":{\"source\":\"apache\",\"extensions\":[\"wma\"]},\"audio/x-pn-realaudio\":{\"source\":\"apache\",\"extensions\":[\"ram\",\"ra\"]},\"audio/x-pn-realaudio-plugin\":{\"source\":\"apache\",\"extensions\":[\"rmp\"]},\"audio/x-realaudio\":{\"source\":\"nginx\",\"extensions\":[\"ra\"]},\"audio/x-tta\":{\"source\":\"apache\"},\"audio/x-wav\":{\"source\":\"apache\",\"extensions\":[\"wav\"]},\"audio/xm\":{\"source\":\"apache\",\"extensions\":[\"xm\"]},\"chemical/x-cdx\":{\"source\":\"apache\",\"extensions\":[\"cdx\"]},\"chemical/x-cif\":{\"source\":\"apache\",\"extensions\":[\"cif\"]},\"chemical/x-cmdf\":{\"source\":\"apache\",\"extensions\":[\"cmdf\"]},\"chemical/x-cml\":{\"source\":\"apache\",\"extensions\":[\"cml\"]},\"chemical/x-csml\":{\"source\":\"apache\",\"extensions\":[\"csml\"]},\"chemical/x-pdb\":{\"source\":\"apache\"},\"chemical/x-xyz\":{\"source\":\"apache\",\"extensions\":[\"xyz\"]},\"font/collection\":{\"source\":\"iana\",\"extensions\":[\"ttc\"]},\"font/otf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"otf\"]},\"font/sfnt\":{\"source\":\"iana\"},\"font/ttf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ttf\"]},\"font/woff\":{\"source\":\"iana\",\"extensions\":[\"woff\"]},\"font/woff2\":{\"source\":\"iana\",\"extensions\":[\"woff2\"]},\"image/aces\":{\"source\":\"iana\",\"extensions\":[\"exr\"]},\"image/apng\":{\"compressible\":false,\"extensions\":[\"apng\"]},\"image/avci\":{\"source\":\"iana\",\"extensions\":[\"avci\"]},\"image/avcs\":{\"source\":\"iana\",\"extensions\":[\"avcs\"]},\"image/avif\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"avif\"]},\"image/bmp\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"bmp\"]},\"image/cgm\":{\"source\":\"iana\",\"extensions\":[\"cgm\"]},\"image/dicom-rle\":{\"source\":\"iana\",\"extensions\":[\"drle\"]},\"image/emf\":{\"source\":\"iana\",\"extensions\":[\"emf\"]},\"image/fits\":{\"source\":\"iana\",\"extensions\":[\"fits\"]},\"image/g3fax\":{\"source\":\"iana\",\"extensions\":[\"g3\"]},\"image/gif\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"gif\"]},\"image/heic\":{\"source\":\"iana\",\"extensions\":[\"heic\"]},\"image/heic-sequence\":{\"source\":\"iana\",\"extensions\":[\"heics\"]},\"image/heif\":{\"source\":\"iana\",\"extensions\":[\"heif\"]},\"image/heif-sequence\":{\"source\":\"iana\",\"extensions\":[\"heifs\"]},\"image/hej2k\":{\"source\":\"iana\",\"extensions\":[\"hej2\"]},\"image/hsj2\":{\"source\":\"iana\",\"extensions\":[\"hsj2\"]},\"image/ief\":{\"source\":\"iana\",\"extensions\":[\"ief\"]},\"image/jls\":{\"source\":\"iana\",\"extensions\":[\"jls\"]},\"image/jp2\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jp2\",\"jpg2\"]},\"image/jpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpeg\",\"jpg\",\"jpe\"]},\"image/jph\":{\"source\":\"iana\",\"extensions\":[\"jph\"]},\"image/jphc\":{\"source\":\"iana\",\"extensions\":[\"jhc\"]},\"image/jpm\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpm\"]},\"image/jpx\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpx\",\"jpf\"]},\"image/jxr\":{\"source\":\"iana\",\"extensions\":[\"jxr\"]},\"image/jxra\":{\"source\":\"iana\",\"extensions\":[\"jxra\"]},\"image/jxrs\":{\"source\":\"iana\",\"extensions\":[\"jxrs\"]},\"image/jxs\":{\"source\":\"iana\",\"extensions\":[\"jxs\"]},\"image/jxsc\":{\"source\":\"iana\",\"extensions\":[\"jxsc\"]},\"image/jxsi\":{\"source\":\"iana\",\"extensions\":[\"jxsi\"]},\"image/jxss\":{\"source\":\"iana\",\"extensions\":[\"jxss\"]},\"image/ktx\":{\"source\":\"iana\",\"extensions\":[\"ktx\"]},\"image/ktx2\":{\"source\":\"iana\",\"extensions\":[\"ktx2\"]},\"image/naplps\":{\"source\":\"iana\"},\"image/pjpeg\":{\"compressible\":false},\"image/png\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"png\"]},\"image/prs.btif\":{\"source\":\"iana\",\"extensions\":[\"btif\"]},\"image/prs.pti\":{\"source\":\"iana\",\"extensions\":[\"pti\"]},\"image/pwg-raster\":{\"source\":\"iana\"},\"image/sgi\":{\"source\":\"apache\",\"extensions\":[\"sgi\"]},\"image/svg+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"svg\",\"svgz\"]},\"image/t38\":{\"source\":\"iana\",\"extensions\":[\"t38\"]},\"image/tiff\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"tif\",\"tiff\"]},\"image/tiff-fx\":{\"source\":\"iana\",\"extensions\":[\"tfx\"]},\"image/vnd.adobe.photoshop\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"psd\"]},\"image/vnd.airzip.accelerator.azv\":{\"source\":\"iana\",\"extensions\":[\"azv\"]},\"image/vnd.cns.inf2\":{\"source\":\"iana\"},\"image/vnd.dece.graphic\":{\"source\":\"iana\",\"extensions\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]},\"image/vnd.djvu\":{\"source\":\"iana\",\"extensions\":[\"djvu\",\"djv\"]},\"image/vnd.dvb.subtitle\":{\"source\":\"iana\",\"extensions\":[\"sub\"]},\"image/vnd.dwg\":{\"source\":\"iana\",\"extensions\":[\"dwg\"]},\"image/vnd.dxf\":{\"source\":\"iana\",\"extensions\":[\"dxf\"]},\"image/vnd.fastbidsheet\":{\"source\":\"iana\",\"extensions\":[\"fbs\"]},\"image/vnd.fpx\":{\"source\":\"iana\",\"extensions\":[\"fpx\"]},\"image/vnd.fst\":{\"source\":\"iana\",\"extensions\":[\"fst\"]},\"image/vnd.fujixerox.edmics-mmr\":{\"source\":\"iana\",\"extensions\":[\"mmr\"]},\"image/vnd.fujixerox.edmics-rlc\":{\"source\":\"iana\",\"extensions\":[\"rlc\"]},\"image/vnd.globalgraphics.pgb\":{\"source\":\"iana\"},\"image/vnd.microsoft.icon\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ico\"]},\"image/vnd.mix\":{\"source\":\"iana\"},\"image/vnd.mozilla.apng\":{\"source\":\"iana\"},\"image/vnd.ms-dds\":{\"compressible\":true,\"extensions\":[\"dds\"]},\"image/vnd.ms-modi\":{\"source\":\"iana\",\"extensions\":[\"mdi\"]},\"image/vnd.ms-photo\":{\"source\":\"apache\",\"extensions\":[\"wdp\"]},\"image/vnd.net-fpx\":{\"source\":\"iana\",\"extensions\":[\"npx\"]},\"image/vnd.pco.b16\":{\"source\":\"iana\",\"extensions\":[\"b16\"]},\"image/vnd.radiance\":{\"source\":\"iana\"},\"image/vnd.sealed.png\":{\"source\":\"iana\"},\"image/vnd.sealedmedia.softseal.gif\":{\"source\":\"iana\"},\"image/vnd.sealedmedia.softseal.jpg\":{\"source\":\"iana\"},\"image/vnd.svf\":{\"source\":\"iana\"},\"image/vnd.tencent.tap\":{\"source\":\"iana\",\"extensions\":[\"tap\"]},\"image/vnd.valve.source.texture\":{\"source\":\"iana\",\"extensions\":[\"vtf\"]},\"image/vnd.wap.wbmp\":{\"source\":\"iana\",\"extensions\":[\"wbmp\"]},\"image/vnd.xiff\":{\"source\":\"iana\",\"extensions\":[\"xif\"]},\"image/vnd.zbrush.pcx\":{\"source\":\"iana\",\"extensions\":[\"pcx\"]},\"image/webp\":{\"source\":\"apache\",\"extensions\":[\"webp\"]},\"image/wmf\":{\"source\":\"iana\",\"extensions\":[\"wmf\"]},\"image/x-3ds\":{\"source\":\"apache\",\"extensions\":[\"3ds\"]},\"image/x-cmu-raster\":{\"source\":\"apache\",\"extensions\":[\"ras\"]},\"image/x-cmx\":{\"source\":\"apache\",\"extensions\":[\"cmx\"]},\"image/x-freehand\":{\"source\":\"apache\",\"extensions\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]},\"image/x-icon\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ico\"]},\"image/x-jng\":{\"source\":\"nginx\",\"extensions\":[\"jng\"]},\"image/x-mrsid-image\":{\"source\":\"apache\",\"extensions\":[\"sid\"]},\"image/x-ms-bmp\":{\"source\":\"nginx\",\"compressible\":true,\"extensions\":[\"bmp\"]},\"image/x-pcx\":{\"source\":\"apache\",\"extensions\":[\"pcx\"]},\"image/x-pict\":{\"source\":\"apache\",\"extensions\":[\"pic\",\"pct\"]},\"image/x-portable-anymap\":{\"source\":\"apache\",\"extensions\":[\"pnm\"]},\"image/x-portable-bitmap\":{\"source\":\"apache\",\"extensions\":[\"pbm\"]},\"image/x-portable-graymap\":{\"source\":\"apache\",\"extensions\":[\"pgm\"]},\"image/x-portable-pixmap\":{\"source\":\"apache\",\"extensions\":[\"ppm\"]},\"image/x-rgb\":{\"source\":\"apache\",\"extensions\":[\"rgb\"]},\"image/x-tga\":{\"source\":\"apache\",\"extensions\":[\"tga\"]},\"image/x-xbitmap\":{\"source\":\"apache\",\"extensions\":[\"xbm\"]},\"image/x-xcf\":{\"compressible\":false},\"image/x-xpixmap\":{\"source\":\"apache\",\"extensions\":[\"xpm\"]},\"image/x-xwindowdump\":{\"source\":\"apache\",\"extensions\":[\"xwd\"]},\"message/cpim\":{\"source\":\"iana\"},\"message/delivery-status\":{\"source\":\"iana\"},\"message/disposition-notification\":{\"source\":\"iana\",\"extensions\":[\"disposition-notification\"]},\"message/external-body\":{\"source\":\"iana\"},\"message/feedback-report\":{\"source\":\"iana\"},\"message/global\":{\"source\":\"iana\",\"extensions\":[\"u8msg\"]},\"message/global-delivery-status\":{\"source\":\"iana\",\"extensions\":[\"u8dsn\"]},\"message/global-disposition-notification\":{\"source\":\"iana\",\"extensions\":[\"u8mdn\"]},\"message/global-headers\":{\"source\":\"iana\",\"extensions\":[\"u8hdr\"]},\"message/http\":{\"source\":\"iana\",\"compressible\":false},\"message/imdn+xml\":{\"source\":\"iana\",\"compressible\":true},\"message/news\":{\"source\":\"iana\"},\"message/partial\":{\"source\":\"iana\",\"compressible\":false},\"message/rfc822\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"eml\",\"mime\"]},\"message/s-http\":{\"source\":\"iana\"},\"message/sip\":{\"source\":\"iana\"},\"message/sipfrag\":{\"source\":\"iana\"},\"message/tracking-status\":{\"source\":\"iana\"},\"message/vnd.si.simp\":{\"source\":\"iana\"},\"message/vnd.wfa.wsc\":{\"source\":\"iana\",\"extensions\":[\"wsc\"]},\"model/3mf\":{\"source\":\"iana\",\"extensions\":[\"3mf\"]},\"model/e57\":{\"source\":\"iana\"},\"model/gltf+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"gltf\"]},\"model/gltf-binary\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"glb\"]},\"model/iges\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"igs\",\"iges\"]},\"model/mesh\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"msh\",\"mesh\",\"silo\"]},\"model/mtl\":{\"source\":\"iana\",\"extensions\":[\"mtl\"]},\"model/obj\":{\"source\":\"iana\",\"extensions\":[\"obj\"]},\"model/step\":{\"source\":\"iana\"},\"model/step+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"stpx\"]},\"model/step+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"stpz\"]},\"model/step-xml+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"stpxz\"]},\"model/stl\":{\"source\":\"iana\",\"extensions\":[\"stl\"]},\"model/vnd.collada+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dae\"]},\"model/vnd.dwf\":{\"source\":\"iana\",\"extensions\":[\"dwf\"]},\"model/vnd.flatland.3dml\":{\"source\":\"iana\"},\"model/vnd.gdl\":{\"source\":\"iana\",\"extensions\":[\"gdl\"]},\"model/vnd.gs-gdl\":{\"source\":\"apache\"},\"model/vnd.gs.gdl\":{\"source\":\"iana\"},\"model/vnd.gtw\":{\"source\":\"iana\",\"extensions\":[\"gtw\"]},\"model/vnd.moml+xml\":{\"source\":\"iana\",\"compressible\":true},\"model/vnd.mts\":{\"source\":\"iana\",\"extensions\":[\"mts\"]},\"model/vnd.opengex\":{\"source\":\"iana\",\"extensions\":[\"ogex\"]},\"model/vnd.parasolid.transmit.binary\":{\"source\":\"iana\",\"extensions\":[\"x_b\"]},\"model/vnd.parasolid.transmit.text\":{\"source\":\"iana\",\"extensions\":[\"x_t\"]},\"model/vnd.pytha.pyox\":{\"source\":\"iana\"},\"model/vnd.rosette.annotated-data-model\":{\"source\":\"iana\"},\"model/vnd.sap.vds\":{\"source\":\"iana\",\"extensions\":[\"vds\"]},\"model/vnd.usdz+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"usdz\"]},\"model/vnd.valve.source.compiled-map\":{\"source\":\"iana\",\"extensions\":[\"bsp\"]},\"model/vnd.vtu\":{\"source\":\"iana\",\"extensions\":[\"vtu\"]},\"model/vrml\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"wrl\",\"vrml\"]},\"model/x3d+binary\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"x3db\",\"x3dbz\"]},\"model/x3d+fastinfoset\":{\"source\":\"iana\",\"extensions\":[\"x3db\"]},\"model/x3d+vrml\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"x3dv\",\"x3dvz\"]},\"model/x3d+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"x3d\",\"x3dz\"]},\"model/x3d-vrml\":{\"source\":\"iana\",\"extensions\":[\"x3dv\"]},\"multipart/alternative\":{\"source\":\"iana\",\"compressible\":false},\"multipart/appledouble\":{\"source\":\"iana\"},\"multipart/byteranges\":{\"source\":\"iana\"},\"multipart/digest\":{\"source\":\"iana\"},\"multipart/encrypted\":{\"source\":\"iana\",\"compressible\":false},\"multipart/form-data\":{\"source\":\"iana\",\"compressible\":false},\"multipart/header-set\":{\"source\":\"iana\"},\"multipart/mixed\":{\"source\":\"iana\"},\"multipart/multilingual\":{\"source\":\"iana\"},\"multipart/parallel\":{\"source\":\"iana\"},\"multipart/related\":{\"source\":\"iana\",\"compressible\":false},\"multipart/report\":{\"source\":\"iana\"},\"multipart/signed\":{\"source\":\"iana\",\"compressible\":false},\"multipart/vnd.bint.med-plus\":{\"source\":\"iana\"},\"multipart/voice-message\":{\"source\":\"iana\"},\"multipart/x-mixed-replace\":{\"source\":\"iana\"},\"text/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"text/cache-manifest\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"appcache\",\"manifest\"]},\"text/calendar\":{\"source\":\"iana\",\"extensions\":[\"ics\",\"ifb\"]},\"text/calender\":{\"compressible\":true},\"text/cmd\":{\"compressible\":true},\"text/coffeescript\":{\"extensions\":[\"coffee\",\"litcoffee\"]},\"text/cql\":{\"source\":\"iana\"},\"text/cql-expression\":{\"source\":\"iana\"},\"text/cql-identifier\":{\"source\":\"iana\"},\"text/css\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"css\"]},\"text/csv\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"csv\"]},\"text/csv-schema\":{\"source\":\"iana\"},\"text/directory\":{\"source\":\"iana\"},\"text/dns\":{\"source\":\"iana\"},\"text/ecmascript\":{\"source\":\"iana\"},\"text/encaprtp\":{\"source\":\"iana\"},\"text/enriched\":{\"source\":\"iana\"},\"text/fhirpath\":{\"source\":\"iana\"},\"text/flexfec\":{\"source\":\"iana\"},\"text/fwdred\":{\"source\":\"iana\"},\"text/gff3\":{\"source\":\"iana\"},\"text/grammar-ref-list\":{\"source\":\"iana\"},\"text/html\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"html\",\"htm\",\"shtml\"]},\"text/jade\":{\"extensions\":[\"jade\"]},\"text/javascript\":{\"source\":\"iana\",\"compressible\":true},\"text/jcr-cnd\":{\"source\":\"iana\"},\"text/jsx\":{\"compressible\":true,\"extensions\":[\"jsx\"]},\"text/less\":{\"compressible\":true,\"extensions\":[\"less\"]},\"text/markdown\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"markdown\",\"md\"]},\"text/mathml\":{\"source\":\"nginx\",\"extensions\":[\"mml\"]},\"text/mdx\":{\"compressible\":true,\"extensions\":[\"mdx\"]},\"text/mizar\":{\"source\":\"iana\"},\"text/n3\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"n3\"]},\"text/parameters\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/parityfec\":{\"source\":\"iana\"},\"text/plain\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]},\"text/provenance-notation\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/prs.fallenstein.rst\":{\"source\":\"iana\"},\"text/prs.lines.tag\":{\"source\":\"iana\",\"extensions\":[\"dsc\"]},\"text/prs.prop.logic\":{\"source\":\"iana\"},\"text/raptorfec\":{\"source\":\"iana\"},\"text/red\":{\"source\":\"iana\"},\"text/rfc822-headers\":{\"source\":\"iana\"},\"text/richtext\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtx\"]},\"text/rtf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtf\"]},\"text/rtp-enc-aescm128\":{\"source\":\"iana\"},\"text/rtploopback\":{\"source\":\"iana\"},\"text/rtx\":{\"source\":\"iana\"},\"text/sgml\":{\"source\":\"iana\",\"extensions\":[\"sgml\",\"sgm\"]},\"text/shaclc\":{\"source\":\"iana\"},\"text/shex\":{\"source\":\"iana\",\"extensions\":[\"shex\"]},\"text/slim\":{\"extensions\":[\"slim\",\"slm\"]},\"text/spdx\":{\"source\":\"iana\",\"extensions\":[\"spdx\"]},\"text/strings\":{\"source\":\"iana\"},\"text/stylus\":{\"extensions\":[\"stylus\",\"styl\"]},\"text/t140\":{\"source\":\"iana\"},\"text/tab-separated-values\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tsv\"]},\"text/troff\":{\"source\":\"iana\",\"extensions\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]},\"text/turtle\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"ttl\"]},\"text/ulpfec\":{\"source\":\"iana\"},\"text/uri-list\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uri\",\"uris\",\"urls\"]},\"text/vcard\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"vcard\"]},\"text/vnd.a\":{\"source\":\"iana\"},\"text/vnd.abc\":{\"source\":\"iana\"},\"text/vnd.ascii-art\":{\"source\":\"iana\"},\"text/vnd.curl\":{\"source\":\"iana\",\"extensions\":[\"curl\"]},\"text/vnd.curl.dcurl\":{\"source\":\"apache\",\"extensions\":[\"dcurl\"]},\"text/vnd.curl.mcurl\":{\"source\":\"apache\",\"extensions\":[\"mcurl\"]},\"text/vnd.curl.scurl\":{\"source\":\"apache\",\"extensions\":[\"scurl\"]},\"text/vnd.debian.copyright\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.dmclientscript\":{\"source\":\"iana\"},\"text/vnd.dvb.subtitle\":{\"source\":\"iana\",\"extensions\":[\"sub\"]},\"text/vnd.esmertec.theme-descriptor\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.familysearch.gedcom\":{\"source\":\"iana\",\"extensions\":[\"ged\"]},\"text/vnd.ficlab.flt\":{\"source\":\"iana\"},\"text/vnd.fly\":{\"source\":\"iana\",\"extensions\":[\"fly\"]},\"text/vnd.fmi.flexstor\":{\"source\":\"iana\",\"extensions\":[\"flx\"]},\"text/vnd.gml\":{\"source\":\"iana\"},\"text/vnd.graphviz\":{\"source\":\"iana\",\"extensions\":[\"gv\"]},\"text/vnd.hans\":{\"source\":\"iana\"},\"text/vnd.hgl\":{\"source\":\"iana\"},\"text/vnd.in3d.3dml\":{\"source\":\"iana\",\"extensions\":[\"3dml\"]},\"text/vnd.in3d.spot\":{\"source\":\"iana\",\"extensions\":[\"spot\"]},\"text/vnd.iptc.newsml\":{\"source\":\"iana\"},\"text/vnd.iptc.nitf\":{\"source\":\"iana\"},\"text/vnd.latex-z\":{\"source\":\"iana\"},\"text/vnd.motorola.reflex\":{\"source\":\"iana\"},\"text/vnd.ms-mediapackage\":{\"source\":\"iana\"},\"text/vnd.net2phone.commcenter.command\":{\"source\":\"iana\"},\"text/vnd.radisys.msml-basic-layout\":{\"source\":\"iana\"},\"text/vnd.senx.warpscript\":{\"source\":\"iana\"},\"text/vnd.si.uricatalogue\":{\"source\":\"iana\"},\"text/vnd.sosi\":{\"source\":\"iana\"},\"text/vnd.sun.j2me.app-descriptor\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"jad\"]},\"text/vnd.trolltech.linguist\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.wap.si\":{\"source\":\"iana\"},\"text/vnd.wap.sl\":{\"source\":\"iana\"},\"text/vnd.wap.wml\":{\"source\":\"iana\",\"extensions\":[\"wml\"]},\"text/vnd.wap.wmlscript\":{\"source\":\"iana\",\"extensions\":[\"wmls\"]},\"text/vtt\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"vtt\"]},\"text/x-asm\":{\"source\":\"apache\",\"extensions\":[\"s\",\"asm\"]},\"text/x-c\":{\"source\":\"apache\",\"extensions\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]},\"text/x-component\":{\"source\":\"nginx\",\"extensions\":[\"htc\"]},\"text/x-fortran\":{\"source\":\"apache\",\"extensions\":[\"f\",\"for\",\"f77\",\"f90\"]},\"text/x-gwt-rpc\":{\"compressible\":true},\"text/x-handlebars-template\":{\"extensions\":[\"hbs\"]},\"text/x-java-source\":{\"source\":\"apache\",\"extensions\":[\"java\"]},\"text/x-jquery-tmpl\":{\"compressible\":true},\"text/x-lua\":{\"extensions\":[\"lua\"]},\"text/x-markdown\":{\"compressible\":true,\"extensions\":[\"mkd\"]},\"text/x-nfo\":{\"source\":\"apache\",\"extensions\":[\"nfo\"]},\"text/x-opml\":{\"source\":\"apache\",\"extensions\":[\"opml\"]},\"text/x-org\":{\"compressible\":true,\"extensions\":[\"org\"]},\"text/x-pascal\":{\"source\":\"apache\",\"extensions\":[\"p\",\"pas\"]},\"text/x-processing\":{\"compressible\":true,\"extensions\":[\"pde\"]},\"text/x-sass\":{\"extensions\":[\"sass\"]},\"text/x-scss\":{\"extensions\":[\"scss\"]},\"text/x-setext\":{\"source\":\"apache\",\"extensions\":[\"etx\"]},\"text/x-sfv\":{\"source\":\"apache\",\"extensions\":[\"sfv\"]},\"text/x-suse-ymp\":{\"compressible\":true,\"extensions\":[\"ymp\"]},\"text/x-uuencode\":{\"source\":\"apache\",\"extensions\":[\"uu\"]},\"text/x-vcalendar\":{\"source\":\"apache\",\"extensions\":[\"vcs\"]},\"text/x-vcard\":{\"source\":\"apache\",\"extensions\":[\"vcf\"]},\"text/xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xml\"]},\"text/xml-external-parsed-entity\":{\"source\":\"iana\"},\"text/yaml\":{\"compressible\":true,\"extensions\":[\"yaml\",\"yml\"]},\"video/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"video/3gpp\":{\"source\":\"iana\",\"extensions\":[\"3gp\",\"3gpp\"]},\"video/3gpp-tt\":{\"source\":\"iana\"},\"video/3gpp2\":{\"source\":\"iana\",\"extensions\":[\"3g2\"]},\"video/av1\":{\"source\":\"iana\"},\"video/bmpeg\":{\"source\":\"iana\"},\"video/bt656\":{\"source\":\"iana\"},\"video/celb\":{\"source\":\"iana\"},\"video/dv\":{\"source\":\"iana\"},\"video/encaprtp\":{\"source\":\"iana\"},\"video/ffv1\":{\"source\":\"iana\"},\"video/flexfec\":{\"source\":\"iana\"},\"video/h261\":{\"source\":\"iana\",\"extensions\":[\"h261\"]},\"video/h263\":{\"source\":\"iana\",\"extensions\":[\"h263\"]},\"video/h263-1998\":{\"source\":\"iana\"},\"video/h263-2000\":{\"source\":\"iana\"},\"video/h264\":{\"source\":\"iana\",\"extensions\":[\"h264\"]},\"video/h264-rcdo\":{\"source\":\"iana\"},\"video/h264-svc\":{\"source\":\"iana\"},\"video/h265\":{\"source\":\"iana\"},\"video/iso.segment\":{\"source\":\"iana\",\"extensions\":[\"m4s\"]},\"video/jpeg\":{\"source\":\"iana\",\"extensions\":[\"jpgv\"]},\"video/jpeg2000\":{\"source\":\"iana\"},\"video/jpm\":{\"source\":\"apache\",\"extensions\":[\"jpm\",\"jpgm\"]},\"video/jxsv\":{\"source\":\"iana\"},\"video/mj2\":{\"source\":\"iana\",\"extensions\":[\"mj2\",\"mjp2\"]},\"video/mp1s\":{\"source\":\"iana\"},\"video/mp2p\":{\"source\":\"iana\"},\"video/mp2t\":{\"source\":\"iana\",\"extensions\":[\"ts\"]},\"video/mp4\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mp4\",\"mp4v\",\"mpg4\"]},\"video/mp4v-es\":{\"source\":\"iana\"},\"video/mpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]},\"video/mpeg4-generic\":{\"source\":\"iana\"},\"video/mpv\":{\"source\":\"iana\"},\"video/nv\":{\"source\":\"iana\"},\"video/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ogv\"]},\"video/parityfec\":{\"source\":\"iana\"},\"video/pointer\":{\"source\":\"iana\"},\"video/quicktime\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"qt\",\"mov\"]},\"video/raptorfec\":{\"source\":\"iana\"},\"video/raw\":{\"source\":\"iana\"},\"video/rtp-enc-aescm128\":{\"source\":\"iana\"},\"video/rtploopback\":{\"source\":\"iana\"},\"video/rtx\":{\"source\":\"iana\"},\"video/scip\":{\"source\":\"iana\"},\"video/smpte291\":{\"source\":\"iana\"},\"video/smpte292m\":{\"source\":\"iana\"},\"video/ulpfec\":{\"source\":\"iana\"},\"video/vc1\":{\"source\":\"iana\"},\"video/vc2\":{\"source\":\"iana\"},\"video/vnd.cctv\":{\"source\":\"iana\"},\"video/vnd.dece.hd\":{\"source\":\"iana\",\"extensions\":[\"uvh\",\"uvvh\"]},\"video/vnd.dece.mobile\":{\"source\":\"iana\",\"extensions\":[\"uvm\",\"uvvm\"]},\"video/vnd.dece.mp4\":{\"source\":\"iana\"},\"video/vnd.dece.pd\":{\"source\":\"iana\",\"extensions\":[\"uvp\",\"uvvp\"]},\"video/vnd.dece.sd\":{\"source\":\"iana\",\"extensions\":[\"uvs\",\"uvvs\"]},\"video/vnd.dece.video\":{\"source\":\"iana\",\"extensions\":[\"uvv\",\"uvvv\"]},\"video/vnd.directv.mpeg\":{\"source\":\"iana\"},\"video/vnd.directv.mpeg-tts\":{\"source\":\"iana\"},\"video/vnd.dlna.mpeg-tts\":{\"source\":\"iana\"},\"video/vnd.dvb.file\":{\"source\":\"iana\",\"extensions\":[\"dvb\"]},\"video/vnd.fvt\":{\"source\":\"iana\",\"extensions\":[\"fvt\"]},\"video/vnd.hns.video\":{\"source\":\"iana\"},\"video/vnd.iptvforum.1dparityfec-1010\":{\"source\":\"iana\"},\"video/vnd.iptvforum.1dparityfec-2005\":{\"source\":\"iana\"},\"video/vnd.iptvforum.2dparityfec-1010\":{\"source\":\"iana\"},\"video/vnd.iptvforum.2dparityfec-2005\":{\"source\":\"iana\"},\"video/vnd.iptvforum.ttsavc\":{\"source\":\"iana\"},\"video/vnd.iptvforum.ttsmpeg2\":{\"source\":\"iana\"},\"video/vnd.motorola.video\":{\"source\":\"iana\"},\"video/vnd.motorola.videop\":{\"source\":\"iana\"},\"video/vnd.mpegurl\":{\"source\":\"iana\",\"extensions\":[\"mxu\",\"m4u\"]},\"video/vnd.ms-playready.media.pyv\":{\"source\":\"iana\",\"extensions\":[\"pyv\"]},\"video/vnd.nokia.interleaved-multimedia\":{\"source\":\"iana\"},\"video/vnd.nokia.mp4vr\":{\"source\":\"iana\"},\"video/vnd.nokia.videovoip\":{\"source\":\"iana\"},\"video/vnd.objectvideo\":{\"source\":\"iana\"},\"video/vnd.radgamettools.bink\":{\"source\":\"iana\"},\"video/vnd.radgamettools.smacker\":{\"source\":\"iana\"},\"video/vnd.sealed.mpeg1\":{\"source\":\"iana\"},\"video/vnd.sealed.mpeg4\":{\"source\":\"iana\"},\"video/vnd.sealed.swf\":{\"source\":\"iana\"},\"video/vnd.sealedmedia.softseal.mov\":{\"source\":\"iana\"},\"video/vnd.uvvu.mp4\":{\"source\":\"iana\",\"extensions\":[\"uvu\",\"uvvu\"]},\"video/vnd.vivo\":{\"source\":\"iana\",\"extensions\":[\"viv\"]},\"video/vnd.youtube.yt\":{\"source\":\"iana\"},\"video/vp8\":{\"source\":\"iana\"},\"video/vp9\":{\"source\":\"iana\"},\"video/webm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"webm\"]},\"video/x-f4v\":{\"source\":\"apache\",\"extensions\":[\"f4v\"]},\"video/x-fli\":{\"source\":\"apache\",\"extensions\":[\"fli\"]},\"video/x-flv\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"flv\"]},\"video/x-m4v\":{\"source\":\"apache\",\"extensions\":[\"m4v\"]},\"video/x-matroska\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"mkv\",\"mk3d\",\"mks\"]},\"video/x-mng\":{\"source\":\"apache\",\"extensions\":[\"mng\"]},\"video/x-ms-asf\":{\"source\":\"apache\",\"extensions\":[\"asf\",\"asx\"]},\"video/x-ms-vob\":{\"source\":\"apache\",\"extensions\":[\"vob\"]},\"video/x-ms-wm\":{\"source\":\"apache\",\"extensions\":[\"wm\"]},\"video/x-ms-wmv\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"wmv\"]},\"video/x-ms-wmx\":{\"source\":\"apache\",\"extensions\":[\"wmx\"]},\"video/x-ms-wvx\":{\"source\":\"apache\",\"extensions\":[\"wvx\"]},\"video/x-msvideo\":{\"source\":\"apache\",\"extensions\":[\"avi\"]},\"video/x-sgi-movie\":{\"source\":\"apache\",\"extensions\":[\"movie\"]},\"video/x-smv\":{\"source\":\"apache\",\"extensions\":[\"smv\"]},\"x-conference/x-cooltalk\":{\"source\":\"apache\",\"extensions\":[\"ice\"]},\"x-shader/x-fragment\":{\"compressible\":true},\"x-shader/x-vertex\":{\"compressible\":true}}')},4147:e=>{\"use strict\";e.exports=JSON.parse('{\"name\":\"node-mailjet\",\"version\":\"6.0.5\",\"main\":\"./dist/mailjet.node.js\",\"browser\":\"./dist/mailjet.web.js\",\"types\":\"./dist/declarations/index.d.ts\",\"description\":\"Mailjet API client\",\"author\":\"Mailjet\",\"license\":\"MIT\",\"private\":true,\"keywords\":[\"email\",\"sms\",\"node\",\"mail\",\"mailjet\"],\"engines\":{\"node\":\">= 12.0.0\",\"npm\":\">= 6.9.0\"},\"files\":[\"lib/**\",\"dist/**\"],\"directories\":{\"lib\":\"./lib\",\"docs\":\"./docs\"},\"typescript\":{\"definition\":\"./dist/declarations/index.d.ts\"},\"scripts\":{\"test\":\"npm run ts:mocha test/\",\"test:int\":\"npm run ts:mocha test/integration/\",\"test:unit\":\"npm run ts:mocha test/unit/\",\"test:watch\":\"mocha --extension ts -r tsconfig-paths/register -r ts-node/register --watch\",\"cover\":\"npm run cover:expandable npm run test\",\"cover:int\":\"npm run cover:expandable npm run test:int\",\"cover:unit\":\"npm run cover:expandable npm run test:unit\",\"cover:expandable\":\"nyc --reporter=text-summary --reporter=lcov --report-dir=.coverage --temp-dir=./.coverage/.nyc_output\",\"build\":\"npm run build:release && npm run build:prepublish\",\"build:dev\":\"webpack --config ./webpack/webpack.dev.config.js --progress --color\",\"build:release\":\"webpack --config ./webpack/webpack.release.config.js --progress --color\",\"build:prepublish\":\"node ./scripts/PreparePackage.js\",\"build:watch\":\"webpack --watch --config ./webpack/webpack.dev.config.js --progress --color\",\"lint\":\"eslint .\",\"lint:fix\":\"eslint --fix .\",\"lint:errors\":\"eslint --quiet .\",\"ts:run\":\"ts-node --transpileOnly --project ./tsconfig.json -r tsconfig-paths/register\",\"ts:watch\":\"ts-node-dev --respawn --transpile-only --project ./tsconfig.json -r tsconfig-paths/register\",\"ts:mocha\":\"mocha --extension ts --recursive -r tsconfig-paths/register -r ts-node/register\",\"ts:patch\":\"ts-patch install -s\",\"init\":\"npm install && npm run ts:patch && npm run pkg:prepare\",\"pkg:link\":\"cd ./dist && npm link && echo \\'\\\\n=== link name: node-mailjet ===\\'\",\"pkg:prepare\":\"husky install\",\"pkg:precommit\":\"npm audit && npm run lint:errors && npm run test\",\"release\":\"standard-version -a\",\"release:dry\":\"standard-version --dry-run\",\"release:quiet\":\"standard-version --no-verify -a\",\"release:minor\":\"standard-version -a --release-as minor\",\"release:patch\":\"standard-version -a --release-as patch\",\"release:major\":\"standard-version -a --release-as major\",\"docs\":\"typedoc --tsconfig ./tsconfig.json\"},\"dependencies\":{\"axios\":\"1.6.2\",\"json-bigint\":\"^1.0.0\",\"url-join\":\"^4.0.0\"},\"devDependencies\":{\"@babel/core\":\"^7.18.0\",\"@babel/preset-env\":\"^7.18.0\",\"@commitlint/cli\":\"^17.0.2\",\"@commitlint/config-conventional\":\"^17.0.2\",\"@types/chai\":\"^4.3.1\",\"@types/json-bigint\":\"^1.0.1\",\"@types/mocha\":\"^9.1.1\",\"@types/node\":\"^17.0.34\",\"@types/qs\":\"^6.9.7\",\"@types/superagent\":\"^4.1.15\",\"@types/url-join\":\"^4.0.1\",\"@typescript-eslint/eslint-plugin\":\"^5.24.0\",\"@typescript-eslint/parser\":\"^5.24.0\",\"babel-loader\":\"^8.2.5\",\"chai\":\"^4.1.0\",\"eslint\":\"^8.15.0\",\"eslint-config-airbnb-base\":\"^15.0.0\",\"eslint-import-resolver-typescript\":\"^2.7.1\",\"eslint-plugin-import\":\"^2.26.0\",\"eslint-plugin-tsdoc\":\"^0.2.16\",\"husky\":\"^8.0.1\",\"mocha\":\"^9.0.0\",\"nock\":\"^13.2.4\",\"nyc\":\"^15.1.0\",\"qs\":\"^6.5.0\",\"standard-version\":\"^9.5.0\",\"terser-webpack-plugin\":\"^5.3.1\",\"ts-loader\":\"^9.3.0\",\"ts-node\":\"^10.7.0\",\"ts-node-dev\":\"^1.1.8\",\"ts-patch\":\"^2.0.1\",\"tsconfig-paths\":\"^4.0.0\",\"tsconfig-paths-webpack-plugin\":\"^3.5.2\",\"typedoc\":\"^0.22.15\",\"typescript\":\"^4.6.4\",\"typescript-transform-paths\":\"^3.3.1\",\"webpack\":\"^5.76.0\",\"webpack-cli\":\"^4.9.2\",\"webpack-merge\":\"^5.8.0\"},\"homepage\":\"https://github.com/mailjet/mailjet-apiv3-nodejs#readme\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/mailjet/mailjet-apiv3-nodejs.git\"},\"bugs\":{\"url\":\"https://github.com/mailjet/mailjet-apiv3-nodejs/issues\"},\"contributors\":[\"Arnaud Breton <arnaud@mailjet.com> (https://github.com/arnaudbreton)\",\"Nicholas Smith <nicksmith.biz@gmail.com> (https://github.com/safani)\",\"Jérémie Parker <jeremie@vizeat.com> (https://github.com/p-j)\"]}')}},a={},n=function n(i){var o=a[i];if(void 0!==o)return o.exports;var t=a[i]={exports:{}};return e[i].call(t.exports,t,t.exports,n),t.exports}(8321),n=n.default;var e,a,n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/node-mailjet@6.0.5/node_modules/node-mailjet/mailjet.node.js\n");

/***/ })

};
;