"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@nangohq+node@0.42.10";
exports.ids = ["vendor-chunks/@nangohq+node@0.42.10"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Nango: () => (/* binding */ Nango),\n/* harmony export */   SyncConfigType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_3__.SyncConfigType),\n/* harmony export */   SyncType: () => (/* binding */ SyncType),\n/* harmony export */   getUserAgent: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgent),\n/* harmony export */   prodHost: () => (/* binding */ prodHost),\n/* harmony export */   stagingHost: () => (/* binding */ stagingHost)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@1.7.4/node_modules/axios/lib/axios.js\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/utils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/types.js\");\n\n\n\n\nconst stagingHost = 'https://api-staging.nango.dev';\nconst prodHost = 'https://api.nango.dev';\n\n\nvar SyncType;\n(function (SyncType) {\n    SyncType[\"INITIAL\"] = \"INITIAL\";\n    SyncType[\"INCREMENTAL\"] = \"INCREMENTAL\";\n})(SyncType || (SyncType = {}));\nconst defaultHttpsAgent = new node_https__WEBPACK_IMPORTED_MODULE_1__.Agent({ keepAlive: true });\nclass Nango {\n    serverUrl;\n    secretKey;\n    connectionId;\n    providerConfigKey;\n    isSync = false;\n    dryRun = false;\n    activityLogId;\n    userAgent;\n    http;\n    constructor(config, { userAgent } = {}) {\n        config.host = config.host || prodHost;\n        this.serverUrl = config.host;\n        if (this.serverUrl.slice(-1) === '/') {\n            this.serverUrl = this.serverUrl.slice(0, -1);\n        }\n        if (!config.secretKey) {\n            throw new Error('You must specify a secret key (cf. documentation).');\n        }\n        try {\n            new URL(this.serverUrl);\n        }\n        catch {\n            throw new Error(`Invalid URL provided for the Nango host: ${this.serverUrl}`);\n        }\n        this.secretKey = config.secretKey;\n        this.connectionId = config.connectionId || '';\n        this.providerConfigKey = config.providerConfigKey || '';\n        if (config.isSync) {\n            this.isSync = config.isSync;\n        }\n        if (config.dryRun) {\n            this.dryRun = config.dryRun;\n        }\n        if (config.activityLogId) {\n            this.activityLogId = config.activityLogId;\n        }\n        this.userAgent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgent)(userAgent);\n        this.http = axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].create({\n            httpsAgent: defaultHttpsAgent,\n            headers: {\n                'User-Agent': this.userAgent\n            }\n        });\n    }\n    /**\n     * =======\n     * INTEGRATIONS\n     *      LIST\n     *      GET\n     *      CREATE\n     *      UPDATE\n     *      DELETE\n     * =======\n     */\n    /**\n     * Returns a list of integrations\n     * @returns A promise that resolves with an object containing an array of integration configurations\n     */\n    async listIntegrations() {\n        const url = `${this.serverUrl}/config`;\n        const response = await this.http.get(url, { headers: this.enrichHeaders({}) });\n        return response.data;\n    }\n    /**\n     * Returns a specific integration\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param includeIntegrationCredentials - An optional flag indicating whether to include integration credentials in the response. Default is false\n     * @returns A promise that resolves with an object containing an integration configuration\n     */\n    async getIntegration(providerConfigKey, includeIntegrationCredentials = false) {\n        const url = `${this.serverUrl}/config/${providerConfigKey}`;\n        const response = await this.http.get(url, { headers: this.enrichHeaders({}), params: { include_creds: includeIntegrationCredentials } });\n        return response.data;\n    }\n    /**\n     * Creates a new integration with the specified provider and configuration key\n     * Optionally, you can provide credentials for the integration\n     * @param provider - The provider of the integration\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param credentials - Optional credentials for the integration\n     * @returns A promise that resolves with the created integration configuration\n     */\n    async createIntegration(provider, providerConfigKey, credentials) {\n        const url = `${this.serverUrl}/config`;\n        const response = await this.http.post(url, { provider, provider_config_key: providerConfigKey, ...credentials }, { headers: this.enrichHeaders({}) });\n        return response.data;\n    }\n    /**\n     * Updates an integration with the specified provider and configuration key\n     * Only integrations using OAuth 1 & 2 can be updated, not integrations using API keys & Basic auth (because there is nothing to update for them)\n     * @param provider - The Nango API Configuration (cf. [providers.yaml](https://github.com/NangoHQ/nango/blob/master/packages/shared/providers.yaml))\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param credentials - Optional credentials to include, depending on the specific integration that you want to update\n     * @returns A promise that resolves with the updated integration configuration object\n     */\n    async updateIntegration(provider, providerConfigKey, credentials) {\n        const url = `${this.serverUrl}/config`;\n        const response = await this.http.put(url, { provider, provider_config_key: providerConfigKey, ...credentials }, { headers: this.enrichHeaders({}) });\n        return response.data;\n    }\n    /**\n     * Deletes an integration with the specified configuration key\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @returns A promise that resolves with the response from the server\n     */\n    async deleteIntegration(providerConfigKey) {\n        const url = `${this.serverUrl}/config/${providerConfigKey}`;\n        return await this.http.delete(url, { headers: this.enrichHeaders({}) });\n    }\n    /**\n     * =======\n     * CONNECTIONS\n     *      LIST\n     *      GET\n     *      IMPORT / CREATE -- DEPRECATED use REST API\n     *      GET TOKEN\n     *      GET RAW TOKEN\n     *      GET METADATA\n     *      SET METADATA\n     *      DELETE\n     * =======\n     */\n    /**\n     * Returns a list of connections, optionally filtered by connection ID\n     * @param connectionId - Optional. The ID of the connection to retrieve details of\n     * @returns A promise that resolves with an array of connection objects\n     */\n    async listConnections(connectionId) {\n        const response = await this.listConnectionDetails(connectionId);\n        return response.data;\n    }\n    /**\n     * Returns a connection object, which also contains access credentials and full credentials payload\n     * @param providerConfigKey - The integration ID used to create the connection (i.e Unique Key)\n     * @param connectionId - This is the unique connection identifier used to identify this connection\n     * @param forceRefresh - Optional. When set to true, this obtains a new access token from the provider before the current token has expired\n     * @param refreshToken - Optional. When set to true, this returns the refresh token as part of the response\n     * @returns A promise that resolves with a connection object\n     */\n    async getConnection(providerConfigKey, connectionId, forceRefresh, refreshToken) {\n        const response = await this.getConnectionDetails(providerConfigKey, connectionId, forceRefresh, refreshToken);\n        return response.data;\n    }\n    /**\n     * @deprecated This method has been deprecated, please use the REST API to import a connection.\n     */\n    importConnection(_connectionArgs) {\n        throw new Error('This method has been deprecated, please use the REST API to import a connection.');\n    }\n    /**\n     * @deprecated This method has been deprecated, please use the REST API to import a connection.\n     */\n    createConnection(_connectionArgs) {\n        throw new Error('This method has been deprecated, please use the REST API to create a connection.');\n    }\n    /**\n     * For OAuth 2: returns the access token directly as a string\n     * For OAuth 2: If you want to obtain a new refresh token from the provider before the current token has expired,\n     * you can set the forceRefresh argument to true\n     * For OAuth 1: returns an object with 'oAuthToken' and 'oAuthTokenSecret' fields\n     * @param providerConfigKey - The integration ID used to create the connection (i.e Unique Key)\n     * @param connectionId - This is the unique connection identifier used to identify this connection\n     * @param forceRefresh - Optional. When set to true, this obtains a new access token from the provider before the current token has expired\n     */\n    async getToken(providerConfigKey, connectionId, forceRefresh) {\n        const response = await this.getConnectionDetails(providerConfigKey, connectionId, forceRefresh);\n        switch (response.data.credentials.type) {\n            case 'OAUTH2':\n                return response.data.credentials.access_token;\n            case 'OAUTH1':\n                return { oAuthToken: response.data.credentials.oauth_token, oAuthTokenSecret: response.data.credentials.oauth_token_secret };\n            default:\n                return response.data.credentials;\n        }\n    }\n    /**\n     * Get the full (fresh) credentials payload returned by the external API,\n     * which also contains access credentials\n     * @param providerConfigKey - The integration ID used to create the connection (i.e Unique Key)\n     * @param connectionId - This is the unique connection identifier used to identify this connection\n     * @param forceRefresh - Optional. When set to true, this obtains a new access token from the provider before the current token has expired\n     * @returns A promise that resolves with the raw token response\n     */\n    async getRawTokenResponse(providerConfigKey, connectionId, forceRefresh) {\n        const response = await this.getConnectionDetails(providerConfigKey, connectionId, forceRefresh);\n        const credentials = response.data.credentials;\n        return credentials.raw;\n    }\n    /**\n     * Retrieves metadata for a given provider configuration key and connection ID\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID of the connection for which to retrieve metadata\n     * @returns A promise that resolves with the retrieved metadata\n     */\n    async getMetadata(providerConfigKey, connectionId) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (!connectionId) {\n            throw new Error('Connection Id is required');\n        }\n        const response = await this.getConnectionDetails(providerConfigKey, connectionId, false, false, {\n            'Nango-Is-Sync': true,\n            'Nango-Is-Dry-Run': this.dryRun\n        });\n        return response.data.metadata;\n    }\n    /**\n     * Sets custom metadata for a connection\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID(s) of the connection(s) for which to set metadata\n     * @param metadata - The custom metadata to set\n     * @returns A promise that resolves with the Axios response from the server\n     */\n    async setMetadata(providerConfigKey, connectionId, metadata) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (!connectionId) {\n            throw new Error('Connection Id is required');\n        }\n        if (!metadata) {\n            throw new Error('Metadata is required');\n        }\n        const url = `${this.serverUrl}/connection/metadata`;\n        return this.http.post(url, { metadata, connection_id: connectionId, provider_config_key: providerConfigKey }, { headers: this.enrichHeaders() });\n    }\n    /**\n     * Edits custom metadata for a connection, only overriding specified properties, not the entire metadata\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID(s) of the connection(s) for which to update metadata\n     * @param metadata - The custom metadata to update\n     * @returns A promise that resolves with the Axios response from the server\n     */\n    async updateMetadata(providerConfigKey, connectionId, metadata) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (!connectionId) {\n            throw new Error('Connection Id is required');\n        }\n        if (!metadata) {\n            throw new Error('Metadata is required');\n        }\n        const url = `${this.serverUrl}/connection/metadata`;\n        return this.http.patch(url, { metadata, connection_id: connectionId, provider_config_key: providerConfigKey }, { headers: this.enrichHeaders() });\n    }\n    /**\n     * Deletes a specific connection\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID of the connection to be deleted\n     * @returns A promise that resolves with the Axios response from the server\n     */\n    async deleteConnection(providerConfigKey, connectionId) {\n        const url = `${this.serverUrl}/connection/${connectionId}?provider_config_key=${providerConfigKey}`;\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        return this.http.delete(url, { headers: this.enrichHeaders(headers) });\n    }\n    /**\n     * =======\n     * SCRIPTS\n     *      CONFIG\n     * =======\n     */\n    /**\n     * Retrieves the configuration for all integration scripts\n     * @returns A promise that resolves with an array of configuration objects for all integration scripts\n     */\n    async getScriptsConfig() {\n        const url = `${this.serverUrl}/scripts/config`;\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        const response = await this.http.get(url, { headers: this.enrichHeaders(headers) });\n        return response.data;\n    }\n    /**\n     * =======\n     * SYNCS\n     *      GET RECORDS\n     *      TRIGGER\n     *      START\n     *      PAUSE\n     *      STATUS\n     *      GET ENVIRONMENT VARIABLES\n     * =======\n     */\n    /**\n     * Returns the synced data, ordered by modification date ascending\n     * If some records are updated while you paginate through this endpoint, you might see these records multiple times\n     * @param config - Configuration object for listing records\n     * @returns A promise that resolves with an object containing an array of records and a cursor for pagination\n     */\n    async listRecords(config) {\n        const { connectionId, providerConfigKey, model, delta, modifiedAfter, limit, filter, cursor } = config;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.validateSyncRecordConfiguration)(config);\n        const url = `${this.serverUrl}/records/?model=${model}${delta || modifiedAfter ? `&modified_after=${modifiedAfter || delta}` : ''}${limit ? `&limit=${limit}` : ''}${filter ? `&filter=${filter}` : ''}${cursor ? `&cursor=${cursor}` : ''}`;\n        const headers = {\n            'Connection-Id': connectionId,\n            'Provider-Config-Key': providerConfigKey\n        };\n        const options = {\n            headers: this.enrichHeaders(headers)\n        };\n        const response = await this.http.get(url, options);\n        return response.data;\n    }\n    /**\n     * Triggers an additional, one-off execution of specified sync(s) for a given connection or all applicable connections if no connection is specified\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param syncs - An optional array of sync names to trigger. If empty, all applicable syncs will be triggered\n     * @param connectionId - An optional ID of the connection for which to trigger the syncs. If not provided, syncs will be triggered for all applicable connections\n     * @param fullResync - An optional flag indicating whether to perform a full resynchronization. Default is false\n     * @returns A promise that resolves when the sync trigger request is sent\n     */\n    async triggerSync(providerConfigKey, syncs, connectionId, fullResync) {\n        const url = `${this.serverUrl}/sync/trigger`;\n        if (typeof syncs === 'string') {\n            throw new Error('Syncs must be an array of strings. If it is a single sync, please wrap it in an array.');\n        }\n        const body = {\n            syncs: syncs || [],\n            provider_config_key: providerConfigKey,\n            connection_id: connectionId,\n            full_resync: fullResync\n        };\n        return this.http.post(url, body, { headers: this.enrichHeaders() });\n    }\n    /**\n     * Starts the schedule of specified sync(s) for a given connection or all applicable connections if no connection is specified. Upon starting the schedule, the sync will execute immediately and then continue to run at the specified frequency. If the schedule was already started, this will have no effect.\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param syncs - An optional array of sync names to start. If empty, all applicable syncs will be started\n     * @param connectionId - An optional ID of the connection for which to start the syncs. If not provided, syncs will be started for all applicable connections\n     * @returns A promise that resolves when the sync start request is sent\n     */\n    async startSync(providerConfigKey, syncs, connectionId) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (!syncs) {\n            throw new Error('Sync is required');\n        }\n        if (typeof syncs === 'string') {\n            throw new Error('Syncs must be an array of strings. If it is a single sync, please wrap it in an array.');\n        }\n        const body = {\n            syncs: syncs || [],\n            provider_config_key: providerConfigKey,\n            connection_id: connectionId\n        };\n        const url = `${this.serverUrl}/sync/start`;\n        return this.http.post(url, body, { headers: this.enrichHeaders() });\n    }\n    /**\n     * Pauses the schedule of specified sync(s) for a given connection or all applicable connections\n     * @param providerConfigKey -The key identifying the provider configuration on Nango\n     * @param syncs - An optional array of sync names to pause. If empty, all applicable syncs will be paused\n     * @param connectionId - An optional ID of the connection for which to pause the syncs. If not provided, syncs will be paused for all applicable connections\n     * @returns A promise that resolves when the sync pause request is sent\n     */\n    async pauseSync(providerConfigKey, syncs, connectionId) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (!syncs) {\n            throw new Error('Sync is required');\n        }\n        if (typeof syncs === 'string') {\n            throw new Error('Syncs must be an array of strings. If it is a single sync, please wrap it in an array.');\n        }\n        const url = `${this.serverUrl}/sync/pause`;\n        const body = {\n            syncs: syncs || [],\n            provider_config_key: providerConfigKey,\n            connection_id: connectionId\n        };\n        return this.http.post(url, body, { headers: this.enrichHeaders() });\n    }\n    /**\n     * Get the status of specified sync(s) for a given connection or all applicable connections\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param syncs - An array of sync names to get status for, or '*' to get status for all syncs\n     * @param connectionId - An optional ID of the connection for which to get sync status. If not provided, status for all applicable connections will be retrieved\n     * @returns A promise that resolves with the status of the specified sync(s)\n     */\n    async syncStatus(providerConfigKey, syncs, connectionId) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (!syncs) {\n            throw new Error('Sync is required');\n        }\n        if (typeof syncs === 'string' && syncs !== '*') {\n            throw new Error('Syncs must be an array of strings. If it is a single sync, please wrap it in an array.');\n        }\n        const url = `${this.serverUrl}/sync/status`;\n        const params = {\n            syncs: syncs === '*' ? '*' : syncs.join(','),\n            provider_config_key: providerConfigKey,\n            connection_id: connectionId\n        };\n        const response = await this.http.get(url, { headers: this.enrichHeaders(), params });\n        return response.data;\n    }\n    /**\n     * Override a sync’s default frequency for a specific connection, or revert to the default frequency\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param sync - The name of the sync to update\n     * @param connectionId - The ID of the connection for which to update the sync frequency\n     * @param frequency - The new frequency to set for the sync, or null to revert to the default frequency\n     * @returns A promise that resolves with the response data after updating the sync frequency\n     */\n    async updateSyncConnectionFrequency(providerConfigKey, sync, connectionId, frequency) {\n        if (!providerConfigKey) {\n            throw new Error('Provider Config Key is required');\n        }\n        if (typeof sync === 'string') {\n            throw new Error('Sync must be a string.');\n        }\n        if (typeof connectionId === 'string') {\n            throw new Error('ConnectionId must be a string.');\n        }\n        if (typeof frequency !== 'string' && frequency !== null) {\n            throw new Error('Frequency must be a string or null.');\n        }\n        const url = `${this.serverUrl}/sync/update-connection-frequency`;\n        const params = {\n            sync,\n            provider_config_key: providerConfigKey,\n            connection_id: connectionId,\n            frequency\n        };\n        const response = await this.http.put(url, { headers: this.enrichHeaders(), params });\n        return response.data;\n    }\n    /**\n     * Retrieve the environment variables as added in the Nango dashboard\n     * @returns A promise that resolves with an array of environment variables\n     */\n    async getEnvironmentVariables() {\n        const url = `${this.serverUrl}/environment-variables`;\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        const response = await this.http.get(url, { headers: this.enrichHeaders(headers) });\n        if (!response.data) {\n            return [];\n        }\n        return response.data;\n    }\n    /**\n     * =======\n     * ACTIONS\n     *      TRIGGER\n     * =======\n     */\n    /**\n     * Triggers an action for a connection\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID of the connection for which the action should be triggered\n     * @param actionName - The name of the action to trigger\n     * @param input - An optional input data for the action\n     * @returns A promise that resolves with an object containing the response data from the triggered action\n     */\n    async triggerAction(providerConfigKey, connectionId, actionName, input) {\n        const url = `${this.serverUrl}/action/trigger`;\n        const headers = {\n            'Connection-Id': connectionId,\n            'Provider-Config-Key': providerConfigKey\n        };\n        const body = {\n            action_name: actionName,\n            input\n        };\n        const response = await this.http.post(url, body, { headers: this.enrichHeaders(headers) });\n        return response.data;\n    }\n    /**\n     * =======\n     * PROXY\n     *      GET\n     *      POST\n     *      PUT\n     *      PATCH\n     *      DELETE\n     * =======\n     */\n    /**\n     * Sends a proxied HTTP request based on the provided configuration\n     * @param config - The configuration object for the proxy request\n     * @returns A promise that resolves with the response from the proxied request\n     */\n    async proxy(config) {\n        if (!config.connectionId && this.connectionId) {\n            config.connectionId = this.connectionId;\n        }\n        if (!config.providerConfigKey && this.providerConfigKey) {\n            config.providerConfigKey = this.providerConfigKey;\n        }\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.validateProxyConfiguration)(config);\n        const { providerConfigKey, connectionId, method, retries, headers: customHeaders, baseUrlOverride, decompress, retryOn } = config;\n        const url = `${this.serverUrl}/proxy${config.endpoint[0] === '/' ? '' : '/'}${config.endpoint}`;\n        const customPrefixedHeaders = customHeaders && Object.keys(customHeaders).length > 0\n            ? Object.keys(customHeaders).reduce((acc, key) => {\n                acc[`Nango-Proxy-${key}`] = customHeaders[key];\n                return acc;\n            }, {})\n            : {};\n        const headers = {\n            'Connection-Id': connectionId,\n            'Provider-Config-Key': providerConfigKey,\n            'Base-Url-Override': baseUrlOverride || '',\n            'Nango-Is-Sync': this.isSync,\n            'Nango-Is-Dry-Run': this.dryRun,\n            'Nango-Activity-Log-Id': this.activityLogId || '',\n            ...customPrefixedHeaders\n        };\n        if (customHeaders?.['Content-Type']) {\n            headers['Content-Type'] = customHeaders['Content-Type'];\n        }\n        if (retries) {\n            headers['Retries'] = retries;\n        }\n        if (decompress) {\n            headers['Decompress'] = decompress;\n        }\n        if (retryOn) {\n            headers['Retry-On'] = retryOn.join(',');\n        }\n        const options = {\n            headers: this.enrichHeaders(headers)\n        };\n        if (config.params) {\n            options.params = config.params;\n        }\n        if (config.paramsSerializer) {\n            options.paramsSerializer = config.paramsSerializer;\n        }\n        if (config.responseType) {\n            options.responseType = config.responseType;\n        }\n        if (method?.toUpperCase() === 'POST') {\n            return this.http.post(url, config.data, options);\n        }\n        else if (method?.toUpperCase() === 'PATCH') {\n            return this.http.patch(url, config.data, options);\n        }\n        else if (method?.toUpperCase() === 'PUT') {\n            return this.http.put(url, config.data, options);\n        }\n        else if (method?.toUpperCase() === 'DELETE') {\n            return this.http.delete(url, options);\n        }\n        else {\n            return this.http.get(url, options);\n        }\n    }\n    /**\n     * Sends a GET request using the proxy based on the provided configuration\n     * @param config - The configuration object for the GET request\n     * @returns A promise that resolves with the response from the GET request\n     */\n    async get(config) {\n        return this.proxy({\n            ...config,\n            method: 'GET'\n        });\n    }\n    /**\n     * Sends a POST request using the proxy based on the provided configuration\n     * @param config - The configuration object for the POST request\n     * @returns A promise that resolves with the response from the POST request\n     */\n    async post(config) {\n        return this.proxy({\n            ...config,\n            method: 'POST'\n        });\n    }\n    /**\n     * Sends a PATCH request using the proxy based on the provided configuration\n     * @param config - The configuration object for the PATCH request\n     * @returns A promise that resolves with the response from the PATCH request\n     */\n    async patch(config) {\n        return this.proxy({\n            ...config,\n            method: 'PATCH'\n        });\n    }\n    /**\n     * Sends a DELETE request using the proxy based on the provided configuration\n     * @param config - The configuration object for the DELETE request\n     * @returns A promise that resolves with the response from the DELETE request\n     */\n    async delete(config) {\n        return this.proxy({\n            ...config,\n            method: 'DELETE'\n        });\n    }\n    // -- Webhooks\n    /**\n     *\n     * Verify incoming webhooks signature\n     *\n     * @param signatureInHeader - The value in the header X-Nango-Signature\n     * @param jsonPayload - The HTTP body as JSON\n     * @returns Whether the signature is valid\n     */\n    verifyWebhookSignature(signatureInHeader, jsonPayload) {\n        return (node_crypto__WEBPACK_IMPORTED_MODULE_0__.createHash('sha256')\n            .update(`${this.secretKey}${JSON.stringify(jsonPayload)}`)\n            .digest('hex') === signatureInHeader);\n    }\n    /**\n     * Retrieves details of a specific connection\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID of the connection for which to retrieve connection details\n     * @param forceRefresh - An optional flag indicating whether to force a refresh of the access tokens. Defaults to false\n     * @param refreshToken - An optional flag indicating whether to send the refresh token as part of the response. Defaults to false\n     * @param additionalHeader - Optional. Additional headers to include in the request\n     * @returns A promise that resolves with the response containing connection details\n     */\n    async getConnectionDetails(providerConfigKey, connectionId, forceRefresh = false, refreshToken = false, additionalHeader = {}) {\n        const url = `${this.serverUrl}/connection/${connectionId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Nango-Is-Sync': this.isSync,\n            'Nango-Is-Dry-Run': this.dryRun\n        };\n        if (additionalHeader) {\n            Object.assign(headers, additionalHeader);\n        }\n        const params = {\n            provider_config_key: providerConfigKey,\n            force_refresh: forceRefresh,\n            refresh_token: refreshToken\n        };\n        return this.http.get(url, { params: params, headers: this.enrichHeaders(headers) });\n    }\n    /**\n     * Retrieves details of all connections from the server or details of a specific connection if a connection ID is provided\n     * @param connectionId - Optional. This is the unique connection identifier used to identify this connection\n     * @returns A promise that resolves with the response containing connection details\n     */\n    async listConnectionDetails(connectionId) {\n        let url = `${this.serverUrl}/connection?`;\n        if (connectionId) {\n            url = url.concat(`connectionId=${connectionId}`);\n        }\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        return this.http.get(url, { headers: this.enrichHeaders(headers) });\n    }\n    /**\n     * Enriches the headers with the Authorization token\n     * @param headers - Optional. The headers to enrich\n     * @returns The enriched headers\n     */\n    enrichHeaders(headers = {}) {\n        headers['Authorization'] = 'Bearer ' + this.secretKey;\n        return headers;\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/types.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/types.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncConfigType: () => (/* binding */ SyncConfigType)\n/* harmony export */ });\nvar SyncConfigType;\n(function (SyncConfigType) {\n    SyncConfigType[\"SYNC\"] = \"sync\";\n    SyncConfigType[\"ACTION\"] = \"action\";\n})(SyncConfigType || (SyncConfigType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5hbmdvaHErbm9kZUAwLjQyLjEwL25vZGVfbW9kdWxlcy9AbmFuZ29ocS9ub2RlL2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFyYmxpc20vbmV4dGpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuYW5nb2hxK25vZGVAMC40Mi4xMC9ub2RlX21vZHVsZXMvQG5hbmdvaHEvbm9kZS9kaXN0L3R5cGVzLmpzPzVmYmEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBTeW5jQ29uZmlnVHlwZTtcbihmdW5jdGlvbiAoU3luY0NvbmZpZ1R5cGUpIHtcbiAgICBTeW5jQ29uZmlnVHlwZVtcIlNZTkNcIl0gPSBcInN5bmNcIjtcbiAgICBTeW5jQ29uZmlnVHlwZVtcIkFDVElPTlwiXSA9IFwiYWN0aW9uXCI7XG59KShTeW5jQ29uZmlnVHlwZSB8fCAoU3luY0NvbmZpZ1R5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/utils.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/utils.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserAgent: () => (/* binding */ getUserAgent),\n/* harmony export */   validateProxyConfiguration: () => (/* binding */ validateProxyConfiguration),\n/* harmony export */   validateSyncRecordConfiguration: () => (/* binding */ validateSyncRecordConfiguration)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/version.js\");\n\n\n/**\n * Validates the configuration for a proxy call\n * @param config - Configuration object for the proxy call\n * @throws If required parameters are missing in the configuration\n */\nconst validateProxyConfiguration = (config) => {\n    const requiredParams = ['endpoint', 'providerConfigKey', 'connectionId'];\n    requiredParams.forEach((param) => {\n        if (typeof config[param] === 'undefined') {\n            throw new Error(`${param} is missing and is required to make a proxy call!`);\n        }\n    });\n};\n/**\n * Validates the configuration for fetching sync records\n * @param config - Configuration object for fetching sync records\n * @throws If required parameters are missing in the configuration\n */\nconst validateSyncRecordConfiguration = (config) => {\n    const requiredParams = ['model', 'providerConfigKey', 'connectionId'];\n    requiredParams.forEach((param) => {\n        if (typeof config[param] === 'undefined') {\n            throw new Error(`${param} is missing and is required to make a proxy call!`);\n        }\n    });\n};\nfunction getUserAgent(userAgent) {\n    const nodeVersion = process.versions.node;\n    const osName = os__WEBPACK_IMPORTED_MODULE_0__.platform().replace(' ', '_');\n    const osVersion = os__WEBPACK_IMPORTED_MODULE_0__.release().replace(' ', '_');\n    return `nango-node-client/${_version_js__WEBPACK_IMPORTED_MODULE_1__.NANGO_VERSION} (${osName}/${osVersion}; node.js/${nodeVersion})${userAgent ? `; ${userAgent}` : ''}`;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5hbmdvaHErbm9kZUAwLjQyLjEwL25vZGVfbW9kdWxlcy9AbmFuZ29ocS9ub2RlL2Rpc3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0I7QUFDeUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE9BQU87QUFDdEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTztBQUN0QztBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQSxtQkFBbUIsd0NBQVc7QUFDOUIsc0JBQXNCLHVDQUFVO0FBQ2hDLGdDQUFnQyxzREFBYSxFQUFFLEdBQUcsT0FBTyxHQUFHLFlBQVksVUFBVSxZQUFZLEdBQUcsZUFBZSxFQUFFLFVBQVUsT0FBTztBQUNuSTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hcmJsaXNtL25leHRqcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmFuZ29ocStub2RlQDAuNDIuMTAvbm9kZV9tb2R1bGVzL0BuYW5nb2hxL25vZGUvZGlzdC91dGlscy5qcz85NGViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgeyBOQU5HT19WRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uLmpzJztcbi8qKlxuICogVmFsaWRhdGVzIHRoZSBjb25maWd1cmF0aW9uIGZvciBhIHByb3h5IGNhbGxcbiAqIEBwYXJhbSBjb25maWcgLSBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgdGhlIHByb3h5IGNhbGxcbiAqIEB0aHJvd3MgSWYgcmVxdWlyZWQgcGFyYW1ldGVycyBhcmUgbWlzc2luZyBpbiB0aGUgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVQcm94eUNvbmZpZ3VyYXRpb24gPSAoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgcmVxdWlyZWRQYXJhbXMgPSBbJ2VuZHBvaW50JywgJ3Byb3ZpZGVyQ29uZmlnS2V5JywgJ2Nvbm5lY3Rpb25JZCddO1xuICAgIHJlcXVpcmVkUGFyYW1zLmZvckVhY2goKHBhcmFtKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnW3BhcmFtXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtwYXJhbX0gaXMgbWlzc2luZyBhbmQgaXMgcmVxdWlyZWQgdG8gbWFrZSBhIHByb3h5IGNhbGwhYCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgY29uZmlndXJhdGlvbiBmb3IgZmV0Y2hpbmcgc3luYyByZWNvcmRzXG4gKiBAcGFyYW0gY29uZmlnIC0gQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGZldGNoaW5nIHN5bmMgcmVjb3Jkc1xuICogQHRocm93cyBJZiByZXF1aXJlZCBwYXJhbWV0ZXJzIGFyZSBtaXNzaW5nIGluIHRoZSBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVN5bmNSZWNvcmRDb25maWd1cmF0aW9uID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IHJlcXVpcmVkUGFyYW1zID0gWydtb2RlbCcsICdwcm92aWRlckNvbmZpZ0tleScsICdjb25uZWN0aW9uSWQnXTtcbiAgICByZXF1aXJlZFBhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZ1twYXJhbV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGFyYW19IGlzIG1pc3NpbmcgYW5kIGlzIHJlcXVpcmVkIHRvIG1ha2UgYSBwcm94eSBjYWxsIWApO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJBZ2VudCh1c2VyQWdlbnQpIHtcbiAgICBjb25zdCBub2RlVmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbnMubm9kZTtcbiAgICBjb25zdCBvc05hbWUgPSBvcy5wbGF0Zm9ybSgpLnJlcGxhY2UoJyAnLCAnXycpO1xuICAgIGNvbnN0IG9zVmVyc2lvbiA9IG9zLnJlbGVhc2UoKS5yZXBsYWNlKCcgJywgJ18nKTtcbiAgICByZXR1cm4gYG5hbmdvLW5vZGUtY2xpZW50LyR7TkFOR09fVkVSU0lPTn0gKCR7b3NOYW1lfS8ke29zVmVyc2lvbn07IG5vZGUuanMvJHtub2RlVmVyc2lvbn0pJHt1c2VyQWdlbnQgPyBgOyAke3VzZXJBZ2VudH1gIDogJyd9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/version.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/version.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NANGO_VERSION: () => (/* binding */ NANGO_VERSION)\n/* harmony export */ });\nconst NANGO_VERSION = '0.42.10';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5hbmdvaHErbm9kZUAwLjQyLjEwL25vZGVfbW9kdWxlcy9AbmFuZ29ocS9ub2RlL2Rpc3QvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0anMvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5hbmdvaHErbm9kZUAwLjQyLjEwL25vZGVfbW9kdWxlcy9AbmFuZ29ocS9ub2RlL2Rpc3QvdmVyc2lvbi5qcz8wYTYzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBOQU5HT19WRVJTSU9OID0gJzAuNDIuMTAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@nangohq+node@0.42.10/node_modules/@nangohq/node/dist/version.js\n");

/***/ })

};
;